#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os, optparse, re
from subprocess import *

#------------------------------------------------------------------------------
# Libraries shared by all kteam-tools will be found here (../lib)
#------------------------------------------------------------------------------
common_lib = os.path.dirname(os.path.abspath(sys.argv[0]))
common_lib = os.path.dirname(common_lib)
common_lib = os.path.join(common_lib, "lib")
sys.path.insert(0, common_lib)

from buildenv_lib import *

#------------------------------------------------------------------------------
# Setup the command line parser and run it.
#------------------------------------------------------------------------------
parser = optparse.OptionParser("Usage: %prog [options]")
dsc    = "Starts a new release and commits the changes to git (also will "
dsc   += "optionally fetch the ABI files)."
parser.set_description(dsc)
parser.add_option(
	"--host", action="store", dest="tgthost", default=None,
	help="hostname to be passed to maint-getabis (default is to use the "
	     "one maint-getabis defaults to)")
parser.add_option(
	"--dry-run", action="store_true", dest="dryrun", default=False,
	help="only print what would be done")
parser.add_option(
	"--local", action="store_true", dest="local", default=False,
	help="pass --local to maint-getabis, to extract the packages "
	     "locally")
parser.add_option(
	"--ckt-ppa", action="store_true", dest="cktppa", default=False,
	help="pass --ckt-ppa to maint-getabis, to add c-k-t ppa as an "
	     "abi source")
(opts, args) = parser.parse_args()


#
# Make sure the DEBEMAIL is a canonical address
#
debem = os.getenv("DEBEMAIL")
if debem is not None:
	if 'canonical' not in debem:
		print 'DEBEMAIL is set to non-canonical address'
		sys.exit(1)

#------------------------------------------------------------------------------
# Find the abstracted debian directory and make sure it is there (IOW we are
# in the right directory).
#------------------------------------------------------------------------------
debian_dir = GetDebianDir()
if not os.path.isdir(debian_dir):
	print "EE:", debian_dir, "not found! Must be called from toplevel",
	print "directory."
	sys.exit(1)

(srcpkg, version, pocket, flags) = GetPackageInfo()
kversion = version.split("-")[0]
kabi, krel = version.split("-")[1].split(".")

#------------------------------------------------------------------------------
# Make sure the changelog is not locally modified.
#------------------------------------------------------------------------------
changelog = os.path.join(debian_dir, "changelog")
if GitDiff(changelog):
	print "EE:", changelog, "has been locally modified!"
	sys.exit(1)

#------------------------------------------------------------------------------
# Check whether the current release is not released. In that case there is
# nothing to do but to warn.
#------------------------------------------------------------------------------
if pocket == "UNRELEASED":
	print("WW: %s-%s" % (srcpkg, version))
	print(" ")
	print("    The tree is in a state (UNRELEASED) that does not require a 'start new release'. ")
	print("    Patches may be applied directly to the branch as it currently stands.")
	sys.exit(0)

#------------------------------------------------------------------------------
# Stupid little helper to get the current date and time in RFC format. There
# are functions in python, but I don't understand them.
#------------------------------------------------------------------------------
def GetDateTime():
	return Popen("date -R", shell=True, stdout=PIPE).stdout.readline()

#------------------------------------------------------------------------------
# Only need to take care of the ABI files for the linux-kernel package.
#------------------------------------------------------------------------------
if os.path.isdir(os.path.join(debian_dir, "abi")):
	#----------------------------------------------------------------------
	# Try to get the new ABI files (note that version is not incremented,
	# yet).
	#----------------------------------------------------------------------
	for path in sys.path:
		cmd = os.path.join(path, "maint-getabis")
		if os.path.isfile(cmd):
			break
	else:
		print "EE: maint-getabis not found!"
		sys.exit(1)
	if opts.tgthost:
		cmd += " --host " + opts.tgthost
	if opts.dryrun:
		cmd += " --dry-run"
	if opts.local:
		cmd += " --local"
	if opts.cktppa:
		cmd += " --ckt-ppa"
	if os.system(cmd + " Ubuntu-" + version):
		sys.exit(1)

	#----------------------------------------------------------------------
	# Remove the old ABI files (as the changelog is not modified, yet,
	# this should be the version number before. Then add the new abi
	# directory to be committed.
	#----------------------------------------------------------------------
	print "II: Removing old ABI files and adding the new ones"
	old_abi_dir = os.path.join(
		debian_dir,
		"abi",
		GetPackageInfo(prev=True)[1]
	)
	if not opts.dryrun:
		os.system("git rm --quiet -rf " + old_abi_dir)
		os.system("rm -rf " + old_abi_dir)
		os.system("git add " + os.path.join(debian_dir, "abi", version))

#------------------------------------------------------------------------------
# Next step is to create a new changelog with the new header first and the
# remainder appended from the old one.
#------------------------------------------------------------------------------
try:
	out = open(changelog + ".new", "w")
except:
	print "EE: Failed to open new changelog for writing!"
	sys.exit(1)

newversion = kversion + "-" + kabi + "." + str(int(krel)+1)

#------------------------------------------------------------------------------
# This looks a bit vile, but basically is just the contents of the new
# header to be created.
#------------------------------------------------------------------------------
msg  = srcpkg + " (" + newversion + ") UNRELEASED; " + flags + "\n\n"
msg += "  CHANGELOG: Do not edit directly. Autogenerated at release.\n"
msg += "  CHANGELOG: Use the printchanges target to see the curent changes.\n"
msg += "  CHANGELOG: Use the insertchanges target to create the final log.\n\n"
msg += " -- " + os.getenv("DEBFULLNAME", "Kernel Team")
msg += " <" + os.getenv("DEBEMAIL", "kernel-team@lists.ubuntu.com") + ">"
msg += "  " + GetDateTime() + "\n"

out.write(msg)

#------------------------------------------------------------------------------
# Copy over the contents of the current changelog.
#------------------------------------------------------------------------------
try:
	for line in open(changelog, "r").readlines():
		out.write(line)
except:
	print "EE: Failed to copy contents of current changelog!"
	out.close()
	os.unlink(changelog + ".new")
	sys.exit(1)

out.close()
if opts.dryrun:
	os.system("head " + changelog + ".new")
	os.unlink(changelog + ".new")
else:
	os.rename(changelog + ".new", changelog)

#------------------------------------------------------------------------------
# Finally add the changelog and commit everything.
#------------------------------------------------------------------------------
print "II: Committing new version", newversion
if not opts.dryrun:
	os.system("git add " + changelog)
	msg = "UBUNTU: Start new release\n\nIgnore: yes\n"
	os.system("git commit -q -s -m \"" + msg + "\"")

