#!/usr/bin/env python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
"""check whether patch touches deviations
"""
from os                 import path
from subprocess         import Popen, PIPE
from optparse           import OptionParser

Deviations = dict()
DeviationFiles = dict()

#------------------------------------------------------------------------------
def GitCatFile(file, sha1=None):
    """Return the contents of a certain file in git as an array.

    Keyword arguments:
    file -- The name (including path) of the file to return.
    sha1 -- Optionally specify a certain revision/branch to look at (HEAD).

    """
    lines = []

    if sha1:
        cmd = "git show {0}:{1}".format(sha1, file)
    else:
        cmd = "git show HEAD:{0}".format(file)

    p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
    for line in p.stdout:
        if line.startswith("tree ") or line == "\n":
            continue
        lines.append(line)
    p.stdout.close()
    p.stderr.close()

    return lines

#------------------------------------------------------------------------------
def GetDebianDir(sha1=None):
    """Get the directory where the debian config files are located.

    Usually this is "./debian", but for abstracted debian it might be an
    alternate directory.

    Keyword arguments:
    sha1 -- Optionally select a specific commit or branch (HEAD).

    """
    debian = None
    #----------------------------------------------------------------------
    # First try the contents of 'debian/debian.env'
    #----------------------------------------------------------------------
    for line in GitCatFile(path.join("debian", "debian.env"), sha1=sha1):
        if "DEBIAN=" in line:
            return line.split("=", 1)[1].strip()

    #----------------------------------------------------------------------
    # Older versions had a declaration in 'debian/rules'
    #----------------------------------------------------------------------
    for line in GitCatFile(path.join("debian", "rules"), sha1=sha1):
        if "DEBIAN=" in line:
            return line.split("=", 1)[1].strip()

    #----------------------------------------------------------------------
    # Oh, well. So it must be 'debian'.
    #----------------------------------------------------------------------
    return "debian"

#------------------------------------------------------------------------------
def GetFilesFromPattern(pattern):
    """Return a list of file names matching the pattern.

    Keyword arguments:
    pattern -- File matching pattern passed to the find command.

    """
    filelist = []

    if not pattern.startswith("./"):
        pattern = "./" + pattern

    cmd = "find . -path '" + pattern + "'"
    for line in Popen(cmd, shell=True, stdout=PIPE).stdout:
        if line.startswith("./"):
            line = line[2:-1]
        filelist.append(line)

    return filelist

#------------------------------------------------------------------------------
def ParseDeviations(filename):
    """Parses the given file and sets up the deviation database.

    Keyword arguments:
    filename -- Pathname of the file to be parsed.

    """
    try:
        fp = open(filename, "r")
    except:
        #
        # It's valid to have no deviations.
        #
        print "WW: No deviations file", filename
        return

    if opts.verbose:
        print "II: Evaluating", filename
    for line in fp.readlines():
        if opts.show:
            print line.rstrip()
        if line != "\n":
            if line[1] == ":" and lastline[1] != ":":
                title = lastline
                Deviations[title] = dict()
            
        if line.startswith("F:"):
            pattern = line.split()[1].rstrip()
            if Deviations[title].has_key("patterns"):
                Deviations[title]["patterns"].append(pattern)
            else:
                Deviations[title]["patterns"] = [ pattern ]

            for filename in GetFilesFromPattern(pattern):
                DeviationFiles[filename] = title
        lastline = line.rstrip()
            
#------------------------------------------------------------------------------
def ParsePatch(patchfile):
    """Check a patch file for touching deviated files.

    This functiion parses a patch file, looking for the files being modified.
    For those files, check whether those are listed as deviations. The number
    of deviated files that are touched is returned to the caller.

    Filenames in the patch are stripped by the globally defined number of
    levels.

    Keyword arguments:
    patchfile -- Path to the file that contains the patch.

    """
    hits = 0

    try:
        fp = open(patchfile, "r")
    except:
        raise

    for line in fp.readlines():
        if line.startswith("+++ "):
            filename = line.rstrip()[4:]
            n = opts.striplevel
            while n > 0:
                try:
                    filename = filename[filename.index("/") + 1:]
                except:
                    pass
                n -= 1
            if filename in DeviationFiles:
                if opts.verbose:
                    if not hits:
                        print "II: File:", patchfile
                    print "II: *", filename, "->", DeviationFiles[filename]
                hits += 1

    fp.close()

    return hits

#------------------------------------------------------------------------------
# Setup the parser and parse the command line arguments.
#------------------------------------------------------------------------------
parser = OptionParser(
    "%prog [<options>] <patch file> [<path file> ...]",
    description="Check one or more patch file for touching parts of the "
                "tree that have been taken from other sources or versions "
                "of the kernel."
)
parser.add_option(
    "-l", action="store_true", dest="show", default=False,
    help="show the deviation file contents"
)
parser.add_option(
    "-p", action="store", dest="striplevel", type="int", default=1,
    help="sets the number of directories to strip from a filename in a patch"
)
parser.add_option(
    "-v", "--verbose", action="store_true", default=False,
    help="run in verbose (more output) mode"
)
(opts, args) = parser.parse_args()

if len(args) == 0:
    opts.show = True

#
# Not that this should really matter as deviations are only targeted to
# newer releases and those should have debian.master.
# So for topic branches, make a first run to collect deviations from the
# master.
#
DebianDir = GetDebianDir()
if DebianDir != "debian" and DebianDir != "debian.master":
    ParseDeviations(path.join("debian.master", "deviations.txt"))

if __name__ == "__main__":
    ParseDeviations(path.join(DebianDir, "deviations.txt"))

    hits = 0
    for patchfile in args:
        hits += ParsePatch(patchfile)

    if hits:
        print "WW:", hits, "deviated file(s) modified by the patch(es)."

    exit(hits)

# vi:set ts=4 sw=4 expandtab:
