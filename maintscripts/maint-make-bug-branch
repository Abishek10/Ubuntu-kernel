#!/usr/bin/python

import sys, os
from subprocess import *
from getopt import *

def GetDebian():
	cmd = "debian/rules printdebian"
	null = open("/dev/null", "w")
	debdir = "debian"
	pipe = Popen(cmd, shell=True, stdout=PIPE, stderr=null).stdout
	for line in pipe:
		debdir = line.strip()
	pipe.close()
	null.close()

	return debdir

def GetPkgInfo(changelog):
	info = {}

	try:
		pkgfile = open(changelog, "r")
	except:
		print "No {0}?".format(changelog)
		sys.exit(1)
	else:
		pass

	line = pkgfile.readline()

	info['name']    = line.split(" ")[0]
	info['version'] = line.split(" ")[1][1:-1]
	info['pocket']  = line.split(" ")[2][:-1]
	info['prio']    = line.split(" ")[3].split("=")[1]

	if info['pocket'] == "UNRELEASED":
		line = pkgfile.readline()
		while line.split(" ")[0] != info['name']:
			line = pkgfile.readline()
		info['pocket']  = line.split(" ")[2][:-1]
	pkgfile.close()

	return info

def ReadTags():
	tags = []
	pipe = Popen("git tag -l", shell=True, bufsize=1, stdout=PIPE).stdout
	for line in pipe:
		tags.append(line.strip())
	pipe.close()
	return tags

def ReadBranches():
	list = []
	pipe = Popen("git branch", shell=True, stdout=PIPE).stdout
	for line in pipe:
		newtag = line.strip()
		if newtag[0] == "*":
			newtag = newtag[1:].strip()
		list.append(newtag)
	pipe.close()
	return list

def GetLsbRelease():
	pipe = Popen("lsb_release -cs", shell=True, stdout=PIPE).stdout
	name = pipe.readline().strip()
	pipe.close()
	return name

def PkgGetLatest(name, pocket="updates"):
	release = GetLsbRelease()
	version = ""
	cmd = "rmadison --arch=source " + name
	pipe = Popen(cmd, shell=True, stdout=PIPE).stdout
	for line in pipe:
		ver = line.split("|")[1].strip()
		ser = line.split("|")[2].strip()
		if ser == release:
			base = ver
		elif ser == release + "-" + pocket:
			version = ver
	pipe.close()
	if version == "":
		version = base
	return version

#------------------------------------------------------------------------------
# Evalulate the command line arguments
#------------------------------------------------------------------------------
pocket = "updates"
longopts = [ "pocket=" ]
shortopts = "p:"
options, sys.argv = gnu_getopt(sys.argv, shortopts, longopts)
for opt, val in options:
	if opt in [ "-p", "--pocket" ]:
		if val in [ "updates", "security", "proposed" ]:
			pocket = val
		else:
			print "EE: %s is not a valid pocket" % val
			sys.exit(1)
	else:
		print "WW: %s is unimplemented"

if len(sys.argv) < 2:
	print "Usage: %s [--pocket=<pocket>] <bug#>" % \
		os.path.basename(sys.argv[0])
	sys.exit(1)

try:
	bugno = int(sys.argv[1])
except:
	print "EE: Since when is %s a number???" % sys.argv[1]
	sys.exit(1)
else:
	pass

#------------------------------------------------------------------------------
# By default the new branch is name "lp<bugnumber>". Check that this branch
# does not yet exist. Otherwise we stop here to prevent accidental damage.
#------------------------------------------------------------------------------
branchname = "lp" + str(bugno)
if branchname in ReadBranches():
	print "A branch %s already exists" % branchname
	sys.exit(1)

#------------------------------------------------------------------------------
# The main changelog might be in a abstracted directory. Parse it to get the
# information needed for some checking.
#------------------------------------------------------------------------------
changelog = GetDebian() + "/changelog"
pkginfo = GetPkgInfo(changelog)

#------------------------------------------------------------------------------
# Make sure that the script is run in a chroot (or system) matching the series
# of the package. The build environment often changes a lot and older packages
# might not work.
#------------------------------------------------------------------------------
if GetLsbRelease() != pkginfo['pocket'].split("-")[0]:
	print "The installed system is %s but the package is for %s" % \
		(GetLsbRelease(), pkginfo['pocket'].split("-")[0])
	print "EE: Cannot find the latest upload that way"
	sys.exit(1)

#------------------------------------------------------------------------------
# The test package should be based on a version that is in an uploaded
# pocket (by default in updates). This helps to ensure the related packages
# are available (if there is no ABI change).
#------------------------------------------------------------------------------
print "Looking for version to base on..."
basever = "Ubuntu-" + PkgGetLatest(pkginfo['name'], pocket)

#------------------------------------------------------------------------------
# Now create the new branch and create a working tree.
#------------------------------------------------------------------------------
print "Creating a branch named {0} based on {1}".format(branchname, basever)
os.system("git checkout -b " + branchname + " " + basever)

#------------------------------------------------------------------------------
# Finally the changelog get automatically modified to add the bugnumber
# to the version (<version>+lp<bugnumber>v1).
#------------------------------------------------------------------------------
pkginfo = GetPkgInfo(changelog)
newpkgversion = "({0}+{1}v1)".format(pkginfo['version'], branchname)
print "Changing version to {0}".format(newpkgversion)
os.system("sed -i '1s/(.*)/{0}/' {1}".format(newpkgversion, changelog))
os.system("git add {0}; git commit -s -m 'Startbugrelease'".format(changelog))

print "Done"

