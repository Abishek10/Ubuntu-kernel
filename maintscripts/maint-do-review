#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
# Depends: gnome-terminal, env(EDITOR)/gvim, git-compare(meld)
#==============================================================================
import os, sys, optparse
#from getopt import *
from subprocess import *
from ktl.shell                          import sh, ShellError

editor_cmd = os.getenv("EDITOR", default="gvim")
review_cmd = "git-compare"

#------------------------------------------------------------------------------
# Setup the command line parser and run it.
#------------------------------------------------------------------------------
parser = optparse.OptionParser("Usage: %prog [options] <file> <git-range>")
dsc  = "Takes all commits in the given <range> and puts them into the given "
dsc += "<file>. If <file> exists from a previous run, new commits will be "
dsc += "appended to the end while comments that were made on the existing "
dsc += "will be preserved. The new file is opened with " + editor_cmd + " and "
dsc += "the next commit that has not been reviewed will be offered to be "
dsc += "opened with " + review_cmd + "."
parser.set_description(dsc)
parser.add_option("--alt-path", action="store", dest="apath",
		  help="Set the path of a alternate repo which contains " +
			"patches already reviewed and may be occuring in " +
			"this review.")
parser.add_option("--alt-range", action="store", dest="arange",
		  help="Set the range to be looked at in the alternate repo.")
parser.add_option("--alt-comment", action="store", dest="acomment",
		  help="Use this comment for commits in the alternate repo " +
			"and are NEW in this review.")
(opt, args) = parser.parse_args()

#------------------------------------------------------------------------------
# When being called with less arguments than required, print the help.
#------------------------------------------------------------------------------
if len(args) < 2:
	parser.print_help()
	sys.exit(1)

#------------------------------------------------------------------------------
# Alternate path, range and comment must be used together.
#------------------------------------------------------------------------------
if opt.apath != None or opt.arange != None or opt.acomment != None:
	if opt.apath == None or opt.arange == None or opt.acomment == None:
		print "EE: Alternate path, range and comment must be used " \
		      "together!"
		sys.exit(1)

	#----------------------------------------------------------------------
	# Make sure the alternate comment has a single newline at the end.
	#----------------------------------------------------------------------
	opt.acomment = opt.acomment.rstrip() + "\n"

#------------------------------------------------------------------------------
# A simple class to use in lists that contain patches.
#------------------------------------------------------------------------------
class Patch:
	sha = ""
	Author = ""
	Subject = ""
	Comment = ""

#------------------------------------------------------------------------------
# Read the file created by a previous run and populate a list of patches
# from that.
#------------------------------------------------------------------------------
def ParseLog(input):
	patches = []
	p = Patch()
	for line in input:
		if line[0:7] == "commit ":
			if p.sha != "":
				patches.append(p)
				p = Patch()
			p.sha = line.split(" ")[1].strip()
			continue
		if line[0:8] == "Author: ":
			p.Author = line[8:].strip()
			continue
		if p.Subject == "":
			if line[0:4] == "    " and len(line) > 4:
				p.Subject = line[4:].strip()	
			continue
		if line.strip() != "":
			p.Comment += line
	if p.sha != "":
		patches.append(p)

	return patches

#------------------------------------------------------------------------------
# Return a list of patches from a range in git.
#------------------------------------------------------------------------------
def ParseGitLog(range):
	cmd = "git log --reverse --pretty=short " + range

	pipe = Popen(cmd, shell=True, bufsize=1, stdout=PIPE).stdout
	patches = ParseLog(pipe)
	pipe.close()

	return patches

#------------------------------------------------------------------------------
# Helper to print the current progress.
#------------------------------------------------------------------------------
def Progress(cur, tot):
	s = "{0} of {1} done ({2}%)".format(cur, tot, cur*100/tot)

	return s

#------------------------------------------------------------------------------
# Try reading the current content of the review file
#------------------------------------------------------------------------------
ReviewList = []
ReviewFile = args[0]
try:
	file = open(ReviewFile, "r")
except:
	pass
else:
	sys.stderr.write("II: Evaluating current review file...\n")
	ReviewList = ParseLog(file)
	file.close()

sys.stderr.write("II: Evaluating git log...\n")
GitList = ParseGitLog(args[1])

#------------------------------------------------------------------------------
# Go through all patches exported from git and try to find the same subject in
# the list extracted from the review file. If one is found, then remove it
# from the review list and copy the comment over into the git list.
# Otherwise its a new one and it gets marked as such.
#------------------------------------------------------------------------------
NumberNew   = 0
NumberDone  = 0
NewComment  = "# Type: NEW\n"
for p1 in GitList:
	found = 0
	for p2 in ReviewList:
		if p1.Subject == p2.Subject:
			if p2.Comment != "" and p2.Comment != NewComment:
				NumberDone += 1
			p1.Comment = p2.Comment
			ReviewList.remove(p2)
			found = 1
			break
	if found == 0:
		NumberNew += 1
		p1.Comment = NewComment

#------------------------------------------------------------------------------
# Any patches which still are in the review list must have been dropped since
# the last time the patchset has been imported.
#------------------------------------------------------------------------------
for p1 in ReviewList:
	DropComment = "# Was dropped since the last review\n"
	if p1.Comment != "":
		NumberDone +=1
	if not DropComment in p1.Comment:
		p1.Comment += DropComment
	GitList.append(p1)

#------------------------------------------------------------------------------
# If an alternate repo path, range and comment was given, take that list and
# replace the comment of NEW patches with that text.
#------------------------------------------------------------------------------
if opt.apath != None:
	try:
		owd = os.getcwd()
		os.chdir(opt.apath)
	except:
		print "EE: Failed to change into alternate path!"
		print "EE: " + owd + " --> " + opt.apath
		sys.exit(1)

	for p1 in GitList:
		found = 0
		for p2 in ParseGitLog(opt.arange):
			if p1.Subject == p2.Subject:
				if p1.Comment == NewComment:
					p1.Comment = opt.acomment
					found = 1
					break

	os.chdir(owd)

NumberTotal = len(GitList)

print "{0} new, {1} dropped".format(NumberNew, len(ReviewList))
print

#------------------------------------------------------------------------------
# When the file given as review file exists, then make a backup of that before
# proceeding.
#------------------------------------------------------------------------------
try:
	file = open(ReviewFile, "r")
except:
	pass
else:
	file.close()
	BackupFile = ReviewFile + ".bak"
	print "II: {0} ==> {1}".format(ReviewFile, BackupFile)
	try:
		os.rename(ReviewFile, BackupFile)
	except:
		sys.stderr.write("EE: Could not create backup\n")
		sys.exit(1)
	else:
		pass

#------------------------------------------------------------------------------
# Backup succeeded, now create the review file fresh from the collected data.
#------------------------------------------------------------------------------
try:
	file = open(ReviewFile, "w")
except:
	sys.stderr.write("EE: Cannot create review file!\n")
	sys.exit(1)
else:
	for p1 in GitList:
		file.write("commit " + p1.sha + "\n")
		file.write("Author: " + p1.Author + "\n\n")
		file.write("    " + p1.Subject + "\n\n")
		if p1.Comment != "":
			file.write(p1.Comment + "\n")
	file.close()
	(rc, output) = sh("gnome-terminal -e '" + editor_cmd + " " + ReviewFile
		       + "'")

#------------------------------------------------------------------------------
# Now go through all the new and uncommented entries and call <review-cmd> for
# them.
#------------------------------------------------------------------------------
for p1 in GitList:
	if p1.Comment == "" or p1.Comment == NewComment:
		print Progress(NumberDone, NumberTotal)
		print "About to show: " + p1.Subject[:60]
		print "(C)ontinue, (q)uit? ",
		line = sys.stdin.readline()
		print "\b"
		if line[0] == "q":
			break
		(rc, output) = sh(review_cmd + " " + p1.sha)
		NumberDone += 1
print "done"

