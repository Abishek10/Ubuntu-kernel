#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os, optparse
from subprocess import *

#------------------------------------------------------------------------------
# Libraries shared by all kteam-tools will be found here (../lib)
#------------------------------------------------------------------------------
common_lib = os.path.dirname(os.path.abspath(sys.argv[0]))
common_lib = os.path.dirname(common_lib)
common_lib = os.path.join(common_lib, "lib")
sys.path.insert(0, common_lib)

from buildenv_lib import *

#------------------------------------------------------------------------------
# This is the list of email addresses that the special target email address
# "kernel-announce" will expand to.
#------------------------------------------------------------------------------
announce_targets = [
	"ubuntu-installer@lists.ubuntu.com",
	"kernel-team@lists.ubuntu.com"
]

#------------------------------------------------------------------------------
# Setup the command line parser and run it.
#------------------------------------------------------------------------------
parser = optparse.OptionParser("Usage: %prog [options] <series> <package>")
dsc    = "Sends out an email about uploading a new kernel"
parser.set_description(dsc)
parser.add_option("-b", "--bump", action="store_true", dest="bumper",
		  default=False, help="force an ABI bumper mail")
parser.add_option("--dry-run", action="store_true", dest="dryrun",
		  default=False, help="print the mail message, don't send it")
parser.add_option("--mailer", action="store", default="msmtp",
		  help="run this command to send emails (default: %default)")
parser.add_option("--pocket", action="store", default="proposed",
		  help="name of the pocket into which the package was " +
		       "uploaded (default: %default)")
parser.add_option("--to", action="append", dest="sendto",
		  help="add a mail address to the recipient list. " + 
		       "'kernel-announce' is a special target which will " +
		       "expand into " + str(announce_targets) + ". if no " +
		       "--to option is present, the program will try to " +
		       "get it from the environment variable KERNEL_ANNOUNCE" +
			" which should contain a comma separated list.")
epilog = "Example: %s " % (parser.get_prog_name())
epilog += "--pocket=proposed --to=kernel-announce natty linux"
parser.epilog = epilog

(opt, args) = parser.parse_args()

#------------------------------------------------------------------------------
# The series and package are required postitional arguments
#------------------------------------------------------------------------------
if len(args) < 2:
	parser.print_help()
	sys.exit(1)
series = args[0]
package = args[1]

#------------------------------------------------------------------------------
# Were email target addresses given. If not, try to get some from the
# environment.
#------------------------------------------------------------------------------
if opt.sendto == None:
	try:
		opt.sendto = os.getenv("KERNEL_ANNOUNCE").split(",")
	except:
		pass
if opt.sendto == None:
	print "EE: No target addresses given to send mail"
	sys.exit(1)

#------------------------------------------------------------------------------
# Expand the "kernel-announce" special
#------------------------------------------------------------------------------
for addr in opt.sendto:
	if addr == "kernel-announce":
		opt.sendto.remove(addr)
		opt.sendto.extend(announce_targets)

#------------------------------------------------------------------------------
# Before processing further, check whether DEBEMAIL has been set (assuming
# that is the email address to be used as the sender).
#------------------------------------------------------------------------------
sender = os.getenv("DEBEMAIL")
if sender == "":
	print "EE: The senders email address needs to be defined in " \
	      + "DEBEMAIL"
	sys.exit(1)
fullname = os.getenv("DEBFULLNAME")
if fullname != "":
	sender = fullname + " <" + sender + ">"
	signer = fullname.split()[0]
else:
	signer = "The Ubuntu Kernel Team"

#------------------------------------------------------------------------------
# First get the version which is currently in the target pocket. If there is
# no upload of the package there, exit with an error.
#------------------------------------------------------------------------------
target_version = GetUploadVersion(series, package, pocket=opt.pocket)
if target_version == None:
	print "EE: No upload of " + package + " is currently available in" + \
              " the " + opt.pocket + " pocket."
	sys.exit(1)

#------------------------------------------------------------------------------
# The get the version of the package which is current (either in updates or
# in the release pocket).
#------------------------------------------------------------------------------
updates_version = GetUploadVersion(series, package)
if updates_version == None:
	updates_version = GetUploadVersion(series, package, pocket="release")

#------------------------------------------------------------------------------
# Extract the ABI numbers (see wheter we got an ABI bump).
#------------------------------------------------------------------------------
if updates_version:
	updates_abi = updates_version.split("-")[1].split(".")[0]
	target_abi = target_version.split("-")[1].split(".")[0]
	if updates_abi != target_abi:
		opt.bumper = True

#------------------------------------------------------------------------------
# Now we stich together the mail message.
#------------------------------------------------------------------------------
msg = "From: " + sender + "\n"
for addr in opt.sendto:
	msg += "To: " + addr + "\n"

msg += "Subject: [" + series + "] " + package + " " + target_version + \
       " uploaded"

if opt.bumper:
	msg += " (ABI bump)"

msg += "\n\nA new " + series + " kernel has been uploaded into " + \
       opt.pocket + ". "

if opt.bumper:
	msg += "Note the ABI bump. "

msg += "\nThe full changelog about all bug fixes contained in this upload can "
msg += "be found at:\n\n"
msg += "https://launchpad.net/ubuntu/" + series + "/+source/" + package + "/"
msg += target_version + "\n\n"
msg += "-" + signer

if opt.dryrun:
	print msg
else:
	try:
		p = Popen([opt.mailer] + opt.sendto, stdin=PIPE)
	except:
		print "EE: " + opt.mailer + " could not be executed."
		sys.exit(1)
	else:
		p.stdin.write(msg)
		p.stdin.close()
		p.wait()
