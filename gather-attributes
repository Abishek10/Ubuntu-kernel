#!/usr/bin/env python
#
# This application takes a list json file as input. That json file
# contains a 'dictionary' of key value pairs where the key is a
# LauncPad bug id and the value is the source package of interest.
#

from sys                                import argv
from os                                 import environ, path
import platform
import re
from  subprocess                        import Popen, PIPE
from datetime                           import datetime
from argparse                           import ArgumentParser

from lib.dbg                            import Dbg
from lib.utils                          import dump, stdo, date_to_string

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# Gather
#
class Gather():
    """
    This class/script examines all 'open' bugs. If a given bug was filed against a
    version of Ubuntu that is no longer supported, change the status of that bug
    to "Won't Fix" and add a comment explaining why it was marked as such.
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("Gather.__init__")

        self.cfg    = cfg

        Dbg.leave("Gather.__init__")

    def kernel_version(self):
        m = re.match('^(\d+\.\d+\.\d+-\d+)-.*$', platform.release())
        version = m.group(1)

        m = re.match('^#(\d+.*)-Ubuntu .*$', platform.version())
        upload = m.group(1)

        retval = "%s.%s" % (version, upload)
        return retval

    def distro_release(self):
        p = Popen(['lsb_release', '-sir'], stdout=PIPE, stderr=PIPE, close_fds=True)
        retval = p.communicate()[0].strip().replace('\n', ' ')
        return retval

    def kind_of_hardware(self):
        retval = 'real'
        with open('/proc/cpuinfo', 'r') as f:
            line = f.readline()
            while line:
                if 'model name' in line:
                    if 'QEMU Virtual CPU' in line:
                        retval = 'virtual'
                    break
                line = f.readline()
        return retval

    def virt_host_kernel_version(self, vhost):
        retval = ''
        p = Popen(['ssh', vhost, 'uname', '-vr'], stdout=PIPE, stderr=PIPE, close_fds=True)
        results = p.communicate()[0].strip().replace('\n', ' ')
        if results is not None:
            m = re.search('(\d+.\d+.\d+-\d+-).* #(\d+)-Ubuntu.*', results)
            if m:
                retval = '%s%s' % (m.group(1), m.group(2))
        return retval

    # main
    #
    def main(self):
        Dbg.enter("Gather.main")

        data = {}
        try:
            # Timestamp
            #
            data['timestamp'] = date_to_string(datetime.utcnow())

            # Version
            #
            clpath = path.join(path.dirname(argv[0]), "debian/changelog")
            with open(clpath, 'r') as f:
                fl = f.readline()

            data['version'] = fl[fl.find("(")+1:fl.find(")")]

            # Gather the environment variables.
            #
            data['environ'] = {}
            for e in environ:
                data['environ'][e] = environ[e]

            # Gather platform data.
            #
            data['platform'] = {}
            data['platform']['arch'] = {}
            (data['platform']['arch']['bits'], data['platform']['arch']['linkage']) = platform.architecture()

            data['platform']['libc'] = {}
            (data['platform']['libc']['lib'], data['platform']['libc']['version']) = platform.libc_ver()


            data['platform']['machine']  = platform.machine()
            data['platform']['proc']     = platform.processor()
            data['platform']['hostname'] = platform.node()

            data['platform']['hardware'] = self.kind_of_hardware()
            if data['platform']['hardware'] == 'virtual':
                if self.cfg.vh_name != '':
                    data['virt host'] = {
                        'kernel version' : self.virt_host_kernel_version(self.cfg.vh_name),
                        'name' : self.cfg.vh_name,
                    }

            data['kernel'] = self.kernel_version()
            data['distro-release'] = self.distro_release()

            dump(data)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("Gather.main")
        return


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]

    parser = ArgumentParser()

    parser.add_argument('--vh-name',      required=False, default='', help='If the SUT is a virtual client, a virtual host is needed. This is the name of that virtual host.')

    args = parser.parse_args()
    app = Gather(args)
    app.main()

# vi:set ts=4 sw=4 expandtab:

