#!/usr/bin/python

import subprocess
import os
import time
import re

tree_base = "/srv/kernel.ubuntu.com/git/ubuntu"


def get_branches(series):
	branches = list()
	if series == 'hardy':
		branches.append('master-next')
		return branches

	p = subprocess.Popen(["git", "branch"], cwd="%s/ubuntu-%s.git" % \
		(tree_base, series), stdout=subprocess.PIPE)
	for line in p.communicate()[0].splitlines():
		bits = line.split(' ')
		if len(bits) == 2:
			branch = bits[1]
		else:
			branch = line
                branch = branch.strip()
                # master-next is the key branch, so ignore master.
                if branch != 'master':
                        branches.append(branch)

	return branches


def tag_to_abi_range(tag):
	m = re.search('-2\.6\.\d+-(\d+)\.\d+', tag)
	if not m:
		return None

	abi = int(m.group(1))
	abi = abi - (abi % 100)
	
	return abi


def get_branch_abi_range(series, branch):
	p = subprocess.Popen(["git", "cat-file", "-p",
		"%s:debian/debian.env" % (branch)],
		cwd="%s/ubuntu-%s.git" % (tree_base, series),
		stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	denv = p.communicate()[0]
	if p.returncode != 0:
		directory = "debian"
	else:
		m = re.search("^DEBIAN=([^\s]+)", denv)
		if m:
			directory = m.group(1)
		else:
			directory = "debian.%s" % (branch)
		
	p = subprocess.Popen(["git", "cat-file", "-p",
		"%s:%s/changelog" % (branch, directory)],
		cwd="%s/ubuntu-%s.git" % (tree_base, series),
		stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	changelog = p.communicate()[0]

	m = re.search("^[^\s]+\s+\(2\.6\.\d+-(\d+)\.\d+", changelog)
	if not m:
		return None

	abi = int(m.group(1))
	abi = abi - (abi % 100)

	return abi


def get_tags_list(series, branch, abi):
	versions = dict()
	p = subprocess.Popen(["git", "tag", "-l"], cwd="%s/ubuntu-%s.git" % \
		(tree_base, series), stdout=subprocess.PIPE)
	for tag in p.communicate()[0].splitlines():
		nabi = tag_to_abi_range(tag)
		if nabi == None or nabi != abi:
			continue

                if tag.startswith('Ubuntu-lts-') or \
		   (not tag.startswith('Ubuntu-') and \
		   not tag.startswith('Linaro-2')):
                        continue

		m = re.search('.*-(2\.6\.\d+-.*)', tag)
		if m:
			version = m.group(1)
		else:
			version = tag
	
		versions[version] = tag

	return versions


def get_tag_version(series, tag):
	p = subprocess.Popen(["git", "cat-file", "-p",
		"%s:Makefile" % (tag)],
		cwd="%s/ubuntu-%s.git" % (tree_base, series),
		stdout=subprocess.PIPE)

	version = None
	patchlevel = None
	sublevel = None
	extraversion = None
	for line in p.communicate()[0].splitlines():
            if line.startswith('VERSION'):
                version = line[line.index('=') + 1:].strip()
            if line.startswith('PATCHLEVEL'):
                patchlevel = line[line.index('=') + 1:].strip()
            if line.startswith('SUBLEVEL'):
                sublevel = line[line.index('=') + 1:].strip()
            if line.startswith('EXTRAVERSION'):
                extraversion = line[line.index('=') + 1:].strip()

	overall = '%s.%s.%s' % (version, patchlevel, sublevel)
	if extraversion:
		overall += extraversion

	return overall

def get_pocket():
	pockets = dict()
	p = subprocess.Popen(["rmadison", "--architecture=source", "linux"],
		stdout=subprocess.PIPE)
	for line in p.communicate()[0].splitlines():
		items = line.split("|")
		version = items[1].strip()
		pocket = items[2].strip()
		pockets[version] = pocket

	return pockets

print "<html>"
print "<h1>Ubuntu to Mainline kernel version mapping</h1>"

print "Ubuntu kernel to Mainline kernel version mappings as generated at "
print time.strftime("%H:%M UTC", time.gmtime())

#version_pocket = get_pocket()
version_pocket = {}

for series in [
	  'oneiric', 'natty', 'maverick', 'lucid', 'karmic', 'jaunty', 'hardy'
	]:
	series_name = series.capitalize()
	
	if not os.path.isdir("%s/ubuntu-%s.git" % (tree_base, series)):
		continue

	abi_branch = [ (get_branch_abi_range(series, branch), branch) \
		for branch in get_branches(series) ]
	abi_branch.sort()
        for (abi, branch) in abi_branch:
	    abi = get_branch_abi_range(series, branch)
	    if abi == None:
		continue
	    if branch.startswith('lts-backport-'):
		continue

	    version_map = dict()
	    tags = get_tags_list(series, branch, abi)
	    for version in tags:
		    version_map[version] = get_tag_version(series, tags[version])
		    if version not in version_pocket.keys():
			    version_pocket[version] = "&nbsp;"

	    # Sort the list by ABI hundreds, kernel minor, ABI tens, upload #
	    deco = [ (v.split('-')[1].split('.')[0].zfill(4)[0:2] + "." +
		      v.split('-')[0] + "." +
		      v.split('-')[1].split('.')[0].zfill(4)[2:4] + "." +
		      v.split('.')[-1].zfill(4), v)
			    for v in tags.keys() ]
	    #print deco
	    deco.sort(reverse = True)
	    version_order = [ v for _, v in deco ]

	    print "<h2>%s (%s -%d)</h2>" % (series_name, branch, abi)
	    print "<table border=1>"
	    print "<tr><th>Ubuntu Kernel Version"
	    print "<th>Mainline Kernel Version"
	    #print "<th>Ubuntu Kernel Pocket"

	    tip = get_tag_version(series, branch)
	    print "<tr><td>%s<td>%s" % ('<b>TIP</b>', tip)

	    for version in version_order:
		    #print "<tr><td>%s<td>%s<td>%s" % (version, version_map[version], version_pocket[version])
		    print "<tr><td>%s<td>%s" % (version, version_map[version])

	    print "</table>"

print "</html>"
