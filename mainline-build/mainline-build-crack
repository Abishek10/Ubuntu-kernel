#! /bin/bash

P="build-mainline-crack"

if [ "$#" -ne 3 ]; then
	echo "Usage: $P <commit> <series> <abinum>" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

commit="$1"
series="$2"
abinum="$3"

build_release="hardy"

echo "*** BUILDING CRACK: commit:$1 series:$2 ..."

log_enabled=0

long=`git describe "$commit"`
if [ "$?" -ne 0 ]; then
	echo "$P: $commit: invalid commit" 1>&2
	exit 1
fi
case "$long" in
v*-*[0-9]-g*)
	full_version="${long#v}"
	full_version="${full_version%-*}"
	full_version="${full_version%-*}"
	;;
v*)
	full_version="${long#v}"
	;;
*)
	echo "$P: $commit: mapped to '$long' unable to process" 1>&2
	exit 1
esac

# Crack of the day is always ABI -999 or similar.
upload=".`date +%Y%m%d%H%M`"

# Produce CHANGES fragment.
if [ "$log_enabled" -eq 1 ]; then
	log_from=`git describe "$commit^"`
	if [ "$?" -eq 0 ]; then
		log_from="${log_from%-*}"
		log_from="${log_from%-*}"

		git shortlog "$log_from..$commit" >"../CHANGES"
	fi
fi

# Encode the real version number as the ABI.  We encode the version
# number by expanding the numbers to be at least 2 digits and removing the
# '.' and '-' characters, for example:
#
#  2.6.27.12	02062712
#  2.6.29-rc3   020629rc3
#
abinum=`echo "$abinum" | awk -F'[.-]' '{
	for (i = 1; i <= NF; i++) {
		if ($i ~ /^[0-9][0-9]*$/) {
			printf("%02d", $i);
		} else {
			printf("%s", $i);
		}
	}
}'`

# The base version is always the first X.Y.Z part of the version number.  If we
# do not maintain this then the modules directory will not match uname -r.
version=`echo "$full_version" | sed -e 's/\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/'`

echo "full_version<$full_version>"
echo "version<$version>"
echo "long<$long>"
echo "abinum<$abinum>"

# NOTE: a - in the branch name seems to be causing issues.
branch="BUILD.$abinum"
branch=`echo "$branch" | sed -e 's/-/./g'`

# Ensure we get the uptodate machinary.
git fetch "$series"
git checkout -f "$series/master"
git branch -D "$branch"

rm -rf .dotest

#
# Checkout the source at the specified version.
#
git checkout -b "$branch" "$commit" -- || exit 1

# Report the head for posterity.
echo "vvv - build head"
git log -1 HEAD
echo "^^^ - build head"

#
# Pull in the packaging from the head of our tree.
#
git checkout "$series/master" -- debian
git checkout "$series/master" -- debian.master
git commit -a -m "base packaging"

#
# ALL: allow us to default new config options.
#
if [ -d "$here/patches.$series" ]; then
	echo "*** applying patches for series:$series ..."
	git am -C1 "$here/patches.$series"/*
fi

# XXX: common processing
. "$here/mainline-build-common"

#
# Rebuild the changelog.
#
for debian in "debian.master" "debian"
do
	[ -d "$debian" ] && break
done 
changelog="$debian/changelog"
rm -f "$changelog"
EDITOR=":" dch -v "${version}-$abinum$upload" --distribution "$series" \
	--package linux --create -c "$changelog" </dev/null
sed -e "s/\* .*/* Mainline build at commit: $long/" \
	<"$changelog" >"$changelog.new"
mv -f "$changelog.new" "$changelog"
git commit -a -m "debian changelog"

#
# Default any new configuration options.
#
if [ -f "$here/config.$series" ]; then
        cp "$here/config.$series" "$debian/config/OVERRIDES"
fi
BUILD_CONFIG_OVERRIDE="$here/config.$series"
dchroot --directory=`pwd` -c "$build_release" \
	"BUILD_CONFIG_OVERRIDE='$BUILD_CONFIG_OVERRIDE' fakeroot debian/rules clean defaultconfigs"
git commit -a -m "default configs"

#
# Disable the ABI, module, and aliases checks.
#
for i in debian/scripts/*-check debian.master/scripts/*-check
do
	if [ -f "$i" ]; then
		cat - <<EOM >"$i"
#!/bin/sh
exit 0
EOM
		chmod 755 "$i"
	fi
done

git commit -a -m "fix up build checks"

# Ensure the build directories are pristine.
git clean -x -f -d

#
# Build the source package.
#
#dpkg-buildpackage -S -sd -rfakeroot -I.git -I.gitignore -i'\.git.*'
#dpkg-buildpackage -b
dchroot --directory=`pwd` -c "$build_release" \
        "fakeroot debian/rules clean"
dchroot --directory=`pwd` -c "$build_release" \
        "fakeroot debian/rules do_tools=0 no_dumpfile=1 do_linux_source_content=true binary-indep"
dchroot --directory=`pwd` -c "$build_release" \
        "fakeroot debian/rules clean"
dchroot --directory=`pwd` -c "$build_release" \
        "fakeroot debian/rules do_tools=0 no_dumpfile=1 binary-generic"
linux32 dchroot --directory=`pwd` -c "$build_release-i386" \
        "fakeroot debian/rules clean"
linux32 dchroot --directory=`pwd` -c "$build_release-i386" \
        "fakeroot debian/rules do_tools=0 no_dumpfile=1 binary-generic"
