if [ "${DIST}" = "" ]; then
	export DIST="hardy"
fi
if [ "${UBUILDDIR}" = "" ]; then
	export CONFDIR="${HOME}/.ubuild"
else
	export CONFDIR="${UBUILDDIR}"
fi
if [ ! -d "${CONFDIR}" ]; then
	echo "Config directory (${CONFDIR}) not found!" >&2
	exit 1
fi
if [ -r "${CONFDIR}/config" ]; then
	. "${CONFDIR}/config"
fi
if [ "${AUTOBUILD}" = "" ]; then
	AUTOBUILD=false
fi
if [ "${VERBOSE}" = "" ]; then
	VERBOSE=false
fi
#export HOSTARCH CHROOTCMD CHROOTS FAKEROOT BASE ARCHS HOST

BUILDTARGET=kernel
while [ $# -gt 0 ]; do
	case $1 in
		-a|--auto)
			AUTOBUILD=true
			;;
		--lum)
			BUILDTARGET=lum
			;;
		-d|--dist)
			DIST="$2"
			shift
			;;
		-v|--verbose)
			VERBOSE=true
			;;
		*)
			break
			;;
	esac
	shift
done
export AUTOBUILD VERBOSE

if [ "$BUILD_DIST_PRINTED" = "" ]; then
	if ${AUTOBUILD}; then
		echo "Distribution: $DIST (autobuild)"
	else
		echo "Distribution: $DIST"
	fi
	export BUILD_DIST_PRINTED=1
fi

function QueryChroots()
{
	local HOST="$1"

	cat <<-EOD | ssh ${HOST}
	if [ "\`type -p schroot\`" != "" ]; then
		schroot -l 2>/dev/null | \
			sed -e 's/^.*: //' \
				-e 's/ *\[default\]//' \
				-e 's/, */ /g' | \
		tr '\n' ' ' 2>/dev/null
	fi
	if [ "\`type -p dchroot\`" != "" ]; then
		dchroot -l | sed -e 's/^.*: //' -e 's/ *\[default\]//' \
			-e 's/, */ /g' | tr '\n' ' '
	fi
	EOD

	return $?
}

function FindHostByArch()
{
	local HOSTFILE
	local ARCH="$1"

	for HOSTFILE in $(find "${CONFDIR}/hosts" -type f); do
		local ARCHS="$(grep ARCHS ${HOSTFILE})"

		if echo ${ARCHS}|grep -q "${ARCH}"; then
			echo "$(basename ${HOSTFILE})"
			return 0
		fi
	done

	return 1
}

function GetHostEnvironment()
{
	local HOSTFILE="$1"
	local TESTARCH

	if [ -f "${CONFDIR}/hosts/${HOSTFILE}" ]; then
		export SYSNAME="${HOSTFILE}"
		. "${CONFDIR}/hosts/${HOSTFILE}"
		export ARCH="${HOSTARCH}"
	else
		HOSTFILE="$(echo $1 | cut -d- -f1)"
		if [ -f "${CONFDIR}/hosts/${HOSTFILE}" ]; then
			export ARCH=$(echo $1 | cut -d- -f2)
			export SYSNAME="$HOSTFILE-$ARCH"
		else
			ARCH="$1"
			HOSTFILE="$(FindHostByArch $1)"
			if [ $? -ne 0 ]; then
				echo "Host $1 not configured!" >&2
				return 1
			fi
			export SYSNAME="$(basename ${HOSTFILE}-${ARCH})"
		fi
		. "${CONFDIR}/hosts/${HOSTFILE}"
	fi
	for TESTARCH in $ARCHS; do
		if [ "${ARCH}" = "${TESTARCH}" ]; then
			break
		fi
	done
	if [ "${TESTARCH}" != "${ARCH}" ]; then
		echo "Host $HOST does not support $ARCH" >&2
		return 1
	fi
	if [ "${HOSTARCH}" != "${ARCH}" ]; then
		if [ "${HOSTARCH}" = "amd64" ]; then
			case ${ARCH} in
				i386|lpia)
					ARCHCMD="linux32"
					;;
				*)
					;;
			esac
		fi
		CHROOT="${DIST}-${ARCH}"
	else
		CHROOT="${DIST}"
	fi
	if [ "${CHROOTCMD}" = "schroot" ]; then
		CHROOTCMD="${CHROOTCMD} -q -c${CHROOT} -- "
		if [ "${ARCHCMD}" != "" ]; then
			 CHROOTCMD="${CHROOTCMD}${ARCHCMD} "
		fi
	else
		if [ "${ARCHCMD}" != "" ]; then
			CHROOTCMD="${ARCHCMD} ${CHROOTCMD}"
		fi
		CHROOTCMD="${CHROOTCMD} -q -c${CHROOT} -- "
	fi

	if ${AUTOBUILD}; then
		AUTO="-a"
	fi
	export HOSTARCH CHROOTCMD FAKEROOT BASE ARCHS HOST CHROOT
	export BASEDIR="$BASE/$DIST-$ARCH"
	export BUILDING="$BASEDIR/build-status"
	case $BUILDTARGET in
		kernel)
			export BUILDDIR="$BASEDIR/ubuntu-2.6"
			;;
		lum)
			export BUILDDIR="$BASEDIR/ubuntu-2.6-lum"
			;;
		*)
			export BUILDDIR="$BASEDIR/something"
			;;
	esac

	return 0
}

function GetDistroEnvironment()
{
	if [ ! -f "${CONFDIR}/distros/${DIST}" ]; then
		echo "No distro configuration file for $1!" >&2
		return 1
	fi
	. "${CONFDIR}/distros/$1"

	case "${BUILDTARGET}" in
		lum)
			SRCDIR="${LUMDIR}"
			;;
		*)
			;;
	esac

	return 0
}

function ExpandHostGroups()
{
	local HOST
	local LIST

	LIST=""
	for HOST in $@; do
		if [ -r "$CONFDIR/groups/$HOST" ]; then
			cat "$CONFDIR/groups/$HOST"
		else
			echo "$HOST"
		fi
	done | sort -u
}
