#!/usr/bin/env python
#

from os                                 import getenv, path, makedirs, listdir, walk
from sys                                import stdout, argv
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import error, info, debug, basicConfig, INFO, DEBUG, getLogger
from mako.template                      import Template
from mako.exceptions                    import RichTraceback
from datetime                           import datetime
from shutil                             import rmtree, copytree, copyfile

import json

# ErrorExit
#
class ErrorExit(Exception):
    """
    Print out the message and exit.
    """
    def __init__(s, emsg):
        s.__message = emsg

    @property
    def message(s):
        return s.__message

# BadJson
#
class BadJson(ErrorExit):
    """
    """
    def __init__(s, fid, emsg):
        ErrorExit.__init__(s, emsg)
        s.__filename = fid

    @property
    def filename(s):
        return s.__filename

# NoSuchFile
#
class NoSuchFile(ErrorExit):
    """
    """
    def __init__(s, emsg):
        ErrorExit.__init__(s, emsg)

# Digest
#
class Digest():
    '''
    Build the index file for a collection of test results.
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args
        s.args.source = s.args.source[0]

    # __locate
    #
    def __locate(s, file_name):
        retval = None

        # Find it ...
        #
        fid = file_name
        if path.exists(fid): # Current directory
            retval = fid
        else:
            fid = path.join(path.dirname(argv[0]), file_name)
            if path.exists(fid):
                retval = fid

        return retval

    # get_test_results
    #
    def get_test_results(s, fp):
        """
        Load the indicated json format file, returning the created object.
        """
        retval = None
        with open(fp, 'r') as f:
            try:
                retval = json.load(f)
            except ValueError as e:
                raise BadJson(fp, e.message)
        return retval

    # initialize
    #
    def initialize(s):
        try:
            s.index_template = Template(filename=s.__locate('digest-index.mako'))
        except IOError as e:
            raise ErrorExit('%s: %s' % ('digest-index.mako', e.strerror))

    # main
    #
    def main(s):
        retval = 1
        try:
            s.initialize()

            # Put together a list of all of the test runs that we currently have
            # in the results root.
            #
            test_runs = []
            for x in listdir(s.args.source):
                p = path.join(s.args.source, x)
                if path.isdir(p):
                    test_runs.append(x)

            data = {}
            for tr in test_runs:
                try:
                    rp = path.join(s.args.source, tr, 'results.json')
                    if path.exists(rp):
                        results = s.get_test_results(rp)
                    else:
                        error("%s: File not found." % rp)
                except BadJson as e:
                    error(e.msg)
                    continue

                debug("%s" % (tr))
                debug("    kernel: %s" % (results['attributes']['kernel']))

                series = results['attributes']['distro-release-name']
                results['attributes']['series'] = series
                debug("    series: %s" % (results['attributes']['series']))

                # "Fixup" the timestamp to be what we want it to look like on the web page
                #
                ts = datetime.strptime(results['attributes']['timestamp'], '%A, %d. %B %Y %H:%M UTC')
                results['attributes']['timestamp'] = ts.strftime("%Y-%m-%d %H:%M")

                # The primary key is the series.
                #
                if series not in data:
                    data[series] = {}

                # The secondary key for 'data' is the kernel version.
                #
                k = results['attributes']['kernel']
                if k not in data[series]:
                    data[series][k] = []
                data[series][k].append(results)

                #print(json.dumps(data, sort_keys=True, indent=4))

            # Generate the testing, index page.
            #
            try:
                template = s.index_template.render(data = data, timestamp = datetime.utcnow())
                dest = path.join(s.args.source, 'index.html')
                with open(dest, 'w') as f:
                    f.write(template)

                #for host in s.hosts_info:
                #    template = s.host_template.render(data = s.hosts_info[host], title = host, timestamp = datetime.utcnow())
                #    dest = path.join(s.args.source, '%s.html' % host)
                #    with open(dest, 'w') as f:
                #        f.write(template)

            except:
                traceback = RichTraceback()
                for (filename, lineno, function, line) in traceback.traceback:
                    print("File %s, line %s, in %s" % (filename, lineno, function))
                    print(line, "\n")
                print("%s: %s" % (str(traceback.error.__class__.__name__), traceback.error))

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        except ErrorExit as e:
            msg = e.message
            if type(msg) is list:
                for m in msg:
                    error(m)
            else:
                error(msg)

        except BadJson as e:
            raise ErrorExit(['%s: Is not correctly formatted JSON.' % (e.filename), e.message])

        return retval

if __name__ == '__main__':
    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(levelname)s - %(message)s")

    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('source',      metavar='source',      type=str, nargs=1, help='The root of the test results tree.')
    args = parser.parse_args()

    app = Digest(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:
