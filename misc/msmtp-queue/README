= MSMTP QUEUE SUPPORT =

Scripting to allow you to queue msmtp outgoing transactions when offline
for later sending.  It also disconnects local email sender from the first
delivery attempt helpful if your first hop is slow.  This support consists
of three components:

msmtp-enqueue   -- sendmail (and msmtp) compatible client interface
msmtp-execute   -- msmtp queue runner (internal use only)
msmtp-queuectl  -- user interface to monitor and push pending entries

In theory msmtp-enqueue is sendmail compatible (as it is msmtp compatible)
and could be used directly to replace /usr/lib/sendmail.

Emails are injected into the queue using msmtp-enqueue in the same manner
as the regular msmtp binary (supporting the identicle command lines).
This will attempt immediate delivery retaining any failed emails for
later sending.  Pending emails must be pushed later either via the
msmtp-queuectl command, or via further email activity.

Pending emails are retained in the pending queue indefinatly.  The queue can
be inspected via the msmtp-queuectl command.  This has a number of sub-commands:

    list      -- list queue contents
    watch     -- monitor queue activity
    status    -- overall queue statistics
    history   -- list of all sent emails

    push      -- attempt to deliver pending entries

    block     -- disable outgoing delivery attempts
    unblock   -- enable outgoing delivery attempts


== configuring git send-email ==

Adding something similar to this to your ~/.gitconfig will cause git
send-email to use your queue:

[sendemail]
        smtpserver = /home/apw/kteam-tools/misc/msmtp-queue/msmtp-enqueue
        envelopesender = auto


== configuring mutt ==

Adding something similar to the below to .muttrc will let mutt use your
queue:

set sendmail="~/kteam-tools/misc/msmtp-queue/msmtp-enqueue -X -"
