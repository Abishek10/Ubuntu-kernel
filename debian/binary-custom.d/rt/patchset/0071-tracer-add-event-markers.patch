Add markers to various events

This patch adds markers to various events in the kernel.
(interrupts, task activation and hrtimers)

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 arch/x86/kernel/apic_32.c  |    3 ++
 arch/x86/kernel/irq_32.c   |    3 ++
 arch/x86/kernel/irq_64.c   |    4 +++
 arch/x86/kernel/traps_32.c |    4 +++
 arch/x86/kernel/traps_64.c |    4 +++
 arch/x86/mm/fault_32.c     |    4 +++
 arch/x86/mm/fault_64.c     |    4 +++
 include/linux/ftrace.h     |   55 +++++++++++++++++++++++++++++++++++++++++++++
 kernel/hrtimer.c           |    6 ++++
 kernel/sched.c             |    7 +++++
 10 files changed, 94 insertions(+)

Index: linux-2.6.24.2-rt2/arch/x86/kernel/apic_32.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/kernel/apic_32.c	2008-02-21 13:10:51.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/kernel/apic_32.c	2008-02-21 13:11:16.000000000 -0500
@@ -45,6 +45,8 @@
 
 #include "io_ports.h"
 
+#include <linux/ftrace.h>
+
 /*
  * Sanity check
  */
@@ -581,6 +583,7 @@ void fastcall smp_apic_timer_interrupt(s
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
 
+	ftrace_event_irq(-1, user_mode(regs), regs->eip);
 	/*
 	 * NOTE! We'd better ACK the irq immediately,
 	 * because timer handling can be slow.
Index: linux-2.6.24.2-rt2/arch/x86/kernel/irq_32.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/kernel/irq_32.c	2008-02-21 13:10:51.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/kernel/irq_32.c	2008-02-21 13:11:16.000000000 -0500
@@ -16,6 +16,8 @@
 #include <linux/cpu.h>
 #include <linux/delay.h>
 
+#include <linux/ftrace.h>
+
 #include <asm/apic.h>
 #include <asm/uaccess.h>
 
@@ -85,6 +87,7 @@ fastcall unsigned int do_IRQ(struct pt_r
 
 	old_regs = set_irq_regs(regs);
 	irq_enter();
+	ftrace_event_irq(irq, user_mode(regs), regs->eip);
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 	/* Debugging check for stack overflow: is there less than 1KB free? */
 	{
Index: linux-2.6.24.2-rt2/arch/x86/kernel/irq_64.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/kernel/irq_64.c	2008-02-21 13:10:51.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/kernel/irq_64.c	2008-02-21 13:11:16.000000000 -0500
@@ -18,6 +18,8 @@
 #include <asm/idle.h>
 #include <asm/smp.h>
 
+#include <linux/ftrace.h>
+
 atomic_t irq_err_count;
 
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
@@ -149,6 +151,8 @@ asmlinkage unsigned int do_IRQ(struct pt
 	irq_enter();
 	irq = __get_cpu_var(vector_irq)[vector];
 
+	ftrace_event_irq(irq, user_mode(regs), regs->rip);
+
 #ifdef CONFIG_DEBUG_STACKOVERFLOW
 	stack_overflow_check(regs);
 #endif
Index: linux-2.6.24.2-rt2/arch/x86/kernel/traps_32.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/kernel/traps_32.c	2008-02-21 13:11:08.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/kernel/traps_32.c	2008-02-21 13:11:16.000000000 -0500
@@ -30,6 +30,8 @@
 #include <linux/nmi.h>
 #include <linux/bug.h>
 
+#include <linux/ftrace.h>
+
 #ifdef CONFIG_EISA
 #include <linux/ioport.h>
 #include <linux/eisa.h>
@@ -769,6 +771,8 @@ fastcall notrace __kprobes void do_nmi(s
 
 	nmi_enter();
 
+	ftrace_event_irq(-1, user_mode(regs), regs->eip);
+
 	cpu = smp_processor_id();
 
 	++nmi_count(cpu);
Index: linux-2.6.24.2-rt2/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/kernel/traps_64.c	2008-02-21 13:11:08.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/kernel/traps_64.c	2008-02-21 13:11:16.000000000 -0500
@@ -33,6 +33,8 @@
 #include <linux/kdebug.h>
 #include <linux/utsname.h>
 
+#include <linux/ftrace.h>
+
 #if defined(CONFIG_EDAC)
 #include <linux/edac.h>
 #endif
@@ -782,6 +784,8 @@ asmlinkage notrace  __kprobes void defau
 
 	cpu = smp_processor_id();
 
+	ftrace_event_irq(-1, user_mode(regs), regs->rip);
+
 	/* Only the BSP gets external NMIs from the system.  */
 	if (!cpu)
 		reason = get_nmi_reason();
Index: linux-2.6.24.2-rt2/arch/x86/mm/fault_64.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/mm/fault_64.c	2008-02-21 13:10:51.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/mm/fault_64.c	2008-02-21 13:11:16.000000000 -0500
@@ -27,6 +27,8 @@
 #include <linux/kdebug.h>
 #include <linux/kprobes.h>
 
+#include <linux/ftrace.h>
+
 #include <asm/system.h>
 #include <asm/pgalloc.h>
 #include <asm/smp.h>
@@ -316,6 +318,8 @@ asmlinkage void __kprobes do_page_fault(
 	/* get the address */
 	address = read_cr2();
 
+	ftrace_event_fault(regs->rip, error_code, address);
+
 	info.si_code = SEGV_MAPERR;
 
 
Index: linux-2.6.24.2-rt2/kernel/hrtimer.c
===================================================================
--- linux-2.6.24.2-rt2.orig/kernel/hrtimer.c	2008-02-21 13:10:51.000000000 -0500
+++ linux-2.6.24.2-rt2/kernel/hrtimer.c	2008-02-21 13:11:16.000000000 -0500
@@ -44,6 +44,8 @@
 #include <linux/seq_file.h>
 #include <linux/err.h>
 
+#include <linux/ftrace.h>
+
 #include <asm/uaccess.h>
 
 /**
@@ -708,6 +710,7 @@ static void enqueue_hrtimer(struct hrtim
 	struct hrtimer *entry;
 	int leftmost = 1;
 
+	ftrace_event_timer(&timer->expires, timer);
 	/*
 	 * Find the right place in the rbtree:
 	 */
@@ -1049,6 +1052,7 @@ void hrtimer_interrupt(struct clock_even
 
  retry:
 	now = ktime_get();
+	ftrace_event_timestamp(&now);
 
 	expires_next.tv64 = KTIME_MAX;
 
@@ -1087,6 +1091,8 @@ void hrtimer_interrupt(struct clock_even
 				continue;
 			}
 
+			ftrace_event_timer(&timer->expires, timer);
+
 			__remove_hrtimer(timer, base,
 					 HRTIMER_STATE_CALLBACK, 0);
 			timer_stats_account_hrtimer(timer);
Index: linux-2.6.24.2-rt2/kernel/sched.c
===================================================================
--- linux-2.6.24.2-rt2.orig/kernel/sched.c	2008-02-21 13:11:12.000000000 -0500
+++ linux-2.6.24.2-rt2/kernel/sched.c	2008-02-21 13:11:16.000000000 -0500
@@ -91,6 +91,11 @@ unsigned long long __attribute__((weak))
 #define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 20)
 #define TASK_NICE(p)		PRIO_TO_NICE((p)->static_prio)
 
+#define __PRIO(prio) \
+	((prio) <= 99 ? 199 - (prio) : (prio) - 120)
+
+#define PRIO(p) __PRIO((p)->prio)
+
 /*
  * 'User priority' is the nice value converted to something we
  * can work with better when scaling various scheduler parameters,
@@ -1074,6 +1079,7 @@ static void activate_task(struct rq *rq,
 	if (p->state == TASK_UNINTERRUPTIBLE)
 		rq->nr_uninterruptible--;
 
+	ftrace_event_task(p->pid, PRIO(p), rq->nr_running);
 	enqueue_task(rq, p, wakeup);
 	inc_nr_running(p, rq);
 }
@@ -1086,6 +1092,7 @@ static void deactivate_task(struct rq *r
 	if (p->state == TASK_UNINTERRUPTIBLE)
 		rq->nr_uninterruptible++;
 
+	ftrace_event_task(p->pid, PRIO(p), rq->nr_running);
 	dequeue_task(rq, p, sleep);
 	dec_nr_running(p, rq);
 }
Index: linux-2.6.24.2-rt2/include/linux/ftrace.h
===================================================================
--- linux-2.6.24.2-rt2.orig/include/linux/ftrace.h	2008-02-21 13:11:15.000000000 -0500
+++ linux-2.6.24.2-rt2/include/linux/ftrace.h	2008-02-21 13:11:16.000000000 -0500
@@ -4,6 +4,7 @@
 #ifdef CONFIG_FTRACE
 
 #include <linux/linkage.h>
+#include <linux/ktime.h>
 
 extern int ftrace_enabled;
 extern int
@@ -101,4 +102,58 @@ extern void mcount_call(void);
 # define trace_preempt_off(a0, a1)		do { } while (0)
 #endif
 
+#ifdef CONFIG_EVENT_TRACER
+extern int ftrace_events_enabled;
+enum ftrace_event_enum {
+	FTRACE_EVENTS_IRQ,
+	FTRACE_EVENTS_FAULT,
+	FTRACE_EVENTS_TIMER,
+	FTRACE_EVENTS_TIMESTAMP,
+	FTRACE_EVENTS_TASK,
+};
+extern void ftrace_record_event(enum ftrace_event_enum event, ...);
+static inline void ftrace_event_irq(int irq, int user, unsigned long ip)
+{
+	if (unlikely(ftrace_events_enabled))
+		ftrace_record_event(FTRACE_EVENTS_IRQ,
+				    irq, user, ip);
+}
+
+static inline void ftrace_event_fault(unsigned long ip, unsigned long error,
+				      unsigned long addr)
+{
+	if (unlikely(ftrace_events_enabled))
+		ftrace_record_event(FTRACE_EVENTS_FAULT,
+				    ip, error, addr);
+}
+
+static inline void ftrace_event_timer(void *p1, void *p2)
+{
+	if (unlikely(ftrace_events_enabled))
+		ftrace_record_event(FTRACE_EVENTS_TIMER,
+				    p1, p2);
+}
+
+static inline void ftrace_event_timestamp(ktime_t *time)
+{
+	if (unlikely(ftrace_events_enabled))
+		ftrace_record_event(FTRACE_EVENTS_TIMESTAMP,
+				    time);
+}
+
+static inline void ftrace_event_task(pid_t pid, int prio,
+				     unsigned long  running)
+{
+	if (unlikely(ftrace_events_enabled))
+		ftrace_record_event(FTRACE_EVENTS_TASK,
+				    pid, prio, running);
+}
+#else
+# define ftrace_event_irq(irq, user, ip)	do { } while (0)
+# define ftrace_event_fault(ip, error, addr)	do { } while (0)
+# define ftrace_event_timer(p1, p2)		do { } while (0)
+# define ftrace_event_timestamp(now)		do { } while (0)
+# define ftrace_event_task(pid, prio, running)	do { } while (0)
+#endif /* CONFIG_TRACE_EVENTS */
+
 #endif /* _LINUX_FTRACE_H */
Index: linux-2.6.24.2-rt2/arch/x86/mm/fault_32.c
===================================================================
--- linux-2.6.24.2-rt2.orig/arch/x86/mm/fault_32.c	2008-02-21 13:10:51.000000000 -0500
+++ linux-2.6.24.2-rt2/arch/x86/mm/fault_32.c	2008-02-21 13:11:16.000000000 -0500
@@ -27,6 +27,8 @@
 #include <linux/kdebug.h>
 #include <linux/kprobes.h>
 
+#include <linux/ftrace.h>
+
 #include <asm/system.h>
 #include <asm/desc.h>
 #include <asm/segment.h>
@@ -311,6 +313,8 @@ fastcall void __kprobes do_page_fault(st
 	/* get the address */
         address = read_cr2();
 
+	ftrace_event_fault(regs->eip, error_code, address);
+
 	tsk = current;
 
 	si_code = SEGV_MAPERR;
