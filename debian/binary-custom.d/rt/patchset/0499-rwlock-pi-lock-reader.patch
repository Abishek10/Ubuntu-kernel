From: Steven Rostedt <srostedt@redhat.com>
Subject: rwlock: pi_lock fixes

When waking up multiple readers we need to hold the pi_lock to
modify the pending lists. This patch also localizes the locks a bit more.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 kernel/rtmutex.c |   19 +++++++++++++------
 1 file changed, 13 insertions(+), 6 deletions(-)

Index: linux-2.6.24.7-rt27/kernel/rtmutex.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/rtmutex.c	2009-02-08 00:04:45.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/rtmutex.c	2009-02-08 00:04:48.000000000 -0500
@@ -1918,7 +1918,6 @@ rt_write_slowunlock(struct rw_mutex *rwm
 	if (!rt_mutex_has_waiters(mutex))
 		goto out;
 
-	spin_lock(&pendowner->pi_lock);
 	/*
 	 * Wake up all readers.
 	 * This gets a bit more complex. More than one reader can't
@@ -1933,13 +1932,17 @@ rt_write_slowunlock(struct rw_mutex *rwm
 	while (waiter && !waiter->write_lock) {
 		struct task_struct *reader = waiter->task;
 
+		spin_lock(&pendowner->pi_lock);
 		plist_del(&waiter->list_entry, &mutex->wait_list);
 
 		/* nop if not on a list */
 		plist_del(&waiter->pi_list_entry, &pendowner->pi_waiters);
+		spin_unlock(&pendowner->pi_lock);
 
+		spin_lock(&reader->pi_lock);
 		waiter->task = NULL;
 		reader->pi_blocked_on = NULL;
+		spin_unlock(&reader->pi_lock);
 
 		if (savestate)
 			wake_up_process_mutex(reader);
@@ -1957,6 +1960,8 @@ rt_write_slowunlock(struct rw_mutex *rwm
 		struct rt_mutex_waiter *next;
 
 		next = rt_mutex_top_waiter(mutex);
+
+		spin_lock(&pendowner->pi_lock);
 		/* delete incase we didn't go through the loop */
 		plist_del(&next->pi_list_entry, &pendowner->pi_waiters);
 
@@ -1964,13 +1969,12 @@ rt_write_slowunlock(struct rw_mutex *rwm
 		if (next->write_lock)
 			/* add back in as top waiter */
 			plist_add(&next->pi_list_entry, &pendowner->pi_waiters);
+		spin_unlock(&pendowner->pi_lock);
 
 		rwm->prio = next->task->prio;
 	} else
 		rwm->prio = MAX_PRIO;
 
-	spin_unlock(&pendowner->pi_lock);
-
  out:
 
 	spin_unlock_irqrestore(&mutex->wait_lock, flags);
@@ -2052,18 +2056,21 @@ rt_mutex_downgrade_write(struct rw_mutex
 	 * waiting, until we hit the reader limit, or a writer.
 	 */
 
-	spin_lock(&current->pi_lock);
 	waiter = rt_mutex_top_waiter(mutex);
 	while (waiter && !waiter->write_lock) {
 		struct task_struct *reader = waiter->task;
 
+		spin_lock(&current->pi_lock);
 		plist_del(&waiter->list_entry, &mutex->wait_list);
 
 		/* nop if not on a list */
 		plist_del(&waiter->pi_list_entry, &current->pi_waiters);
+		spin_unlock(&current->pi_lock);
 
+		spin_lock(&reader->pi_lock);
 		waiter->task = NULL;
 		reader->pi_blocked_on = NULL;
+		spin_unlock(&reader->pi_lock);
 
 		/* downgrade is only for mutexes */
 		wake_up_process(reader);
@@ -2083,14 +2090,14 @@ rt_mutex_downgrade_write(struct rw_mutex
 		/* setup this mutex prio for read */
 		rwm->prio = next->task->prio;
 
+		spin_lock(&current->pi_lock);
 		/* delete incase we didn't go through the loop */
 		plist_del(&next->pi_list_entry, &current->pi_waiters);
+		spin_unlock(&current->pi_lock);
 		/* No need to add back since readers don't have PI waiters */
 	} else
 		rwm->prio = MAX_PRIO;
 
-	spin_unlock(&current->pi_lock);
-
 	rt_mutex_set_owner(mutex, RT_RW_READER, 0);
 
 	spin_unlock_irqrestore(&mutex->wait_lock, flags);
