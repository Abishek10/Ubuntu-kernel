From: Steven Rostedt <srostedt@redhat.com>
Subject: ftrace: cpu hotplug fix

Peter Zijlstra found that taking down and bringing up a new CPU caused
ftrace to crash the kernel. This was due to some arch calls that were
being traced by the function tracer before the smp_processor_id was set
up. Since the function tracer uses smp_processor_id it caused a triple
fault.

Instead of adding notrace all over the architecture code to prevent
this problem, it is easier to simply disable the function tracer
when bringing up a new CPU.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
---
 include/linux/ftrace.h            |   11 ++++++++---
 kernel/cpu.c                      |   11 ++++++++++-
 kernel/trace/ftrace.c             |   24 ++++++++++++++++++++++++
 kernel/trace/trace_irqsoff.c      |    3 +++
 kernel/trace/trace_sched_wakeup.c |    2 +-
 5 files changed, 46 insertions(+), 5 deletions(-)

Index: linux-2.6.24.7-rt27/include/linux/ftrace.h
===================================================================
--- linux-2.6.24.7-rt27.orig/include/linux/ftrace.h	2009-02-08 00:04:45.000000000 -0500
+++ linux-2.6.24.7-rt27/include/linux/ftrace.h	2009-02-08 00:04:48.000000000 -0500
@@ -35,10 +35,15 @@ void clear_ftrace_function(void);
 extern void ftrace_stub(unsigned long a0, unsigned long a1);
 extern void mcount(void);
 
+void ftrace_enable(void);
+void ftrace_disable(void);
+
 #else /* !CONFIG_FTRACE */
-# define register_ftrace_function(ops) do { } while (0)
-# define unregister_ftrace_function(ops) do { } while (0)
-# define clear_ftrace_function(ops) do { } while (0)
+# define register_ftrace_function(ops)		do { } while (0)
+# define unregister_ftrace_function(ops)	do { } while (0)
+# define clear_ftrace_function(ops)		do { } while (0)
+# define ftrace_enable()			do { } while (0)
+# define ftrace_disable()			do { } while (0)
 #endif /* CONFIG_FTRACE */
 
 #ifdef CONFIG_DYNAMIC_FTRACE
Index: linux-2.6.24.7-rt27/kernel/cpu.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/cpu.c	2009-02-08 00:02:51.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/cpu.c	2009-02-08 00:04:48.000000000 -0500
@@ -14,6 +14,7 @@
 #include <linux/kthread.h>
 #include <linux/stop_machine.h>
 #include <linux/mutex.h>
+#include <linux/ftrace.h>
 
 /* This protects CPUs going up and down... */
 static DEFINE_MUTEX(cpu_add_remove_lock);
@@ -244,9 +245,17 @@ static int __cpuinit _cpu_up(unsigned in
 		goto out_notify;
 	}
 
-	/* Arch-specific enabling code. */
 	mutex_lock(&cpu_bitmask_lock);
+	/*
+	 * Disable function tracing while bringing up a new CPU.
+	 * We don't want to trace functions that can not handle a
+	 * smp_processor_id() call.
+	 */
+	ftrace_disable();
+
+	/* Arch-specific enabling code. */
 	ret = __cpu_up(cpu);
+	ftrace_enable();
 	mutex_unlock(&cpu_bitmask_lock);
 	if (ret != 0)
 		goto out_notify;
Index: linux-2.6.24.7-rt27/kernel/trace/ftrace.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/trace/ftrace.c	2009-02-08 00:02:36.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/trace/ftrace.c	2009-02-08 00:04:48.000000000 -0500
@@ -148,6 +148,30 @@ static int __unregister_ftrace_function(
 	return ret;
 }
 
+static int ftrace_disabled_count;
+static int save_ftrace_enabled;
+
+void ftrace_disable(void)
+{
+	mutex_lock(&ftrace_sysctl_lock);
+
+	save_ftrace_enabled = ftrace_enabled;
+	ftrace_enabled = 0;
+}
+
+void ftrace_enable(void)
+{
+	/* ftrace_enable must be paired with ftrace_disable */
+	if (!mutex_is_locked(&ftrace_sysctl_lock)) {
+		WARN_ON(1);
+		return;
+	}
+
+	ftrace_enabled = save_ftrace_enabled;
+
+	mutex_unlock(&ftrace_sysctl_lock);
+}
+
 #ifdef CONFIG_DYNAMIC_FTRACE
 
 static struct task_struct *ftraced_task;
Index: linux-2.6.24.7-rt27/kernel/trace/trace_irqsoff.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/trace/trace_irqsoff.c	2009-02-08 00:02:36.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/trace/trace_irqsoff.c	2009-02-08 00:04:48.000000000 -0500
@@ -77,6 +77,9 @@ irqsoff_tracer_call(unsigned long ip, un
 	long disabled;
 	int cpu;
 
+	if (unlikely(!ftrace_enabled))
+		return;
+
 	/*
 	 * Does not matter if we preempt. We test the flags
 	 * afterward, to see if irqs are disabled or not.
Index: linux-2.6.24.7-rt27/kernel/trace/trace_sched_wakeup.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/trace/trace_sched_wakeup.c	2009-02-08 00:04:46.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/trace/trace_sched_wakeup.c	2009-02-08 00:04:48.000000000 -0500
@@ -45,7 +45,7 @@ wakeup_tracer_call(unsigned long ip, uns
 	int resched;
 	int cpu;
 
-	if (likely(!wakeup_task))
+	if (likely(!wakeup_task) || !ftrace_enabled)
 		return;
 
 	resched = need_resched();
