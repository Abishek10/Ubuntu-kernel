Subject: [GTI pull] hrtimer fixes

From: Thomas Gleixner <tglx@linutronix.de>

Linus,

please pull hrtimer fixes from:

  ssh://master.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt.git master

Fix for a potential deadlock which was introduced with the scheduler
hrtimer changes in .25.

Thanks,
	tglx
---

 kernel/hrtimer.c |   18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

Index: linux-2.6.24.7-rt27/kernel/hrtimer.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/hrtimer.c	2009-02-08 00:00:41.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/hrtimer.c	2009-02-08 00:00:42.000000000 -0500
@@ -593,7 +593,6 @@ static inline int hrtimer_enqueue_reprog
 			list_add_tail(&timer->cb_entry,
 				      &base->cpu_base->cb_pending);
 			timer->state = HRTIMER_STATE_PENDING;
-			raise_softirq(HRTIMER_SOFTIRQ);
 			return 1;
 		default:
 			BUG();
@@ -636,6 +635,11 @@ static int hrtimer_switch_to_hres(void)
 	return 1;
 }
 
+static inline void hrtimer_raise_softirq(void)
+{
+	raise_softirq(HRTIMER_SOFTIRQ);
+}
+
 #else
 
 static inline int hrtimer_hres_active(void) { return 0; }
@@ -651,6 +655,7 @@ static inline int hrtimer_cb_pending(str
 static inline void hrtimer_remove_cb_pending(struct hrtimer *timer) { }
 static inline void hrtimer_init_hres(struct hrtimer_cpu_base *base) { }
 static inline void hrtimer_init_timer_hres(struct hrtimer *timer) { }
+static inline void hrtimer_raise_softirq(void) { }
 
 #endif /* CONFIG_HIGH_RES_TIMERS */
 
@@ -852,6 +857,7 @@ hrtimer_start(struct hrtimer *timer, kti
 	struct hrtimer_clock_base *base, *new_base;
 	unsigned long flags;
 	int ret;
+	int raise;
 
 	base = lock_hrtimer_base(timer, &flags);
 
@@ -885,8 +891,18 @@ hrtimer_start(struct hrtimer *timer, kti
 	enqueue_hrtimer(timer, new_base,
 			new_base->cpu_base == &__get_cpu_var(hrtimer_bases));
 
+	/*
+	 * The timer may be expired and moved to the cb_pending
+	 * list. We can not raise the softirq with base lock held due
+	 * to a possible deadlock with runqueue lock.
+	 */
+	raise = timer->state == HRTIMER_STATE_PENDING;
+
 	unlock_hrtimer_base(timer, &flags);
 
+	if (raise)
+		hrtimer_raise_softirq();
+
 	return ret;
 }
 EXPORT_SYMBOL_GPL(hrtimer_start);
