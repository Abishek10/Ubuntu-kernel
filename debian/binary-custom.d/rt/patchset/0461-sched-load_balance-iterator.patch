Subject: sched: fixup the load balancer iterator
From: Peter Zijlstra <a.p.zijlstra@chello.nl>

Solve the live-lock from the previous patch by not restarting the load
balance iterator on each go.

Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
---
 kernel/sched.c      |   13 +++++++++++--
 kernel/sched_fair.c |    3 +++
 2 files changed, 14 insertions(+), 2 deletions(-)

Index: linux-2.6.24.7-rt27/kernel/sched.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/sched.c	2009-02-08 00:04:29.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/sched.c	2009-02-08 00:04:29.000000000 -0500
@@ -2275,6 +2275,7 @@ static void update_cpu_load(struct rq *t
 
 #define LB_ALL_PINNED	0x01
 #define LB_COMPLETE	0x02
+#define LB_START	0x03
 
 /*
  * double_rq_lock - safely lock two runqueues
@@ -2477,7 +2478,11 @@ balance_tasks(struct rq *this_rq, int th
 	/*
 	 * Start the load-balancing iterator:
 	 */
-	p = iterator->start(iterator->arg);
+	if (*lb_flags & LB_START)
+		p = iterator->start(iterator->arg);
+	else
+		p = iterator->next(iterator->arg);
+
 	if (p)
 		pinned = 1;
 next:
@@ -2544,6 +2549,8 @@ static int move_tasks(struct rq *this_rq
 	unsigned long total_load_moved = 0;
 	int this_best_prio = this_rq->curr->prio;
 
+	*lb_flags |= LB_START;
+
 	do {
 		unsigned long load_moved;
 
@@ -2555,9 +2562,11 @@ static int move_tasks(struct rq *this_rq
 
 		total_load_moved += load_moved;
 
-		if (!load_moved || *lb_flags & LB_COMPLETE) {
+		if (*lb_flags & LB_COMPLETE) {
 			class = class->next;
+			*lb_flags |= LB_START;
 		} else if (sched_feat(LB_BREAK)) {
+			*lb_flags &= ~LB_START;
 			schedstat_inc(this_rq, lb_breaks);
 
 			double_rq_unlock(this_rq, busiest);
Index: linux-2.6.24.7-rt27/kernel/sched_fair.c
===================================================================
--- linux-2.6.24.7-rt27.orig/kernel/sched_fair.c	2009-02-08 00:04:28.000000000 -0500
+++ linux-2.6.24.7-rt27/kernel/sched_fair.c	2009-02-08 00:04:29.000000000 -0500
@@ -185,6 +185,9 @@ static void __dequeue_entity(struct cfs_
 	if (cfs_rq->rb_leftmost == &se->run_node)
 		cfs_rq->rb_leftmost = rb_next(&se->run_node);
 
+	if (cfs_rq->rb_load_balance_curr == &se->run_node)
+		cfs_rq->rb_load_balance_curr = rb_next(&se->run_node);
+
 	rb_erase(&se->run_node, &cfs_rq->tasks_timeline);
 }
 
