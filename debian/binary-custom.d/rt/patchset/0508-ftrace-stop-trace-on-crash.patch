Subject: fix-tracer-wreckage-wtf-is-this-code-all-features.patch
From: Thomas Gleixner <tglx@linutronix.de>
Date: Thu, 19 Jun 2008 19:24:14 +0200

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
---
 arch/x86/kernel/traps_32.c |    2 ++
 arch/x86/kernel/traps_64.c |    3 +++
 include/linux/ftrace.h     |   11 ++++++++---
 kernel/trace/ftrace.c      |   17 +++++++++++++++++
 kernel/trace/trace.c       |   31 +++++++++++++++++++++++++++++++
 5 files changed, 61 insertions(+), 3 deletions(-)

Index: linux-2.6.24.7-rt21/arch/x86/kernel/traps_32.c
===================================================================
--- linux-2.6.24.7-rt21.orig/arch/x86/kernel/traps_32.c	2008-10-08 22:24:19.000000000 -0400
+++ linux-2.6.24.7-rt21/arch/x86/kernel/traps_32.c	2008-10-08 22:25:06.000000000 -0400
@@ -385,6 +385,8 @@ void die(const char * str, struct pt_reg
 	static int die_counter;
 	unsigned long flags;
 
+	ftrace_stop();
+
 	oops_enter();
 
 	if (die.lock_owner != raw_smp_processor_id()) {
Index: linux-2.6.24.7-rt21/arch/x86/kernel/traps_64.c
===================================================================
--- linux-2.6.24.7-rt21.orig/arch/x86/kernel/traps_64.c	2008-10-08 22:24:36.000000000 -0400
+++ linux-2.6.24.7-rt21/arch/x86/kernel/traps_64.c	2008-10-08 22:25:06.000000000 -0400
@@ -524,6 +524,9 @@ void __kprobes oops_end(unsigned long fl
 void __kprobes __die(const char * str, struct pt_regs * regs, long err)
 {
 	static int die_counter;
+
+	ftrace_stop();
+
 	printk(KERN_EMERG "%s: %04lx [%u] ", str, err & 0xffff,++die_counter);
 #ifdef CONFIG_PREEMPT
 	printk("PREEMPT ");
Index: linux-2.6.24.7-rt21/include/linux/ftrace.h
===================================================================
--- linux-2.6.24.7-rt21.orig/include/linux/ftrace.h	2008-10-08 22:25:04.000000000 -0400
+++ linux-2.6.24.7-rt21/include/linux/ftrace.h	2008-10-08 22:25:06.000000000 -0400
@@ -38,12 +38,18 @@ extern void mcount(void);
 void ftrace_enable(void);
 void ftrace_disable(void);
 
+/* totally disable ftrace - can not re-enable after this */
+void ftrace_kill(void);
+void __ftrace_kill(void);
+
 #else /* !CONFIG_FTRACE */
 # define register_ftrace_function(ops)		do { } while (0)
 # define unregister_ftrace_function(ops)	do { } while (0)
 # define clear_ftrace_function(ops)		do { } while (0)
 # define ftrace_enable()			do { } while (0)
 # define ftrace_disable()			do { } while (0)
+# define ftrace_kill()				do { } while (0)
+# define __ftrace_kill()			do { } while (0)
 #endif /* CONFIG_FTRACE */
 
 #ifdef CONFIG_DYNAMIC_FTRACE
@@ -90,9 +96,6 @@ void ftrace_enable_daemon(void);
 # define ftrace_enable_daemon()			do { } while (0)
 #endif
 
-/* totally disable ftrace - can not re-enable after this */
-void ftrace_kill(void);
-
 static inline void tracer_disable(void)
 {
 #ifdef CONFIG_FTRACE
@@ -138,9 +141,11 @@ static inline void tracer_disable(void)
 #ifdef CONFIG_TRACING
 extern void
 ftrace_special(unsigned long arg1, unsigned long arg2, unsigned long arg3);
+void ftrace_stop(void);
 #else
 static inline void
 ftrace_special(unsigned long arg1, unsigned long arg2, unsigned long arg3) { }
+static inline void ftrace_stop(void) { }
 #endif
 
 #ifdef CONFIG_EVENT_TRACER
Index: linux-2.6.24.7-rt21/kernel/trace/ftrace.c
===================================================================
--- linux-2.6.24.7-rt21.orig/kernel/trace/ftrace.c	2008-10-08 22:25:04.000000000 -0400
+++ linux-2.6.24.7-rt21/kernel/trace/ftrace.c	2008-10-08 22:25:06.000000000 -0400
@@ -1490,6 +1490,23 @@ void ftrace_kill(void)
 }
 
 /**
+ * __ftrace_kill - shutdown ftrace in a mean fashion
+ *
+ * In case of system failure we want to stop ftrace as soon as
+ * possible. This is like ftrace_kill but does not grab the
+ * mutexes nor does it call the kstop machine.
+ *
+ * This one is save to use in atomic.
+ */
+void __ftrace_kill(void)
+{
+	ftrace_disabled = 1;
+	ftrace_enabled = 0;
+
+	clear_ftrace_function();
+}
+
+/**
  * register_ftrace_function - register a function for profiling
  * @ops - ops structure that holds the function for profiling.
  *
Index: linux-2.6.24.7-rt21/kernel/trace/trace.c
===================================================================
--- linux-2.6.24.7-rt21.orig/kernel/trace/trace.c	2008-10-08 22:25:02.000000000 -0400
+++ linux-2.6.24.7-rt21/kernel/trace/trace.c	2008-10-08 22:25:06.000000000 -0400
@@ -3243,6 +3243,37 @@ static __init void tracer_init_debugfs(v
 #endif
 }
 
+/**
+ * ftrace_stop - called when we need to drastically disable the tracer.
+ */
+void ftrace_stop(void)
+{
+	struct tracer *saved_tracer = current_trace;
+	struct trace_array *tr = &global_trace;
+	struct trace_array_cpu *data;
+	int i;
+
+	__ftrace_kill();
+	for_each_tracing_cpu(i) {
+		data = tr->data[i];
+		atomic_inc(&data->disabled);
+	}
+	tracer_enabled = 0;
+
+	/*
+	 * TODO: make a safe method to ctrl_update.
+	 *  ctrl_update may schedule, but currently only
+	 *  does when ftrace is enabled.
+	 */
+	if (tr->ctrl) {
+		tr->ctrl = 0;
+		if (saved_tracer && saved_tracer->ctrl_update)
+			saved_tracer->ctrl_update;
+	}
+
+
+}
+
 static int trace_alloc_page(void)
 {
 	struct trace_array_cpu *data;
