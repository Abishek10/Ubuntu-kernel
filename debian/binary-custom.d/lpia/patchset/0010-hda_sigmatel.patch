#! /bin/sh /usr/share/dpatch/dpatch-run
diff --git a/sound/pci/hda/patch_sigmatel.c b/sound/pci/hda/patch_sigmatel.c
index 0401223..18bd160 100644
--- a/sound/pci/hda/patch_sigmatel.c
+++ b/sound/pci/hda/patch_sigmatel.c
@@ -34,6 +34,9 @@
 #include "hda_codec.h"
 #include "hda_local.h"
 
+#define dbg(f, x...) \
+	printk(KERN_ALERT " [%s()]: " f "\n", __func__,## x)
+
 #define NUM_CONTROL_ALLOC	32
 #define STAC_HP_EVENT		0x37
 
@@ -54,6 +57,12 @@ enum {
 };
 
 enum {
+	STAC_9202_REF,
+	STAC_9202_TEST1,
+	STAC_9202_MODELS
+};
+
+enum {
 	STAC_9205_REF,
 	STAC_9205_DELL_M42,
 	STAC_9205_DELL_M43,
@@ -171,16 +180,32 @@ static hda_nid_t stac9200_dac_nids[1] = {
         0x02,
 };
 
+static hda_nid_t stac9202_adc_nids[1] = {
+	0x03,
+};
+
+static hda_nid_t stac9202_mux_nids[1] = {
+	0x0f,
+};
+
+static hda_nid_t stac9202_dac_nids[1] = {
+	0x02,
+};
+
+static hda_nid_t stac9202_dmic_nids[2] = {
+	0x15, 0
+};
+
 static hda_nid_t stac925x_adc_nids[1] = {
-        0x03,
+	0x03,
 };
 
 static hda_nid_t stac925x_mux_nids[1] = {
-        0x0f,
+	0x0f,
 };
 
 static hda_nid_t stac925x_dac_nids[1] = {
-        0x02,
+	0x02,
 };
 
 #define STAC925X_NUM_DMICS	1
@@ -222,6 +247,11 @@ static hda_nid_t stac9200_pin_nids[8] = {
 	0x0f, 0x10, 0x11, 0x12,
 };
 
+static hda_nid_t stac9202_pin_nids[9] = {
+        0x07, 0x08, 0x0a, 0x0d,
+        0x0c, 0x0b, 0x10, 0x11, 0x15,
+};
+
 static hda_nid_t stac925x_pin_nids[8] = {
 	0x07, 0x08, 0x0a, 0x0b, 
 	0x0c, 0x0d, 0x10, 0x11,
@@ -354,6 +384,35 @@ static struct hda_verb stac9200_eapd_init[] = {
 	{}
 };
 
+static struct hda_verb stac9202_core_init[] = {
+        /* set dac0mux for dac converter */
+        { 0x06, AC_VERB_SET_CONNECT_SEL, 0x00},
+        {}
+};
+
+/* NID 6, the DAC mux, is set to 0, which forces it to uses NID 2 as its input;
+   Not the loopbacks from either the analog (NID 14) nor stereo  (NID 7) inputs.
+
+   NID 15, the DMIC input, has its widget control set to 0x20, which enables it's
+   output into the Azalia link, not the Analog input
+
+   NID 7, the SPDIF IN pin, set for EAPD; set power amplifier on  */
+
+static struct hda_verb stac9202_test1_init[] = {
+        /* set dac0mux for dac converter */
+        { 0x06, AC_VERB_SET_CONNECT_SEL, 0x00},
+        /* Set pin widgets */
+        { 0x15, AC_VERB_SET_PIN_WIDGET_CONTROL, 0x20},
+	/* Set EAPD on SPDIF IN for amp on */
+ 	{ 0x07, AC_VERB_SET_EAPD_BTLENABLE , 0x02},
+	/* Set Input MUX for digital input */
+	{ 0x14, AC_VERB_SET_CONNECT_SEL, 0x01},
+	/* Unmute the Input MUX */
+	{ 0x14, 0x390, 0x00},
+	{ 0x14, 0x3a0, 0x00},
+        {}
+};
+
 static struct hda_verb stac925x_core_init[] = {
 	/* set dac0mux for dac converter */
 	{ 0x06, AC_VERB_SET_CONNECT_SEL, 0x00},
@@ -419,6 +478,60 @@ static struct snd_kcontrol_new stac9200_mixer[] = {
 	{ } /* end */
 };
 
+static struct snd_kcontrol_new stac9202_mixer[] = {
+        HDA_CODEC_VOLUME("Master Playback Volume", 0xe, 0, HDA_OUTPUT),
+        HDA_CODEC_MUTE("Master Playback Switch", 0xe, 0, HDA_OUTPUT),
+        {
+                .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
+                .name = "Input Source",
+                .count = 1,
+                .info = stac92xx_mux_enum_info,
+                .get = stac92xx_mux_enum_get,
+                .put = stac92xx_mux_enum_put,
+        },
+/*
+        {
+                .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
+                .name = "Digital Input Source",
+                .count = 1,
+                .info = stac92xx_dmux_enum_info,
+                .get = stac92xx_dmux_enum_get,
+                .put = stac92xx_dmux_enum_put,
+        },
+*/ 
+        HDA_CODEC_VOLUME("Capture Volume", 0x09, 0, HDA_OUTPUT),
+        HDA_CODEC_MUTE("Capture Switch", 0x09, 0, HDA_OUTPUT),
+        HDA_CODEC_VOLUME("Capture Mux Volume", 0x0f, 0, HDA_OUTPUT),
+        { } /* end */
+};
+
+static struct snd_kcontrol_new stac9202_test1_mixer[] = {
+        HDA_CODEC_VOLUME("Master Playback Volume", 0xe, 0, HDA_OUTPUT),
+        HDA_CODEC_MUTE("Master Playback Switch", 0xe, 0, HDA_OUTPUT),
+        {
+                .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
+                .name = "Input Source",
+                .count = 1,
+                .info = stac92xx_mux_enum_info,
+                .get = stac92xx_mux_enum_get,
+                .put = stac92xx_mux_enum_put,
+        },
+/*
+        {
+                .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
+                .name = "Digital Input Source",
+                .count = 1,
+                .info = stac92xx_dmux_enum_info,
+                .get = stac92xx_dmux_enum_get,
+                .put = stac92xx_dmux_enum_put,
+        },
+*/ 
+        HDA_CODEC_VOLUME("Capture Volume", 0x09, 0, HDA_OUTPUT),
+        HDA_CODEC_MUTE("Capture Switch", 0x09, 0, HDA_OUTPUT),
+        HDA_CODEC_VOLUME("Capture Mux Volume", 0x0f, 0, HDA_OUTPUT),
+        { } /* end */
+};
+
 static struct snd_kcontrol_new stac925x_mixer[] = {
 	STAC_INPUT_SOURCE(1),
 	HDA_CODEC_VOLUME("Capture Volume", 0x09, 0, HDA_OUTPUT),
@@ -628,6 +741,30 @@ static unsigned int dell9200_m27_pin_configs[8] = {
 };
 
 
+static unsigned int ref9202_pin_configs[9] = {
+        0x01c10014, 0x01410013, 0x01210011, 0x01010012,
+        0x01810022, 0x01a10021, 0x01010031, 0x01310023, 0x01d10024,
+};
+
+static unsigned int test19202_pin_configs[9] = {
+
+        0x01c100f4, 0x014100f3, 0x01010012, 0x01210011,
+        0x01210013, 0x01a10023, 0x01010031, 0x01310015, 0x01d10024,
+
+/*
+
+        0x01c100f4, 0x014100f3, 0x01010012, 0x01010011,
+        0x01810013, 0x01a10023, 0x01010031, 0x01310015, 0x01d10024,
+
+        0x01c10014, 0x01410013, 0x01210011, 0x01010012,
+        0x01810022, 0x01a10021, 0x01010031, 0x01310023, 0x01d10024,
+
+        0x70fff100, 0x70fff100, 0x9717f11f, 0x03214011,
+        0x01810022, 0x01a10021, 0x01010031, 0x01310023, 0x97a00120,
+*/
+
+};
+
 static unsigned int *stac9200_brd_tbl[STAC_9200_MODELS] = {
 	[STAC_REF] = ref9200_pin_configs,
 	[STAC_9200_DELL_D21] = dell9200_d21_pin_configs,
@@ -657,6 +794,16 @@ static const char *stac9200_models[STAC_9200_MODELS] = {
 	[STAC_9200_GATEWAY] = "gateway",
 };
 
+static unsigned int *stac9202_brd_tbl[STAC_9202_MODELS] = {
+	[STAC_REF] = ref9202_pin_configs,
+        [STAC_9202_TEST1] = test19202_pin_configs,
+};
+
+static const char *stac9202_models[STAC_9202_MODELS] = {
+	[STAC_REF] = "ref",
+        [STAC_9202_TEST1] = "test1",
+};
+
 static struct snd_pci_quirk stac9200_cfg_tbl[] = {
 	/* SigmaTel reference board */
 	SND_PCI_QUIRK(PCI_VENDOR_ID_INTEL, 0x2668,
@@ -731,6 +878,14 @@ static struct snd_pci_quirk stac9200_cfg_tbl[] = {
 	{} /* terminator */
 };
 
+static struct snd_pci_quirk stac9202_cfg_tbl[] = {
+        SND_PCI_QUIRK(PCI_VENDOR_ID_INTEL, 0x2668,
+                      "Stac 9202 Ref Config", STAC_REF),
+        SND_PCI_QUIRK(0x8384, 0x7632,
+                      "Stac 9202 Test 1", STAC_9202_TEST1),
+        {}
+};
+
 static unsigned int ref925x_pin_configs[8] = {
 	0x40c003f0, 0x424503f2, 0x01813022, 0x02a19021,
 	0x90a70320, 0x02214210, 0x400003f1, 0x9033032e,
@@ -2178,6 +2333,37 @@ static int stac9200_parse_auto_config(struct hda_codec *codec)
 	return 1;
 }
 
+static int stac9202_parse_auto_config(struct hda_codec *codec)
+{
+	struct sigmatel_spec *spec = codec->spec;
+	int err;
+
+	if ((err = snd_hda_parse_pin_def_config(codec, &spec->autocfg, NULL)) < 0)
+		return err;
+
+	if ((err = stac92xx_auto_create_analog_input_ctls(codec, &spec->autocfg)) < 0)
+		return err;
+
+	if ((err = stac9200_auto_create_hp_ctls(codec, &spec->autocfg)) < 0)
+		return err;
+
+	if ((err = stac9200_auto_create_lfe_ctls(codec, &spec->autocfg)) < 0)
+		return err;
+
+	if (spec->autocfg.dig_out_pin)
+		spec->multiout.dig_out_nid = 0x05;
+	if (spec->autocfg.dig_in_pin)
+		spec->dig_in_nid = 0x04;
+
+	if (spec->kctl_alloc)
+		spec->mixers[spec->num_mixers++] = spec->kctl_alloc;
+
+	spec->input_mux = &spec->private_imux;
+	spec->dinput_mux = &spec->private_dimux;
+
+	return 1;
+}
+
 /*
  * Early 2006 Intel Macintoshes with STAC9220X5 codecs seem to have a
  * funky external mute control using GPIO pins.
@@ -2478,7 +2664,7 @@ static int patch_stac9200(struct hda_codec *codec)
 	return 0;
 }
 
-static int patch_stac925x(struct hda_codec *codec)
+static int patch_stac9202(struct hda_codec *codec)
 {
 	struct sigmatel_spec *spec;
 	int err;
@@ -2488,6 +2674,75 @@ static int patch_stac925x(struct hda_codec *codec)
 		return -ENOMEM;
 
 	codec->spec = spec;
+	spec->num_pins = 9;
+	spec->pin_nids = stac9202_pin_nids;
+	spec->board_config = snd_hda_check_board_config(codec, STAC_9202_MODELS,
+							stac9202_models,
+							stac9202_cfg_tbl);
+	if (spec->board_config < 0) {
+		snd_printdd(KERN_INFO "hda_codec: Unknown model for STAC9202, using BIOS defaults\n");
+		err = stac92xx_save_bios_config_regs(codec);
+		if (err < 0) {
+			stac92xx_free(codec);
+			return err;
+		}
+		spec->pin_configs = spec->bios_pin_configs;
+	} else {
+		spec->pin_configs = stac9202_brd_tbl[spec->board_config];
+		stac92xx_set_config_regs(codec);
+	}
+
+        switch (spec->board_config) {
+        case STAC_9202_TEST1:
+		snd_printdd(KERN_INFO "here in test1 %x\n", spec->board_config);
+                spec->multiout.max_channels = 2;
+                spec->multiout.num_dacs = 1;
+                spec->multiout.dac_nids = stac9202_dac_nids;
+                spec->adc_nids = stac9202_adc_nids;
+                spec->mux_nids = stac9202_mux_nids;
+                spec->dmic_nids = stac9202_dmic_nids;
+                spec->num_dmics = 1;
+		spec->num_muxes = 1;
+                spec->init = stac9202_test1_init;
+                spec->mixer = stac9202_test1_mixer;
+		break;
+        default:
+		snd_printdd(KERN_INFO "here in default %x\n", spec->board_config);
+                spec->multiout.max_channels = 2;
+                spec->multiout.num_dacs = 1;
+                spec->multiout.dac_nids = stac9202_dac_nids;
+                spec->adc_nids = stac9202_adc_nids;
+                spec->mux_nids = stac9202_mux_nids;
+                spec->dmic_nids = stac9202_dmic_nids;
+                spec->num_muxes = 1;
+                spec->num_dmics = 1;
+                spec->init = stac9202_core_init;
+                spec->mixer = stac9202_mixer;
+        }
+
+	err = stac9202_parse_auto_config(codec);
+	if (err < 0) {
+		stac92xx_free(codec);
+		return err;
+	}
+
+	codec->patch_ops = stac92xx_patch_ops;
+
+	return 0;
+}
+
+
+
+static int patch_stac925x(struct hda_codec *codec)
+{
+	struct sigmatel_spec *spec;
+	int err;
+	
+	spec  = kzalloc(sizeof(*spec), GFP_KERNEL);
+	if (spec == NULL)
+		return -ENOMEM;
+
+	codec->spec = spec;
 	spec->num_pins = ARRAY_SIZE(stac925x_pin_nids);
 	spec->pin_nids = stac925x_pin_nids;
 	spec->board_config = snd_hda_check_board_config(codec, STAC_925x_MODELS,
@@ -2530,7 +2785,7 @@ static int patch_stac925x(struct hda_codec *codec)
 
 	spec->init = stac925x_core_init;
 	spec->mixer = stac925x_mixer;
-
+	
 	err = stac92xx_parse_auto_config(codec, 0x8, 0x7);
 	if (!err) {
 		if (spec->board_config < 0) {
@@ -3083,8 +3338,8 @@ struct hda_codec_preset snd_hda_preset_sigmatel[] = {
  	{ .id = 0x83847627, .name = "STAC9271D", .patch = patch_stac927x },
  	{ .id = 0x83847628, .name = "STAC9274X5NH", .patch = patch_stac927x },
  	{ .id = 0x83847629, .name = "STAC9274D5NH", .patch = patch_stac927x },
-	{ .id = 0x83847632, .name = "STAC9202",  .patch = patch_stac925x },
-	{ .id = 0x83847633, .name = "STAC9202D", .patch = patch_stac925x },
+	{ .id = 0x83847632, .name = "STAC9202",  .patch = patch_stac9202 },
+	{ .id = 0x83847633, .name = "STAC9202D", .patch = patch_stac9202 },
 	{ .id = 0x83847634, .name = "STAC9250", .patch = patch_stac925x },
 	{ .id = 0x83847635, .name = "STAC9250D", .patch = patch_stac925x },
 	{ .id = 0x83847636, .name = "STAC9251", .patch = patch_stac925x },
