diff -Naur ubuntu-hardy/arch/x86/mm/init_32-xen.c ubuntu-hardy-xen/arch/x86/mm/init_32-xen.c
--- ubuntu-hardy/arch/x86/mm/init_32-xen.c	2008-02-19 16:51:30.000000000 -0500
+++ ubuntu-hardy-xen/arch/x86/mm/init_32-xen.c	2008-02-19 19:05:52.000000000 -0500
@@ -270,22 +270,48 @@
 	}
 
 	for (i = 0; i < e820.nr_map; i++) {
-
-		if (e820.map[i].type != E820_RAM)	/* not usable memory */
+		/*
+		 * Not usable memory:
+		 */
+		if (e820.map[i].type != E820_RAM)
 			continue;
+		addr = (e820.map[i].addr + PAGE_SIZE-1) >> PAGE_SHIFT;
+		end = (e820.map[i].addr + e820.map[i].size) >> PAGE_SHIFT;
+
 		/*
-		 *	!!!FIXME!!! Some BIOSen report areas as RAM that
-		 *	are not. Notably the 640->1Mb area. We need a sanity
-		 *	check here.
+		 * Sanity check: Some BIOSen report areas as RAM that
+		 * are not. Notably the 640->1Mb area, which is the
+		 * PCI BIOS area.
 		 */
-		addr = (e820.map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
-		end = (e820.map[i].addr+e820.map[i].size) >> PAGE_SHIFT;
-		if  ((pagenr >= addr) && (pagenr < end))
+		if (addr >= (BIOS_BEGIN >> PAGE_SHIFT) &&
+		    end < (BIOS_END >> PAGE_SHIFT))
+			continue;
+
+		if ((pagenr >= addr) && (pagenr < end))
 			return 1;
 	}
 	return 0;
 }
 
+/*
+ * devmem_is_allowed() checks to see if /dev/mem access to a certain address
+ * is valid. The argument is a physical page number.
+ *
+ *
+ * On x86, access has to be given to the first megabyte of ram because that area
+ * contains bios code and data regions used by X and dosemu and similar apps.
+ * Access has to be given to non-kernel-ram areas as well, these contain the PCI
+ * mmio resources as well as potential bios/acpi data regions.
+ */
+int devmem_is_allowed(unsigned long pagenr)
+{
+	if (pagenr <= 256)
+		return 1;
+	if (!page_is_ram(pagenr))
+		return 1;
+	return 0;
+}
+
 #ifdef CONFIG_HIGHMEM
 pte_t *kmap_pte;
 pgprot_t kmap_prot;
diff -Naur ubuntu-hardy/arch/x86/mm/init_64-xen.c ubuntu-hardy-xen/arch/x86/mm/init_64-xen.c
--- ubuntu-hardy/arch/x86/mm/init_64-xen.c	2008-02-19 16:51:30.000000000 -0500
+++ ubuntu-hardy-xen/arch/x86/mm/init_64-xen.c	2008-02-19 19:14:41.000000000 -0500
@@ -29,6 +29,7 @@
 #include <linux/poison.h>
 #include <linux/dma-mapping.h>
 #include <linux/module.h>
+#include <linux/efi.h>
 #include <linux/memory_hotplug.h>
 #include <linux/nmi.h>
 
@@ -936,6 +937,71 @@
 }
 #endif
 
+int page_is_ram(unsigned long pagenr)
+{
+	int i;
+	unsigned long addr, end;
+
+	if (efi_enabled) {
+		efi_memory_desc_t *md;
+		void *p;
+
+		for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
+			md = p;
+			if (!is_available_memory(md))
+				continue;
+			addr = (md->phys_addr+PAGE_SIZE-1) >> PAGE_SHIFT;
+			end = (md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT)) >> PAGE_SHIFT;
+
+			if ((pagenr >= addr) && (pagenr < end))
+				return 1;
+		}
+		return 0;
+	}
+
+	for (i = 0; i < e820.nr_map; i++) {
+		/*
+		 * Not usable memory:
+		 */
+		if (e820.map[i].type != E820_RAM)
+			continue;
+		addr = (e820.map[i].addr + PAGE_SIZE-1) >> PAGE_SHIFT;
+		end = (e820.map[i].addr + e820.map[i].size) >> PAGE_SHIFT;
+
+		/*
+		 * Sanity check: Some BIOSen report areas as RAM that
+		 * are not. Notably the 640->1Mb area, which is the
+		 * PCI BIOS area.
+		 */
+		if (addr >= (BIOS_BEGIN >> PAGE_SHIFT) &&
+		    end < (BIOS_END >> PAGE_SHIFT))
+			continue;
+
+		if ((pagenr >= addr) && (pagenr < end))
+			return 1;
+	}
+	return 0;
+}
+
+/*
+ * devmem_is_allowed() checks to see if /dev/mem access to a certain address
+ * is valid. The argument is a physical page number.
+ *
+ *
+ * On x86, access has to be given to the first megabyte of ram because that area
+ * contains bios code and data regions used by X and dosemu and similar apps.
+ * Access has to be given to non-kernel-ram areas as well, these contain the PCI
+ * mmio resources as well as potential bios/acpi data regions.
+ */
+int devmem_is_allowed(unsigned long pagenr)
+{
+	if (pagenr <= 256)
+		return 1;
+	if (!page_is_ram(pagenr))
+		return 1;
+	return 0;
+}
+
 static struct kcore_list kcore_mem, kcore_vmalloc, kcore_kernel, kcore_modules,
 			 kcore_vsyscall;
 
diff -Naur ubuntu-hardy/include/asm-x86/mach-xen/asm/e820.h ubuntu-hardy-xen/include/asm-x86/mach-xen/asm/e820.h
--- ubuntu-hardy/include/asm-x86/mach-xen/asm/e820.h	2008-02-19 16:51:30.000000000 -0500
+++ ubuntu-hardy-xen/include/asm-x86/mach-xen/asm/e820.h	2008-02-19 19:11:49.000000000 -0500
@@ -22,6 +22,9 @@
 };
 #endif /* __ASSEMBLY__ */
 
+#define BIOS_BEGIN             0x000a0000
+#define BIOS_END               0x00100000
+
 #ifdef __KERNEL__
 #ifdef CONFIG_X86_32
 # include "../../e820_32.h"
diff -Naur ubuntu-hardy/include/asm-x86/mach-xen/asm/page_32.h ubuntu-hardy-xen/include/asm-x86/mach-xen/asm/page_32.h
--- ubuntu-hardy/include/asm-x86/mach-xen/asm/page_32.h	2008-02-19 16:51:30.000000000 -0500
+++ ubuntu-hardy-xen/include/asm-x86/mach-xen/asm/page_32.h	2008-02-19 19:13:44.000000000 -0500
@@ -237,6 +237,7 @@
 extern int sysctl_legacy_va_layout;
 
 extern int page_is_ram(unsigned long pagenr);
+extern int devmem_is_allowed(unsigned long pagenr);
 
 #endif /* __ASSEMBLY__ */
 
diff -Naur ubuntu-hardy/include/asm-x86/mach-xen/asm/page_64.h ubuntu-hardy-xen/include/asm-x86/mach-xen/asm/page_64.h
--- ubuntu-hardy/include/asm-x86/mach-xen/asm/page_64.h	2008-02-19 16:51:30.000000000 -0500
+++ ubuntu-hardy-xen/include/asm-x86/mach-xen/asm/page_64.h	2008-02-19 19:13:56.000000000 -0500
@@ -68,6 +68,9 @@
 void clear_page(void *);
 void copy_page(void *, void *);
 
+extern int page_is_ram(unsigned long pagenr);
+extern int devmem_is_allowed(unsigned long pagenr);
+
 #define clear_user_page(page, vaddr, pg)	clear_page(page)
 #define copy_user_page(to, from, vaddr, pg)	copy_page(to, from)
