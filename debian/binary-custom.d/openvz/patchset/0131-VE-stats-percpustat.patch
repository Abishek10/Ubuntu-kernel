From 6f4e06fb71e31e07621390434472a1ce59d667ab Mon Sep 17 00:00:00 2001
From: Denis Lunev <den@openvz.org>
Date: Thu, 7 Aug 2008 20:54:20 +0400
Subject: [PATCH 131/131] VE stats percpustat

Decrease ve_struct size in case of huge NR_CPUS
kstat_lat_pcpu_struct contains array of NR_CPUS elements.
Replace it with alloc_percpu data which helps to keep ve_struct
relatively small and prevents allocation fails of huge order.

Mostly relevant to IA64, where NR_CPUS=1024

Bug #97575
---
 include/linux/vzstat.h |    8 ++++----
 kernel/sched.c         |    7 +++++++
 kernel/ve/ve.c         |    5 ++++-
 kernel/ve/vecalls.c    |   13 ++++++++++++-
 4 files changed, 27 insertions(+), 6 deletions(-)

Index: kernel/include/linux/vzstat.h
===================================================================
--- kernel.orig/include/linux/vzstat.h	2008-11-24 15:47:46.000000000 +0100
+++ kernel/include/linux/vzstat.h	2008-11-24 16:01:59.000000000 +0100
@@ -36,7 +36,7 @@
 	cycles_t avg[3];
 };
 struct kstat_lat_pcpu_struct {
-	struct kstat_lat_pcpu_snap_struct cur[NR_CPUS];
+	struct kstat_lat_pcpu_snap_struct *cur;
 	cycles_t max_snap;
 	struct kstat_lat_snap_struct last;
 	cycles_t avg[3];
@@ -121,7 +121,7 @@
 {
 	struct kstat_lat_pcpu_snap_struct *cur;
 
-	cur = &p->cur[cpu];
+	cur = per_cpu_ptr(p->cur, cpu);
 	write_seqcount_begin(&cur->lock);
 	cur->count++;
 	if (cur->maxlat < dur)
@@ -152,8 +152,8 @@
 	cycles_t m;
 
 	memset(&p->last, 0, sizeof(p->last));
-	for (cpu = 0; cpu < NR_CPUS; cpu++) {
-		cur = &p->cur[cpu];
+	for_each_online_cpu(cpu) {
+		cur = per_cpu_ptr(p->cur, cpu);
 		do {
 			i = read_seqcount_begin(&cur->lock);
 			memcpy(&snap, cur, sizeof(snap));
Index: kernel/kernel/sched.c
===================================================================
--- kernel.orig/kernel/sched.c	2008-11-24 15:57:08.000000000 +0100
+++ kernel/kernel/sched.c	2008-11-24 16:01:59.000000000 +0100
@@ -385,7 +385,12 @@
 #endif
 }
 
+#ifdef CONFIG_SMP
+static struct percpu_data kstat_lat_pcpu_stats;
+#endif
+static struct kstat_lat_pcpu_snap_struct kstat_lat_pcpu_stats_data[NR_CPUS];
 struct kernel_stat_glob kstat_glob;
+
 DEFINE_SPINLOCK(kstat_glb_lock);
 EXPORT_SYMBOL(kstat_glob);
 EXPORT_SYMBOL(kstat_glb_lock);
@@ -7167,6 +7172,8 @@
 	int highest_cpu = 0;
 	int i, j;
 
+	kstat_glob.sched_lat.cur = static_percpu_ptr(&kstat_lat_pcpu_stats,
+			kstat_lat_pcpu_stats_data);
 	for_each_possible_cpu(i) {
 		struct rt_prio_array *array;
 		struct rq *rq;
Index: kernel/kernel/ve/ve.c
===================================================================
--- kernel.orig/kernel/ve/ve.c	2008-11-24 16:00:05.000000000 +0100
+++ kernel/kernel/ve/ve.c	2008-11-24 16:01:59.000000000 +0100
@@ -120,9 +120,10 @@
 #ifdef CONFIG_SMP
 static struct {
 	void *ptrs[NR_CPUS];
-} ve0_cpu_stats;
+} ve0_cpu_stats, ve0_lat_pcpu_stats;
 #endif
 static struct ve_cpu_stats ve0_cpu_stats_data[NR_CPUS];
+static struct kstat_lat_pcpu_snap_struct ve0_lat_pcpu_stats_data[NR_CPUS];
 
 LIST_HEAD(ve_list_head);
 rwlock_t ve_list_lock = RW_LOCK_UNLOCKED;
@@ -147,6 +148,8 @@
 
 	ve->cpu_stats = static_percpu_ptr(&ve0_cpu_stats,
 			ve0_cpu_stats_data);
+	ve->sched_lat_ve.cur = static_percpu_ptr(&ve0_lat_pcpu_stats,
+			ve0_lat_pcpu_stats_data);
 
 	list_add(&ve->ve_list, &ve_list_head);
 }
Index: kernel/kernel/ve/vecalls.c
===================================================================
--- kernel.orig/kernel/ve/vecalls.c	2008-11-24 16:01:56.000000000 +0100
+++ kernel/kernel/ve/vecalls.c	2008-11-24 16:01:59.000000000 +0100
@@ -1374,13 +1374,24 @@
 static inline int init_ve_cpustats(struct ve_struct *ve)
 {
 	ve->cpu_stats = alloc_percpu(struct ve_cpu_stats);
-	return ve->cpu_stats == NULL ? -ENOMEM : 0;
+	if (ve->cpu_stats == NULL)
+		return -ENOMEM;
+	ve->sched_lat_ve.cur = alloc_percpu(struct kstat_lat_pcpu_snap_struct);
+	if (ve->sched_lat_ve.cur == NULL)
+		goto fail;
+	return 0;
+
+fail:
+	free_percpu(ve->cpu_stats);
+	return -ENOMEM;
 }
 
 static inline void free_ve_cpustats(struct ve_struct *ve)
 {
 	free_percpu(ve->cpu_stats);
 	ve->cpu_stats = NULL;
+	free_percpu(ve->sched_lat_ve.cur);
+	ve->sched_lat_ve.cur = NULL;
 }
 
 static int alone_in_pgrp(struct task_struct *tsk)
