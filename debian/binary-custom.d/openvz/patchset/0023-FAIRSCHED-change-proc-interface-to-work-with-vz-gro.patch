From b89e74dc201e5943b79051f7f0c61b2c39d4d244 Mon Sep 17 00:00:00 2001
From: Konstantin Khlebnikov <khlebnikov@openvz.org>
Date: Wed, 12 Mar 2008 18:18:14 +0300
Subject: [PATCH 23/48] FAIRSCHED: change proc interface to work with vz groups

Show weight and rate limit from fairsched_node.
CFS internals are different, so show (start_tag, value, delay) fields as zeros.
---
 include/linux/fairsched.h |    2 +
 init/main.c               |    2 +
 kernel/vzfairsched.c      |   89 ++++++++++++++++++++-------------------------
 3 files changed, 44 insertions(+), 49 deletions(-)

Index: kernel/include/linux/fairsched.h
===================================================================
--- kernel.orig/include/linux/fairsched.h	2008-11-24 15:57:19.000000000 +0100
+++ kernel/include/linux/fairsched.h	2008-11-24 15:57:27.000000000 +0100
@@ -39,6 +39,7 @@
 extern struct fairsched_node fairsched_init_node;
 
 void fairsched_init_early(void);
+void fairsched_init_late(void);
 
 static inline int task_fairsched_node_id(struct task_struct *p)
 {
@@ -72,6 +73,7 @@
 #else /* CONFIG_VZ_FAIRSCHED */
 
 static inline void fairsched_init_early(void) { }
+static inline void fairsched_init_late(void) { }
 static inline int task_fairsched_node_id(struct task_struct *p) { return 0; }
 static inline void get_task_fairsched_node(struct task_struct *p) { }
 static inline void put_task_fairsched_node(struct task_struct *p) { }
Index: kernel/init/main.c
===================================================================
--- kernel.orig/init/main.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/init/main.c	2008-11-24 15:57:27.000000000 +0100
@@ -57,6 +57,7 @@
 #include <linux/device.h>
 #include <linux/kthread.h>
 #include <linux/sched.h>
+#include <linux/fairsched.h>
 
 #include <bc/beancounter.h>
 
@@ -865,6 +866,7 @@
 	do_pre_smp_initcalls();
 
 	smp_init();
+	fairsched_init_late();
 	sched_init_smp();
 
 	cpuset_init_smp();
Index: kernel/kernel/vzfairsched.c
===================================================================
--- kernel.orig/kernel/vzfairsched.c	2008-11-24 15:57:26.000000000 +0100
+++ kernel/kernel/vzfairsched.c	2008-11-24 15:57:27.000000000 +0100
@@ -337,37 +337,31 @@
  */
 /*********************************************************************/
 
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/vmalloc.h>
+
 struct fairsched_node_dump {
-#ifdef CONFIG_VE
-	envid_t veid;
-#endif
 	int id;
 	unsigned weight;
 	unsigned rate;
-	unsigned rate_limited : 1,
-		 delayed : 1;
-	fschtag_t start_tag;
-	fschvalue_t value;
-	cycles_t delay;
-	int nr_ready;
-	int nr_runnable;
+	int rate_limited;
 	int nr_pcpu;
 	int nr_tasks, nr_runtasks;
 };
 
 struct fairsched_dump {
-	int len, compat;
+	int len;
 	struct fairsched_node_dump nodes[0];
 };
 
 static struct fairsched_dump *fairsched_do_dump(int compat)
 {
 	int nr_nodes;
-	int len, i;
+	int len;
 	struct fairsched_dump *dump;
 	struct fairsched_node *node;
 	struct fairsched_node_dump *p;
-	unsigned long flags;
 
 start:
 	nr_nodes = (ve_is_super(get_exec_env()) ? fairsched_nr_nodes + 16 : 1);
@@ -376,7 +370,7 @@
 	if (dump == NULL)
 		goto out;
 
-	spin_lock_irqsave(&fairsched_lock, flags);
+	mutex_lock(&fairsched_mutex);
 	if (ve_is_super(get_exec_env()) && nr_nodes < fairsched_nr_nodes)
 		goto repeat;
 	p = dump->nodes;
@@ -388,39 +382,24 @@
 #ifdef CONFIG_VE
 		if (!ve_accessible(node->owner_env, get_exec_env()))
 			continue;
-		p->veid = node->owner_env->veid;
-		if (compat) {
-			p->nr_tasks = atomic_read(&node->owner_env->pcounter);
-			for_each_online_cpu(i)
-				p->nr_runtasks +=
-					VE_CPU_STATS(node->owner_env, i)
-								->nr_running;
-			if (p->nr_runtasks < 0)
-				p->nr_runtasks = 0;
-		}
+		p->nr_tasks = atomic_read(&node->owner_env->pcounter);
+		p->nr_runtasks = nr_running_ve(node->owner_env);
 #endif
 		p->id = node->id;
 		p->weight = node->weight;
 		p->rate = node->rate;
 		p->rate_limited = node->rate_limited;
-		p->delayed = node->delayed;
-		p->start_tag = node->start_tag;
-		p->value = node->value;
-		p->delay = node->delay;
-		p->nr_ready = node->nr_ready;
-		p->nr_runnable = node->nr_runnable;
-		p->nr_pcpu = node->nr_pcpu;
+		p->nr_pcpu = num_online_cpus();
 		p++;
 	}
 	dump->len = p - dump->nodes;
-	dump->compat = compat;
-	spin_unlock_irqrestore(&fairsched_lock, flags);
+	mutex_unlock(&fairsched_mutex);
 
 out:
 	return dump;
 
 repeat:
-	spin_unlock_irqrestore(&fairsched_lock, flags);
+	mutex_unlock(&fairsched_mutex);
 	vfree(dump);
 	goto start;
 }
@@ -429,7 +408,7 @@
 
 #define FAIRSHED_DEBUG          " debug"
 
-#if defined(CONFIG_VE)
+#ifdef CONFIG_VE
 /*
  * File format is dictated by compatibility reasons.
  */
@@ -451,7 +430,7 @@
 				       "    parent "
 				       "weight "
 				       " rate "
-  				       "tasks "
+				       "tasks "
 				       "  run "
 				       "cpus"
 				       " "
@@ -491,12 +470,9 @@
 			       p->nr_runtasks,
 			       p->nr_pcpu,
 			       p->rate_limited ? 'L' : '.',
-			       p->delayed ? 'D' : '.',
-			       p->nr_ready,
-			       (unsigned long long)p->start_tag.t,
-			       (unsigned long long)p->value.v,
-			       (unsigned long long)p->delay
-			       );
+			       '.',
+			       p->nr_runtasks,
+			       0ll, 0ll, 0ll);
 	}
 
 	return 0;
@@ -523,7 +499,7 @@
 	++*pos;
 	return fairsched_seq_start(m, pos);
 }
-#endif
+#endif /* CONFIG_VE */
 
 static int fairsched2_seq_show(struct seq_file *m, void *v)
 {
@@ -563,16 +539,14 @@
 			       p->id,
 			       p->weight,
 			       p->rate,
-			       p->nr_runnable,
+			       p->nr_runtasks,
 			       p->nr_pcpu
 #ifdef FAIRSHED_DEBUG
 			       ,
 			       p->rate_limited ? 'L' : '.',
-			       p->delayed ? 'D' : '.',
-			       p->nr_ready,
-			       (unsigned long long)p->start_tag.t,
-			       (unsigned long long)p->value.v,
-			       (unsigned long long)p->delay
+			       '.',
+			       p->nr_runtasks,
+			       0ll, 0ll, 0ll
 #endif
 			       );
 	}
@@ -654,4 +628,21 @@
 	.release	= fairsched_seq_release
 };
 
+void __init fairsched_init_late(void)
+{
+	struct proc_dir_entry *entry;
+#ifdef CONFIG_VE
+	entry = create_proc_glob_entry("fairsched", S_IRUGO, NULL);
+	if (entry)
+		entry->proc_fops = &proc_fairsched_operations;
+#endif
+	entry = create_proc_glob_entry("fairsched2", S_IRUGO, NULL);
+	if (entry)
+		entry->proc_fops = &proc_fairsched_operations;
+}
+
+#else
+
+void __init fairsched_init_late(void) { }
+
 #endif /* CONFIG_PROC_FS */
