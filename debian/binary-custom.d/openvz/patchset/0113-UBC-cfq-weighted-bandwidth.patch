From e7c95bcf3a2478d1f8b8e9021c7b5035f386f732 Mon Sep 17 00:00:00 2001
From: Konstantin Khlebnikov <khlebnikov@openvz.org>
Date: Fri, 18 Jul 2008 15:25:46 +0400
Subject: [PATCH 113/131] UBC cfq weighted bandwidth

Implement bandwidth distribution control based
on per ioprio iotime ratio coefficient.

It works like bc iotime flows with different speed, depends on ioprio.
BC with lower IO priority faster sink in queue and got less bandwidth.

Ratio coefficients selected to conform with bandwidth distribution in
previous implementation: ratio = 100./(1+ioprio/7.)

ioprio 0 -> ratio 100 -> weight 1
ioprio 7 -> ratio  50 -> weight 2
---
 kernel/bc/io_prio.c |   11 ++++++++++-
 1 files changed, 10 insertions(+), 1 deletions(-)

diff --git a/kernel/bc/io_prio.c b/kernel/bc/io_prio.c
index ef6982d..d3a39e5 100644
--- a/kernel/bc/io_prio.c
+++ b/kernel/bc/io_prio.c
@@ -19,6 +19,11 @@
 #include <bc/proc.h>
 #include <linux/blkdev.h>
 
+#define BC_MAX_RATIO	100
+
+/* bc bandwidth inversely proportional coefficient per ioprio */
+static int bc_ioprio_ratio[CFQ_PRIO_LISTS] = {100, 87, 77, 70, 63, 58, 53, 50};
+
 struct cfq_bc_data *__find_cfq_bc(struct ub_iopriv *iopriv,
 							struct cfq_data *cfqd)
 {
@@ -223,7 +228,7 @@ static void bc_enqueue(struct cfq_data *cfqd, struct cfq_bc_data *cfq_bc)
 	unsigned long iotime, slice, position;
 
 	iotime = cfq_bc->cfq_bc_iotime;
-	slice = cfqd->cfq_ub_slice * 2;
+	slice = cfqd->cfq_ub_slice * BC_MAX_RATIO;
 	position = cfqd->cfq_bc_position;
 
 	/* adjust iotime to hit in interval position +/- maximum slice */
@@ -243,6 +248,10 @@ static void bc_dequeue(struct cfq_data *cfqd, struct cfq_bc_data *cfq_bc)
 static void bc_update(struct cfq_data *cfqd, struct cfq_bc_data *cfq_bc,
 		unsigned long delta)
 {
+	int ioprio;
+
+	ioprio = cfq_bc->ub_iopriv->ioprio;
+	delta *= bc_ioprio_ratio[ioprio];
 	cfq_bc->cfq_bc_iotime += delta;
 
 	if (!cfq_bc->rqnum)
-- 
1.5.4.3

