From dbf8e04245347b6f4c984aefdc99cd57c0abf065 Mon Sep 17 00:00:00 2001
From: Alexey Dobriyan <adobriyan@openvz.org>
Date: Mon, 9 Jun 2008 15:46:39 +0400
Subject: [PATCH] VE introduce ->ve_netns

Preparations for fixing "NULL ->ve_ns" oops in inet6_rt_notify().
---
 drivers/net/tun.c                                  |    2 +-
 drivers/net/venet_core.c                           |    4 +-
 drivers/net/vzethdev.c                             |    2 +-
 include/linux/ve.h                                 |    1 +
 kernel/cpt/cpt_dump.c                              |    2 +-
 kernel/cpt/cpt_net.c                               |    4 +-
 kernel/cpt/rst_net.c                               |    6 ++--
 kernel/ve/ve.c                                     |    1 +
 kernel/ve/vecalls.c                                |    7 +++--
 net/8021q/vlan.c                                   |    2 +-
 net/8021q/vlanproc.c                               |    4 +-
 net/bridge/br_netlink.c                            |    2 +-
 net/core/fib_rules.c                               |    2 +-
 net/ipv4/arp.c                                     |    4 +-
 net/ipv4/devinet.c                                 |   16 +++++++-------
 net/ipv4/fib_frontend.c                            |    2 +-
 net/ipv4/fib_semantics.c                           |    6 ++--
 net/ipv4/icmp.c                                    |    2 +-
 net/ipv4/igmp.c                                    |    4 +-
 net/ipv4/ip_fragment.c                             |    2 +-
 net/ipv4/ip_gre.c                                  |    4 +-
 net/ipv4/ip_sockglue.c                             |    2 +-
 net/ipv4/ipconfig.c                                |    2 +-
 net/ipv4/ipip.c                                    |    4 +-
 net/ipv4/ipmr.c                                    |    2 +-
 net/ipv4/ipvs/ip_vs_sync.c                         |    8 +++---
 net/ipv4/netfilter/ipt_CLUSTERIP.c                 |    2 +-
 net/ipv4/netfilter/ipt_recent.c                    |    4 +-
 .../netfilter/nf_conntrack_l3proto_ipv4_compat.c   |    4 +-
 net/ipv4/route.c                                   |   10 ++++----
 net/ipv6/addrconf.c                                |   22 ++++++++++----------
 net/ipv6/af_inet6.c                                |    2 +-
 net/ipv6/anycast.c                                 |   12 +++++-----
 net/ipv6/datagram.c                                |    2 +-
 net/ipv6/ipv6_sockglue.c                           |    2 +-
 net/ipv6/mcast.c                                   |   12 +++++-----
 net/ipv6/raw.c                                     |    2 +-
 net/ipv6/reassembly.c                              |    2 +-
 net/ipv6/route.c                                   |   10 ++++----
 net/ipv6/sit.c                                     |    8 +++---
 net/netfilter/nf_conntrack_standalone.c            |    4 +-
 net/netfilter/xt_hashlimit.c                       |    4 +-
 42 files changed, 101 insertions(+), 98 deletions(-)

Index: kernel/drivers/net/tun.c
===================================================================
--- kernel.orig/drivers/net/tun.c	2008-11-24 15:59:11.000000000 +0100
+++ kernel/drivers/net/tun.c	2008-11-24 16:08:08.000000000 +0100
@@ -495,7 +495,7 @@
 
 static int tun_set_iff(struct file *file, struct ifreq *ifr)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct tun_struct *tun;
 	struct net_device *dev;
 	int err;
Index: kernel/drivers/net/venet_core.c
===================================================================
--- kernel.orig/drivers/net/venet_core.c	2008-11-24 16:01:57.000000000 +0100
+++ kernel/drivers/net/venet_core.c	2008-11-24 16:08:08.000000000 +0100
@@ -374,7 +374,7 @@
 
 		ve_old = set_exec_env(ve);
 		read_lock(&dev_base_lock);
-		for_each_netdev(ve->ve_ns->net_ns, dev) {
+		for_each_netdev(ve->ve_netns, dev) {
 			if (dev->hard_start_xmit == venet_xmit)
 				ret = fop(dev, data);
 		}
@@ -630,7 +630,7 @@
 	dev_venet = alloc_netdev(0, "venet%d", venet_setup);
 	if (!dev_venet)
 		return -ENOMEM;
-	dev_venet->nd_net = ve->ve_ns->net_ns;
+	dev_venet->nd_net = ve->ve_netns;
 	err = dev_alloc_name(dev_venet, dev_venet->name);
 	if (err<0)
 		goto err;
Index: kernel/drivers/net/vzethdev.c
===================================================================
--- kernel.orig/drivers/net/vzethdev.c	2008-11-24 15:59:31.000000000 +0100
+++ kernel/drivers/net/vzethdev.c	2008-11-24 16:08:08.000000000 +0100
@@ -609,7 +609,7 @@
 	dev = alloc_netdev(sizeof(struct veth_struct), name, veth_setup);
 	if (!dev)
 		return ERR_PTR(-ENOMEM);
-	dev->nd_net = get_exec_env()->ve_ns->net_ns;
+	dev->nd_net = get_exec_env()->ve_netns;
 	if (strchr(dev->name, '%')) {
 		err = dev_alloc_name(dev, dev->name);
 		if (err < 0)
Index: kernel/include/linux/ve.h
===================================================================
--- kernel.orig/include/linux/ve.h	2008-11-24 16:01:25.000000000 +0100
+++ kernel/include/linux/ve.h	2008-11-24 16:08:08.000000000 +0100
@@ -342,6 +342,7 @@
 #endif
 
 	struct nsproxy		*ve_ns;
+	struct net		*ve_netns;
 #ifdef CONFIG_GRKERNSEC
 	struct {
 		int		lock;
Index: kernel/kernel/cpt/cpt_dump.c
===================================================================
--- kernel.orig/kernel/cpt/cpt_dump.c	2008-11-24 16:00:38.000000000 +0100
+++ kernel/kernel/cpt/cpt_dump.c	2008-11-24 16:08:08.000000000 +0100
@@ -1035,7 +1035,7 @@
 
 static void check_unsupported_netdevices(struct cpt_context *ctx, __u32 *caps)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device *dev;
 
 	read_lock(&dev_base_lock);
Index: kernel/kernel/cpt/cpt_net.c
===================================================================
--- kernel.orig/kernel/cpt/cpt_net.c	2008-11-24 16:00:36.000000000 +0100
+++ kernel/kernel/cpt/cpt_net.c	2008-11-24 16:08:08.000000000 +0100
@@ -153,7 +153,7 @@
 
 int cpt_dump_link(struct cpt_context * ctx)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device *dev;
 
 	cpt_open_section(ctx, CPT_SECT_NET_DEVICE);
@@ -237,7 +237,7 @@
 
 int cpt_dump_ifaddr(struct cpt_context * ctx)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device *dev;
 
 	cpt_open_section(ctx, CPT_SECT_NET_IFADDR);
Index: kernel/kernel/cpt/rst_net.c
===================================================================
--- kernel.orig/kernel/cpt/rst_net.c	2008-11-24 16:01:08.000000000 +0100
+++ kernel/kernel/cpt/rst_net.c	2008-11-24 16:08:08.000000000 +0100
@@ -48,7 +48,7 @@
 
 int rst_restore_ifaddr(struct cpt_context *ctx)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	int err;
 	loff_t sec = ctx->sections[CPT_SECT_NET_IFADDR];
 	loff_t endsec;
@@ -408,7 +408,7 @@
 {
 	struct cpt_netstats_image *n;
 	struct net_device_stats *stats = NULL;
-	struct net_device *lo = get_exec_env()->ve_ns->net_ns->loopback_dev;
+	struct net_device *lo = get_exec_env()->ve_netns->loopback_dev;
 	int err;
 
 	if (!dev->get_stats)
@@ -472,7 +472,7 @@
 
 int rst_restore_netdev(struct cpt_context *ctx)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	int err;
 	loff_t sec = ctx->sections[CPT_SECT_NET_DEVICE];
 	loff_t endsec;
Index: kernel/kernel/ve/ve.c
===================================================================
--- kernel.orig/kernel/ve/ve.c	2008-11-24 16:01:59.000000000 +0100
+++ kernel/kernel/ve/ve.c	2008-11-24 16:08:08.000000000 +0100
@@ -111,6 +111,7 @@
 	.devpts_config		= &devpts_config,
 #endif
 	.ve_ns			= &init_nsproxy,
+	.ve_netns		= &init_net,
 	.is_running		= 1,
 	.op_sem			= __RWSEM_INITIALIZER(ve0.op_sem),
 };
Index: kernel/kernel/ve/vecalls.c
===================================================================
--- kernel.orig/kernel/ve/vecalls.c	2008-11-24 16:01:59.000000000 +0100
+++ kernel/kernel/ve/vecalls.c	2008-11-24 16:08:08.000000000 +0100
@@ -991,6 +991,7 @@
 
 	put_nsproxy(ve->ve_ns);
 	ve->ve_ns = get_nsproxy(tsk->nsproxy);
+	ve->ve_netns = ve->ve_ns->net_ns;
 	*old = cur;
 	return 0;
 }
@@ -2156,7 +2157,7 @@
 	if (dst_ve == NULL)
 		goto out;
 
-	dst_net = dst_ve->ve_ns->net_ns;
+	dst_net = dst_ve->ve_netns;
 
 	rtnl_lock();
 	read_lock(&dev_base_lock);
@@ -2189,7 +2190,7 @@
 	if (src_ve == NULL)
 		goto out;
 
-	src_net = src_ve->ve_ns->net_ns;
+	src_net = src_ve->ve_netns;
 
 	rtnl_lock();
 
@@ -2228,7 +2229,7 @@
 
 static void ve_mapped_devs_cleanup(struct ve_struct *ve)
 {
-	struct net *net = ve->ve_ns->net_ns;
+	struct net *net = ve->ve_netns;
 	struct net_device *dev, *next;
 	int rv;
 
Index: kernel/net/8021q/vlan.c
===================================================================
--- kernel.orig/net/8021q/vlan.c	2008-11-24 16:00:29.000000000 +0100
+++ kernel/net/8021q/vlan.c	2008-11-24 16:08:08.000000000 +0100
@@ -604,7 +604,7 @@
 	if (new_dev == NULL)
 		return -ENOBUFS;
 
-	new_dev->nd_net = get_exec_env()->ve_ns->net_ns;
+	new_dev->nd_net = get_exec_env()->ve_netns;
 	/* need 4 bytes for extra VLAN header info,
 	 * hope the underlying device can handle it.
 	 */
Index: kernel/net/8021q/vlanproc.c
===================================================================
--- kernel.orig/net/8021q/vlanproc.c	2008-11-24 16:00:29.000000000 +0100
+++ kernel/net/8021q/vlanproc.c	2008-11-24 16:08:08.000000000 +0100
@@ -166,7 +166,7 @@
 
 void vlan_proc_cleanup(void)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 
 	if (proc_vlan_conf)
 		remove_proc_entry(name_conf, proc_vlan_dir);
@@ -185,7 +185,7 @@
 
 int vlan_proc_init(void)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 
 	proc_vlan_dir = proc_mkdir(name_root, net->proc_net);
 	if (proc_vlan_dir) {
Index: kernel/net/bridge/br_netlink.c
===================================================================
--- kernel.orig/net/bridge/br_netlink.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/bridge/br_netlink.c	2008-11-24 16:08:08.000000000 +0100
@@ -82,7 +82,7 @@
  */
 void br_ifinfo_notify(int event, struct net_bridge_port *port)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
 
Index: kernel/net/core/fib_rules.c
===================================================================
--- kernel.orig/net/core/fib_rules.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/core/fib_rules.c	2008-11-24 16:08:08.000000000 +0100
@@ -575,7 +575,7 @@
 			       struct fib_rules_ops *ops, struct nlmsghdr *nlh,
 			       u32 pid)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
 
Index: kernel/net/ipv4/arp.c
===================================================================
--- kernel.orig/net/ipv4/arp.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/arp.c	2008-11-24 16:08:08.000000000 +0100
@@ -961,7 +961,7 @@
 		if (mask && mask != htonl(0xFFFFFFFF))
 			return -EINVAL;
 		if (!dev && (r->arp_flags & ATF_COM)) {
-			dev = dev_getbyhwaddr(get_exec_env()->ve_ns->net_ns, r->arp_ha.sa_family, r->arp_ha.sa_data);
+			dev = dev_getbyhwaddr(get_exec_env()->ve_netns, r->arp_ha.sa_family, r->arp_ha.sa_data);
 			if (!dev)
 				return -ENODEV;
 		}
@@ -1150,7 +1150,7 @@
 	rtnl_lock();
 	if (r.arp_dev[0]) {
 		err = -ENODEV;
-		if ((dev = __dev_get_by_name(get_exec_env()->ve_ns->net_ns, r.arp_dev)) == NULL)
+		if ((dev = __dev_get_by_name(get_exec_env()->ve_netns, r.arp_dev)) == NULL)
 			goto out;
 
 		/* Mmmm... It is wrong... ARPHRD_NETROM==0 */
Index: kernel/net/ipv4/devinet.c
===================================================================
--- kernel.orig/net/ipv4/devinet.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/ipv4/devinet.c	2008-11-24 16:08:08.000000000 +0100
@@ -427,7 +427,7 @@
 	struct net_device *dev;
 	struct in_device *in_dev = NULL;
 	read_lock(&dev_base_lock);
-	dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifindex);
+	dev = __dev_get_by_index(get_exec_env()->ve_netns, ifindex);
 	if (dev)
 		in_dev = in_dev_get(dev);
 	read_unlock(&dev_base_lock);
@@ -514,7 +514,7 @@
 		goto errout;
 	}
 
-	dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifm->ifa_index);
+	dev = __dev_get_by_index(get_exec_env()->ve_netns, ifm->ifa_index);
 	if (dev == NULL) {
 		err = -ENODEV;
 		goto errout;
@@ -618,7 +618,7 @@
 	char *colon;
 	int ret = -EFAULT;
 	int tryaddrmatch = 0;
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 
 	/*
 	 *	Fetch the caller's info block into kernel space
@@ -917,7 +917,7 @@
 	 */
 	read_lock(&dev_base_lock);
 	rcu_read_lock();
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		if ((in_dev = __in_dev_get_rcu(dev)) == NULL)
 			continue;
 
@@ -996,7 +996,7 @@
 
 	read_lock(&dev_base_lock);
 	rcu_read_lock();
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		if ((in_dev = __in_dev_get_rcu(dev))) {
 			addr = confirm_addr_indev(in_dev, dst, local, scope);
 			if (addr)
@@ -1190,7 +1190,7 @@
 
 	s_ip_idx = ip_idx = cb->args[1];
 	idx = 0;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		if (idx < s_idx)
 			goto cont;
 		if (idx > s_idx)
@@ -1250,7 +1250,7 @@
 	struct net_device *dev;
 
 	read_lock(&dev_base_lock);
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		struct in_device *in_dev;
 		rcu_read_lock();
 		in_dev = __in_dev_get_rcu(dev);
@@ -1338,7 +1338,7 @@
 	IPV4_DEVCONF_DFLT(FORWARDING) = on;
 
 	read_lock(&dev_base_lock);
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		struct in_device *in_dev;
 		rcu_read_lock();
 		in_dev = __in_dev_get_rcu(dev);
Index: kernel/net/ipv4/fib_frontend.c
===================================================================
--- kernel.orig/net/ipv4/fib_frontend.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/fib_frontend.c	2008-11-24 16:08:08.000000000 +0100
@@ -352,7 +352,7 @@
 		colon = strchr(devname, ':');
 		if (colon)
 			*colon = 0;
-		dev = __dev_get_by_name(get_exec_env()->ve_ns->net_ns, devname);
+		dev = __dev_get_by_name(get_exec_env()->ve_netns, devname);
 		if (!dev)
 			return -ENODEV;
 		cfg->fc_oif = dev->ifindex;
Index: kernel/net/ipv4/fib_semantics.c
===================================================================
--- kernel.orig/net/ipv4/fib_semantics.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/ipv4/fib_semantics.c	2008-11-24 16:08:08.000000000 +0100
@@ -325,7 +325,7 @@
 	       int dst_len, u32 tb_id, struct nl_info *info,
 	       unsigned int nlm_flags)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct sk_buff *skb;
 	u32 seq = info->nlh ? info->nlh->nlmsg_seq : 0;
 	int err = -ENOBUFS;
@@ -556,7 +556,7 @@
 				return -EINVAL;
 			if (inet_addr_type(nh->nh_gw) != RTN_UNICAST)
 				return -EINVAL;
-			if ((dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, nh->nh_oif)) == NULL)
+			if ((dev = __dev_get_by_index(get_exec_env()->ve_netns, nh->nh_oif)) == NULL)
 				return -ENODEV;
 			if (!(dev->flags&IFF_UP))
 				return -ENETDOWN;
@@ -822,7 +822,7 @@
 		if (nhs != 1 || nh->nh_gw)
 			goto err_inval;
 		nh->nh_scope = RT_SCOPE_NOWHERE;
-		nh->nh_dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, fi->fib_nh->nh_oif);
+		nh->nh_dev = dev_get_by_index(get_exec_env()->ve_netns, fi->fib_nh->nh_oif);
 		err = -ENODEV;
 		if (nh->nh_dev == NULL)
 			goto failure;
Index: kernel/net/ipv4/icmp.c
===================================================================
--- kernel.orig/net/ipv4/icmp.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/icmp.c	2008-11-24 16:08:08.000000000 +0100
@@ -514,7 +514,7 @@
 		struct net_device *dev = NULL;
 
 		if (rt->fl.iif && sysctl_icmp_errors_use_inbound_ifaddr)
-			dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, rt->fl.iif);
+			dev = dev_get_by_index(get_exec_env()->ve_netns, rt->fl.iif);
 
 		if (dev) {
 			saddr = inet_select_addr(dev, 0, RT_SCOPE_LINK);
Index: kernel/net/ipv4/igmp.c
===================================================================
--- kernel.orig/net/ipv4/igmp.c	2008-11-24 16:00:59.000000000 +0100
+++ kernel/net/ipv4/igmp.c	2008-11-24 16:08:08.000000000 +0100
@@ -2301,7 +2301,7 @@
 	struct igmp_mc_iter_state *state = igmp_mc_seq_private(seq);
 
 	state->in_dev = NULL;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, state->dev) {
+	for_each_netdev(get_exec_env()->ve_netns, state->dev) {
 		struct in_device *in_dev;
 
 		in_dev = in_dev_get(state->dev);
@@ -2449,7 +2449,7 @@
 
 	state->idev = NULL;
 	state->im = NULL;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, state->dev) {
+	for_each_netdev(get_exec_env()->ve_netns, state->dev) {
 		struct in_device *idev;
 
 		idev = in_dev_get(state->dev);
Index: kernel/net/ipv4/ip_fragment.c
===================================================================
--- kernel.orig/net/ipv4/ip_fragment.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/ip_fragment.c	2008-11-24 16:08:08.000000000 +0100
@@ -228,7 +228,7 @@
 	if ((qp->q.last_in&FIRST_IN) && qp->q.fragments != NULL) {
 		struct sk_buff *head = qp->q.fragments;
 		/* Send an ICMP "Fragment Reassembly Timeout" message. */
-		if ((head->dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, qp->iif)) != NULL) {
+		if ((head->dev = dev_get_by_index(get_exec_env()->ve_netns, qp->iif)) != NULL) {
 			icmp_send(head, ICMP_TIME_EXCEEDED, ICMP_EXC_FRAGTIME, 0);
 			dev_put(head->dev);
 		}
Index: kernel/net/ipv4/ip_gre.c
===================================================================
--- kernel.orig/net/ipv4/ip_gre.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/ip_gre.c	2008-11-24 16:08:08.000000000 +0100
@@ -263,7 +263,7 @@
 		int i;
 		for (i=1; i<100; i++) {
 			sprintf(name, "gre%d", i);
-			if (__dev_get_by_name(get_exec_env()->ve_ns->net_ns, name) == NULL)
+			if (__dev_get_by_name(get_exec_env()->ve_netns, name) == NULL)
 				break;
 		}
 		if (i==100)
@@ -1211,7 +1211,7 @@
 	}
 
 	if (!tdev && tunnel->parms.link)
-		tdev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, tunnel->parms.link);
+		tdev = __dev_get_by_index(get_exec_env()->ve_netns, tunnel->parms.link);
 
 	if (tdev) {
 		hlen = tdev->hard_header_len;
Index: kernel/net/ipv4/ip_sockglue.c
===================================================================
--- kernel.orig/net/ipv4/ip_sockglue.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/ip_sockglue.c	2008-11-24 16:08:08.000000000 +0100
@@ -596,7 +596,7 @@
 				dev_put(dev);
 			}
 		} else
-			dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, mreq.imr_ifindex);
+			dev = __dev_get_by_index(get_exec_env()->ve_netns, mreq.imr_ifindex);
 
 
 		err = -EADDRNOTAVAIL;
Index: kernel/net/ipv4/ipconfig.c
===================================================================
--- kernel.orig/net/ipv4/ipconfig.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/ipconfig.c	2008-11-24 16:08:08.000000000 +0100
@@ -185,7 +185,7 @@
 	struct ic_device *d, **last;
 	struct net_device *dev;
 	unsigned short oflags;
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 
 	last = &ic_first_dev;
 	rtnl_lock();
Index: kernel/net/ipv4/ipip.c
===================================================================
--- kernel.orig/net/ipv4/ipip.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/ipip.c	2008-11-24 16:08:08.000000000 +0100
@@ -226,7 +226,7 @@
 		int i;
 		for (i=1; i<100; i++) {
 			sprintf(name, "tunl%d", i);
-			if (__dev_get_by_name(get_exec_env()->ve_ns->net_ns, name) == NULL)
+			if (__dev_get_by_name(get_exec_env()->ve_netns, name) == NULL)
 				break;
 		}
 		if (i==100)
@@ -821,7 +821,7 @@
 	}
 
 	if (!tdev && tunnel->parms.link)
-		tdev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, tunnel->parms.link);
+		tdev = __dev_get_by_index(get_exec_env()->ve_netns, tunnel->parms.link);
 
 	if (tdev) {
 		dev->hard_header_len = tdev->hard_header_len + sizeof(struct iphdr);
Index: kernel/net/ipv4/ipmr.c
===================================================================
--- kernel.orig/net/ipv4/ipmr.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/ipv4/ipmr.c	2008-11-24 16:08:08.000000000 +0100
@@ -124,7 +124,7 @@
 static
 struct net_device *ipmr_new_tunnel(struct vifctl *v)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device  *dev;
 
 	dev = __dev_get_by_name(net, "tunl0");
Index: kernel/net/ipv4/ipvs/ip_vs_sync.c
===================================================================
--- kernel.orig/net/ipv4/ipvs/ip_vs_sync.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/ipvs/ip_vs_sync.c	2008-11-24 16:08:08.000000000 +0100
@@ -405,7 +405,7 @@
 	struct net_device *dev;
 	struct inet_sock *inet = inet_sk(sk);
 
-	if ((dev = __dev_get_by_name(get_exec_env()->ve_ns->net_ns, ifname)) == NULL)
+	if ((dev = __dev_get_by_name(get_exec_env()->ve_netns, ifname)) == NULL)
 		return -ENODEV;
 
 	if (sk->sk_bound_dev_if && dev->ifindex != sk->sk_bound_dev_if)
@@ -426,7 +426,7 @@
  */
 static int set_sync_mesg_maxlen(int sync_state)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device *dev;
 	int num;
 
@@ -470,7 +470,7 @@
 	memset(&mreq, 0, sizeof(mreq));
 	memcpy(&mreq.imr_multiaddr, addr, sizeof(struct in_addr));
 
-	if ((dev = __dev_get_by_name(get_exec_env()->ve_ns->net_ns, ifname)) == NULL)
+	if ((dev = __dev_get_by_name(get_exec_env()->ve_netns, ifname)) == NULL)
 		return -ENODEV;
 	if (sk->sk_bound_dev_if && dev->ifindex != sk->sk_bound_dev_if)
 		return -EINVAL;
@@ -491,7 +491,7 @@
 	__be32 addr;
 	struct sockaddr_in sin;
 
-	if ((dev = __dev_get_by_name(get_exec_env()->ve_ns->net_ns, ifname)) == NULL)
+	if ((dev = __dev_get_by_name(get_exec_env()->ve_netns, ifname)) == NULL)
 		return -ENODEV;
 
 	addr = inet_select_addr(dev, 0, RT_SCOPE_UNIVERSE);
Index: kernel/net/ipv4/netfilter/ipt_CLUSTERIP.c
===================================================================
--- kernel.orig/net/ipv4/netfilter/ipt_CLUSTERIP.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/netfilter/ipt_CLUSTERIP.c	2008-11-24 16:08:08.000000000 +0100
@@ -402,7 +402,7 @@
 				return false;
 			}
 
-			dev = dev_get_by_name(get_exec_env()->ve_ns->net_ns, e->ip.iniface);
+			dev = dev_get_by_name(get_exec_env()->ve_netns, e->ip.iniface);
 			if (!dev) {
 				printk(KERN_WARNING "CLUSTERIP: no such interface %s\n", e->ip.iniface);
 				return false;
Index: kernel/net/ipv4/netfilter/ipt_recent.c
===================================================================
--- kernel.orig/net/ipv4/netfilter/ipt_recent.c	2008-11-24 15:57:31.000000000 +0100
+++ kernel/net/ipv4/netfilter/ipt_recent.c	2008-11-24 16:08:08.000000000 +0100
@@ -508,7 +508,7 @@
 #ifdef CONFIG_PROC_FS
 	if (err)
 		return err;
-	proc_dir = proc_mkdir("ipt_recent", ve->ve_ns->net_ns->proc_net);
+	proc_dir = proc_mkdir("ipt_recent", ve->ve_netns->proc_net);
 	if (proc_dir == NULL) {
 		err = -ENOMEM;
 		goto out_mem;
@@ -525,7 +525,7 @@
 
 static void fini_ipt_recent(struct ve_struct *ve)
 {
-	remove_proc_entry("ipt_recent", ve->ve_ns->net_ns->proc_net);
+	remove_proc_entry("ipt_recent", ve->ve_netns->proc_net);
 #ifdef CONFIG_VE_IPTABLES
 	kfree(ve->_ipt_recent);
 	ve->_ipt_recent = NULL;
Index: kernel/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4_compat.c
===================================================================
--- kernel.orig/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4_compat.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4_compat.c	2008-11-24 16:08:08.000000000 +0100
@@ -422,7 +422,7 @@
 
 int nf_conntrack_ipv4_compat_init(void)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct proc_dir_entry *proc, *proc_exp, *proc_stat;
 
 	proc = proc_net_fops_create(net, "ip_conntrack", 0440, &ct_file_ops);
@@ -471,7 +471,7 @@
 
 void nf_conntrack_ipv4_compat_fini(void)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 
 	unregister_sysctl_table(ve_ip_ct_sysctl_header);
 	if (!ve_is_super(get_exec_env()))
Index: kernel/net/ipv4/route.c
===================================================================
--- kernel.orig/net/ipv4/route.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/ipv4/route.c	2008-11-24 16:08:08.000000000 +0100
@@ -1684,7 +1684,7 @@
 #endif
 	rth->rt_iif	=
 	rth->fl.iif	= dev->ifindex;
-	rth->u.dst.dev	= get_exec_env()->ve_ns->net_ns->loopback_dev;
+	rth->u.dst.dev	= get_exec_env()->ve_netns->loopback_dev;
 	dev_hold(rth->u.dst.dev);
 	rth->idev	= in_dev_get(rth->u.dst.dev);
 	rth->fl.oif	= 0;
@@ -1944,7 +1944,7 @@
 	if (res.type == RTN_LOCAL) {
 		int result;
 		result = fib_validate_source(saddr, daddr, tos,
-			get_exec_env()->ve_ns->net_ns->loopback_dev->ifindex,
+			get_exec_env()->ve_netns->loopback_dev->ifindex,
 					     dev, &spec_dst, &itag);
 		if (result < 0)
 			goto martian_source;
@@ -2006,7 +2006,7 @@
 #endif
 	rth->rt_iif	=
 	rth->fl.iif	= dev->ifindex;
-	rth->u.dst.dev	= get_exec_env()->ve_ns->net_ns->loopback_dev;
+	rth->u.dst.dev	= get_exec_env()->ve_netns->loopback_dev;
 	dev_hold(rth->u.dst.dev);
 	rth->idev	= in_dev_get(rth->u.dst.dev);
 	rth->rt_gateway	= daddr;
@@ -2275,7 +2275,7 @@
 
 static int ip_route_output_slow(struct rtable **rp, const struct flowi *oldflp)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device * loopback_dev = net->loopback_dev;
 	u32 tos	= RT_FL_TOS(oldflp);
 	struct flowi fl = { .nl_u = { .ip4_u =
@@ -2736,7 +2736,7 @@
 	if (iif) {
 		struct net_device *dev;
 
-		dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, iif);
+		dev = __dev_get_by_index(get_exec_env()->ve_netns, iif);
 		if (dev == NULL) {
 			err = -ENODEV;
 			goto errout_free;
Index: kernel/net/ipv6/addrconf.c
===================================================================
--- kernel.orig/net/ipv6/addrconf.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/ipv6/addrconf.c	2008-11-24 16:08:08.000000000 +0100
@@ -463,7 +463,7 @@
 	struct inet6_dev *idev;
 
 	read_lock(&dev_base_lock);
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		rcu_read_lock();
 		idev = __in6_dev_get(dev);
 		if (idev) {
@@ -941,7 +941,7 @@
 	read_lock(&dev_base_lock);
 	rcu_read_lock();
 
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		struct inet6_dev *idev;
 		struct inet6_ifaddr *ifa;
 
@@ -1884,7 +1884,7 @@
  */
 int addrconf_set_dstaddr(void __user *arg)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct in6_ifreq ireq;
 	struct net_device *dev;
 	int err = -EINVAL;
@@ -1956,7 +1956,7 @@
 	if (!valid_lft || prefered_lft > valid_lft)
 		return -EINVAL;
 
-	if ((dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifindex)) == NULL)
+	if ((dev = __dev_get_by_index(get_exec_env()->ve_netns, ifindex)) == NULL)
 		return -ENODEV;
 
 	if ((idev = addrconf_add_dev(dev)) == NULL)
@@ -2008,7 +2008,7 @@
 	struct inet6_dev *idev;
 	struct net_device *dev;
 
-	if ((dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifindex)) == NULL)
+	if ((dev = __dev_get_by_index(get_exec_env()->ve_netns, ifindex)) == NULL)
 		return -ENODEV;
 
 	if ((idev = __in6_dev_get(dev)) == NULL)
@@ -2103,7 +2103,7 @@
 		return;
 	}
 
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		struct in_device * in_dev = __in_dev_get_rtnl(dev);
 		if (in_dev && (dev->flags & IFF_UP)) {
 			struct in_ifaddr * ifa;
@@ -2255,7 +2255,7 @@
 
 static void ip6_tnl_add_linklocal(struct inet6_dev *idev)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct net_device *link_dev;
 
 	/* first try to inherit the link-local address from the link device */
@@ -3152,7 +3152,7 @@
 		valid_lft = INFINITY_LIFE_TIME;
 	}
 
-	dev =  __dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifm->ifa_index);
+	dev =  __dev_get_by_index(get_exec_env()->ve_netns, ifm->ifa_index);
 	if (dev == NULL)
 		return -ENODEV;
 
@@ -3336,7 +3336,7 @@
 	s_ip_idx = ip_idx = cb->args[1];
 
 	idx = 0;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		if (idx < s_idx)
 			goto cont;
 		if (idx > s_idx)
@@ -3446,7 +3446,7 @@
 
 	ifm = nlmsg_data(nlh);
 	if (ifm->ifa_index)
-		dev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifm->ifa_index);
+		dev = __dev_get_by_index(get_exec_env()->ve_netns, ifm->ifa_index);
 
 	if ((ifa = ipv6_get_ifaddr(addr, dev, 1)) == NULL) {
 		err = -EADDRNOTAVAIL;
@@ -3659,7 +3659,7 @@
 
 	read_lock(&dev_base_lock);
 	idx = 0;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev) {
+	for_each_netdev(get_exec_env()->ve_netns, dev) {
 		if (idx < s_idx)
 			goto cont;
 		if ((idev = in6_dev_get(dev)) == NULL)
Index: kernel/net/ipv6/af_inet6.c
===================================================================
--- kernel.orig/net/ipv6/af_inet6.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv6/af_inet6.c	2008-11-24 16:08:08.000000000 +0100
@@ -318,7 +318,7 @@
 					err = -EINVAL;
 					goto out;
 				}
-				dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, sk->sk_bound_dev_if);
+				dev = dev_get_by_index(get_exec_env()->ve_netns, sk->sk_bound_dev_if);
 				if (!dev) {
 					err = -ENODEV;
 					goto out;
Index: kernel/net/ipv6/anycast.c
===================================================================
--- kernel.orig/net/ipv6/anycast.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv6/anycast.c	2008-11-24 16:08:08.000000000 +0100
@@ -114,10 +114,10 @@
 		} else {
 			/* router, no matching interface: just pick one */
 
-			dev = dev_get_by_flags(get_exec_env()->ve_ns->net_ns, IFF_UP, IFF_UP|IFF_LOOPBACK);
+			dev = dev_get_by_flags(get_exec_env()->ve_netns, IFF_UP, IFF_UP|IFF_LOOPBACK);
 		}
 	} else
-		dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifindex);
+		dev = dev_get_by_index(get_exec_env()->ve_netns, ifindex);
 
 	if (dev == NULL) {
 		err = -ENODEV;
@@ -198,7 +198,7 @@
 
 	write_unlock_bh(&ipv6_sk_ac_lock);
 
-	dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, pac->acl_ifindex);
+	dev = dev_get_by_index(get_exec_env()->ve_netns, pac->acl_ifindex);
 	if (dev) {
 		ipv6_dev_ac_dec(dev, &pac->acl_addr);
 		dev_put(dev);
@@ -226,7 +226,7 @@
 		if (pac->acl_ifindex != prev_index) {
 			if (dev)
 				dev_put(dev);
-			dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, pac->acl_ifindex);
+			dev = dev_get_by_index(get_exec_env()->ve_netns, pac->acl_ifindex);
 			prev_index = pac->acl_ifindex;
 		}
 		if (dev)
@@ -431,7 +431,7 @@
 	if (dev)
 		return ipv6_chk_acast_dev(dev, addr);
 	read_lock(&dev_base_lock);
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, dev)
+	for_each_netdev(get_exec_env()->ve_netns, dev)
 		if (ipv6_chk_acast_dev(dev, addr)) {
 			found = 1;
 			break;
@@ -455,7 +455,7 @@
 	struct ac6_iter_state *state = ac6_seq_private(seq);
 
 	state->idev = NULL;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, state->dev) {
+	for_each_netdev(get_exec_env()->ve_netns, state->dev) {
 		struct inet6_dev *idev;
 
 		idev = in6_dev_get(state->dev);
Index: kernel/net/ipv6/datagram.c
===================================================================
--- kernel.orig/net/ipv6/datagram.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv6/datagram.c	2008-11-24 16:08:08.000000000 +0100
@@ -545,7 +545,7 @@
 				if (!src_info->ipi6_ifindex)
 					return -EINVAL;
 				else {
-					dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, src_info->ipi6_ifindex);
+					dev = dev_get_by_index(get_exec_env()->ve_netns, src_info->ipi6_ifindex);
 					if (!dev)
 						return -ENODEV;
 				}
Index: kernel/net/ipv6/ipv6_sockglue.c
===================================================================
--- kernel.orig/net/ipv6/ipv6_sockglue.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv6/ipv6_sockglue.c	2008-11-24 16:08:08.000000000 +0100
@@ -545,7 +545,7 @@
 			if (sk->sk_bound_dev_if && sk->sk_bound_dev_if != val)
 				goto e_inval;
 
-			if (__dev_get_by_index(get_exec_env()->ve_ns->net_ns, val) == NULL) {
+			if (__dev_get_by_index(get_exec_env()->ve_netns, val) == NULL) {
 				retv = -ENODEV;
 				break;
 			}
Index: kernel/net/ipv6/mcast.c
===================================================================
--- kernel.orig/net/ipv6/mcast.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/ipv6/mcast.c	2008-11-24 16:08:08.000000000 +0100
@@ -216,7 +216,7 @@
 			dst_release(&rt->u.dst);
 		}
 	} else
-		dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifindex);
+		dev = dev_get_by_index(get_exec_env()->ve_netns, ifindex);
 
 	if (dev == NULL) {
 		sock_kfree_s(sk, mc_lst, sizeof(*mc_lst));
@@ -268,7 +268,7 @@
 			*lnk = mc_lst->next;
 			write_unlock_bh(&ipv6_sk_mc_lock);
 
-			if ((dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, mc_lst->ifindex)) != NULL) {
+			if ((dev = dev_get_by_index(get_exec_env()->ve_netns, mc_lst->ifindex)) != NULL) {
 				struct inet6_dev *idev = in6_dev_get(dev);
 
 				(void) ip6_mc_leave_src(sk, mc_lst, idev);
@@ -303,7 +303,7 @@
 			dst_release(&rt->u.dst);
 		}
 	} else
-		dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, ifindex);
+		dev = dev_get_by_index(get_exec_env()->ve_netns, ifindex);
 
 	if (!dev)
 		return NULL;
@@ -334,7 +334,7 @@
 		np->ipv6_mc_list = mc_lst->next;
 		write_unlock_bh(&ipv6_sk_mc_lock);
 
-		dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, mc_lst->ifindex);
+		dev = dev_get_by_index(get_exec_env()->ve_netns, mc_lst->ifindex);
 		if (dev) {
 			struct inet6_dev *idev = in6_dev_get(dev);
 
@@ -2334,7 +2334,7 @@
 	struct igmp6_mc_iter_state *state = igmp6_mc_seq_private(seq);
 
 	state->idev = NULL;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, state->dev) {
+	for_each_netdev(get_exec_env()->ve_netns, state->dev) {
 		struct inet6_dev *idev;
 
 		idev = in6_dev_get(state->dev);
@@ -2463,7 +2463,7 @@
 
 	state->idev = NULL;
 	state->im = NULL;
-	for_each_netdev(get_exec_env()->ve_ns->net_ns, state->dev) {
+	for_each_netdev(get_exec_env()->ve_netns, state->dev) {
 		struct inet6_dev *idev;
 
 		idev = in6_dev_get(state->dev);
Index: kernel/net/ipv6/raw.c
===================================================================
--- kernel.orig/net/ipv6/raw.c	2008-11-24 15:59:49.000000000 +0100
+++ kernel/net/ipv6/raw.c	2008-11-24 16:08:08.000000000 +0100
@@ -288,7 +288,7 @@
 			if (!sk->sk_bound_dev_if)
 				goto out;
 
-			dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, sk->sk_bound_dev_if);
+			dev = dev_get_by_index(get_exec_env()->ve_netns, sk->sk_bound_dev_if);
 			if (!dev) {
 				err = -ENODEV;
 				goto out;
Index: kernel/net/ipv6/reassembly.c
===================================================================
--- kernel.orig/net/ipv6/reassembly.c	2008-11-24 16:00:27.000000000 +0100
+++ kernel/net/ipv6/reassembly.c	2008-11-24 16:08:08.000000000 +0100
@@ -217,7 +217,7 @@
 
 	fq_kill(fq);
 
-	dev = dev_get_by_index(get_exec_env()->ve_ns->net_ns, fq->iif);
+	dev = dev_get_by_index(get_exec_env()->ve_netns, fq->iif);
 	if (!dev)
 		goto out;
 
Index: kernel/net/ipv6/route.c
===================================================================
--- kernel.orig/net/ipv6/route.c	2008-11-24 16:02:40.000000000 +0100
+++ kernel/net/ipv6/route.c	2008-11-24 16:08:08.000000000 +0100
@@ -1052,7 +1052,7 @@
 
 int ip6_route_add(struct fib6_config *cfg)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	int err;
 	struct rt6_info *rt = NULL;
 	struct net_device *dev = NULL;
@@ -1125,7 +1125,7 @@
 	 */
 	if ((cfg->fc_flags & RTF_REJECT) ||
 	    (dev && (dev->flags&IFF_LOOPBACK) && !(addr_type&IPV6_ADDR_LOOPBACK))) {
-		struct net *net = get_exec_env()->ve_ns->net_ns;
+		struct net *net = get_exec_env()->ve_netns;
 
 		/* hold loopback dev/idev if we haven't done so. */
 		if (dev != net->loopback_dev) {
@@ -1832,7 +1832,7 @@
 				    const struct in6_addr *addr,
 				    int anycast)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct rt6_info *rt = ip6_dst_alloc();
 
 	if (rt == NULL)
@@ -2140,7 +2140,7 @@
 	if (rt->u.dst.dev) {
 		struct net_device *odev = rt->rt6i_dev;
 		if (rt == &ip6_null_entry)
-			odev = get_exec_env()->ve_ns->net_ns->loopback_dev;
+			odev = get_exec_env()->ve_netns->loopback_dev;
 		NLA_PUT_U32(skb, RTA_OIF, odev->ifindex);
 	}
 
@@ -2250,7 +2250,7 @@
 
 void inet6_rt_notify(int event, struct rt6_info *rt, struct nl_info *info)
 {
-	struct net *net = get_exec_env()->ve_ns->net_ns;
+	struct net *net = get_exec_env()->ve_netns;
 	struct sk_buff *skb;
 	u32 pid = 0, seq = 0;
 	struct nlmsghdr *nlh = NULL;
Index: kernel/net/ipv6/sit.c
===================================================================
--- kernel.orig/net/ipv6/sit.c	2008-11-24 15:56:52.000000000 +0100
+++ kernel/net/ipv6/sit.c	2008-11-24 16:08:08.000000000 +0100
@@ -191,7 +191,7 @@
 		int i;
 		for (i=1; i<100; i++) {
 			sprintf(name, "sit%d", i);
-			if (__dev_get_by_name(get_exec_env()->ve_ns->net_ns, name) == NULL)
+			if (__dev_get_by_name(get_exec_env()->ve_netns, name) == NULL)
 				break;
 		}
 		if (i==100)
@@ -201,7 +201,7 @@
 	dev = alloc_netdev(sizeof(*t), name, ipip6_tunnel_setup);
 	if (dev == NULL)
 		return NULL;
-	dev->nd_net = get_exec_env()->ve_ns->net_ns;
+	dev->nd_net = get_exec_env()->ve_netns;
 	nt = netdev_priv(dev);
 	dev->init = ipip6_tunnel_init;
 	nt->parms = *parms;
@@ -794,7 +794,7 @@
 	}
 
 	if (!tdev && tunnel->parms.link)
-		tdev = __dev_get_by_index(get_exec_env()->ve_ns->net_ns, tunnel->parms.link);
+		tdev = __dev_get_by_index(get_exec_env()->ve_netns, tunnel->parms.link);
 
 	if (tdev) {
 		dev->hard_header_len = tdev->hard_header_len + sizeof(struct iphdr);
@@ -876,7 +876,7 @@
 		err = -ENOMEM;
 		goto free_tunnel;
 	}
-	st->_ipip6_fb_tunnel_dev->nd_net = get_exec_env()->ve_ns->net_ns;
+	st->_ipip6_fb_tunnel_dev->nd_net = get_exec_env()->ve_netns;
 	st->_ipip6_fb_tunnel_dev->init = ipip6_fb_tunnel_init;
 	err = register_netdev(st->_ipip6_fb_tunnel_dev);
 	if (err < 0)
Index: kernel/net/netfilter/nf_conntrack_standalone.c
===================================================================
--- kernel.orig/net/netfilter/nf_conntrack_standalone.c	2008-11-24 16:02:16.000000000 +0100
+++ kernel/net/netfilter/nf_conntrack_standalone.c	2008-11-24 16:08:08.000000000 +0100
@@ -303,7 +303,7 @@
 
 static int nf_conntrack_init_ve_proc(struct ve_struct *ve)
 {
-	struct net *net = ve->ve_ns->net_ns;
+	struct net *net = ve->ve_netns;
 	struct proc_dir_entry *proc, *proc_stat;
 	int create_proc_net_stat_nf_conntrack = 1;
 
@@ -330,7 +330,7 @@
 
 static void nf_conntrack_fini_ve_proc(struct ve_struct *ve)
 {
-	struct net *net = ve->ve_ns->net_ns;
+	struct net *net = ve->ve_netns;
 	int remove_proc_net_stat_nf_conntrack = 1;
 
 #ifdef CONFIG_VE_IPTABLES
Index: kernel/net/netfilter/xt_hashlimit.c
===================================================================
--- kernel.orig/net/netfilter/xt_hashlimit.c	2008-11-24 15:47:46.000000000 +0100
+++ kernel/net/netfilter/xt_hashlimit.c	2008-11-24 16:08:08.000000000 +0100
@@ -748,7 +748,7 @@
 
 static int init_xt_hashlimit(struct ve_struct *ve)
 {
-	struct proc_dir_entry *proc_net = ve->ve_ns->net_ns->proc_net;
+	struct proc_dir_entry *proc_net = ve->ve_netns->proc_net;
 
 #if defined(CONFIG_VE_IPTABLES)
 	if (ve->_xt_hashlimit)
@@ -788,7 +788,7 @@
 
 static void fini_xt_hashlimit(struct ve_struct *ve)
 {
-	struct proc_dir_entry *proc_net = ve->ve_ns->net_ns->proc_net;
+	struct proc_dir_entry *proc_net = ve->ve_netns->proc_net;
 
 	remove_proc_entry("ip6t_hashlimit", proc_net);
 	remove_proc_entry("ipt_hashlimit", proc_net);
