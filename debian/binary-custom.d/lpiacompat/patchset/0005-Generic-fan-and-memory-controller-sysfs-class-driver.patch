From 4a26addbee545f99828cbc7bee1e2b493c890c75 Mon Sep 17 00:00:00 2001
From: Sujith Thomas <sujith.thomas@intel.com>
Date: Wed, 12 Dec 2007 11:00:06 +0530
Subject: [PATCH] Generic fan and memory controller sysfs class driver

Signed-off-by: Sujith Thomas <sujith.thomas@intel.com>

header files for generic fan and memory_controller sysfs class drivers
Generic fan sysfs driver: exposes state & max_state attributes
Generic memory controller sysfs driver : exposes state & max_state attributes
---
 drivers/sysfsclass/Kconfig        |   30 +++++
 drivers/sysfsclass/Makefile       |    7 ++
 drivers/sysfsclass/fan_sysfs.c    |  210 +++++++++++++++++++++++++++++++++++++
 drivers/sysfsclass/memory_sysfs.c |  208 ++++++++++++++++++++++++++++++++++++
 include/linux/fan.h               |   66 ++++++++++++
 include/linux/memory_controller.h |   75 +++++++++++++
 6 files changed, 596 insertions(+), 0 deletions(-)
 create mode 100644 drivers/sysfsclass/Kconfig
 create mode 100644 drivers/sysfsclass/Makefile
 create mode 100644 drivers/sysfsclass/fan_sysfs.c
 create mode 100644 drivers/sysfsclass/memory_sysfs.c
 create mode 100644 include/linux/fan.h
 create mode 100644 include/linux/memory_controller.h

diff --git a/drivers/sysfsclass/Kconfig b/drivers/sysfsclass/Kconfig
new file mode 100644
index 0000000..ea02da6
--- /dev/null
+++ b/drivers/sysfsclass/Kconfig
@@ -0,0 +1,30 @@
+
+menu "Sysfs device class support"
+
+config SYSFS_DEV_CLASS
+	bool "Sysfs device class support"
+	default y
+	help
+	  Say Y to enable sysfs class driver support for the below devices.
+
+config FAN_SYSFS
+	tristate "Fan class in sysfs"
+	default y
+	depends on SYSFS_DEV_CLASS
+	help
+	  This option enables the support for controlling a generic fan
+	  from sysfs. Sysfs will have attributes to switch the
+	  fan speed into different supported states.
+
+config MEMORY_SYSFS
+	tristate "Memory class in sysfs"
+	default y
+	depends on SYSFS_DEV_CLASS
+	help
+	  This option enables the support for controlling a generic
+	  memory controller from sysfs. Sysfs will have attributes
+	  to control the bandwidth of memory controller.
+
+
+endmenu
+
diff --git a/drivers/sysfsclass/Makefile b/drivers/sysfsclass/Makefile
new file mode 100644
index 0000000..293b5b4
--- /dev/null
+++ b/drivers/sysfsclass/Makefile
@@ -0,0 +1,7 @@
+#
+# Makefile for the sysfs class device driver support
+#
+
+
+obj-$(CONFIG_FAN_SYSFS)		+= fan_sysfs.o
+obj-$(CONFIG_MEMORY_SYSFS)	+= memory_sysfs.o
diff --git a/drivers/sysfsclass/fan_sysfs.c b/drivers/sysfsclass/fan_sysfs.c
new file mode 100644
index 0000000..f345c71
--- /dev/null
+++ b/drivers/sysfsclass/fan_sysfs.c
@@ -0,0 +1,210 @@
+/*
+*  fan.c - Fan sysfs driver ($Revision: 1 $)
+*
+*  Copyright (C) 2006, 2007 Sujith Thomas <sujith.thomas@intel.com>
+*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the GNU General Public License as published by
+*  the Free Software Foundation; version 2 of the License.
+*
+*  This program is distributed in the hope that it will be useful, but
+*  WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+*  General Public License for more details.
+*
+*  You should have received a copy of the GNU General Public License along
+*  with this program; if not, write to the Free Software Foundation, Inc.,
+*  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+*
+* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+* Sysfs class driver for fan devices. Exposes attributes for get/set
+* fan speed.
+*
+*
+*/
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/pci.h>
+#include <linux/fan.h>
+
+MODULE_AUTHOR("Sujith Thomas");
+MODULE_DESCRIPTION("Fan sysfs Driver");
+MODULE_LICENSE("GPL");
+
+static ssize_t state_show(struct class_device *cdev, char *buf)
+{
+	struct fan_device *fd;
+	int result;
+	if (!cdev || !buf)
+		return 0;
+
+	fd = to_fan_device(cdev);
+	if (fd->ops && fd->ops->get_cur_state) {
+		result = fd->ops->get_cur_state(fd, buf);
+		if (result)
+			return result;
+	}
+
+	return strlen(buf);
+}
+
+static ssize_t state_store(struct class_device *cdev, const char *buf,
+			   size_t count)
+{
+	struct fan_device *fd;
+	int result;
+
+	if (!cdev || !buf)
+		return count;
+
+	fd = to_fan_device(cdev);
+	if (fd->ops && fd->ops->set_cur_state) {
+		result = fd->ops->set_cur_state(fd, buf);
+		printk("Fan store result is %d\n",result);
+		if (result)
+			return result;
+	}
+
+	return count;
+}
+
+static ssize_t max_state_show(struct class_device *cdev, char *buf)
+{
+	struct fan_device *fd;
+	int result;
+	if (!cdev || !buf)
+		return 0;
+
+	fd = to_fan_device(cdev);
+	if (fd->ops && fd->ops->get_max_state) {
+		result = fd->ops->get_max_state(fd, buf);
+		if (result)
+			return result;
+	}
+
+	return strlen(buf);
+}
+
+static void fan_class_release(struct class_device *dev)
+{
+	struct fan_device *device = to_fan_device(dev);
+	kfree(device);
+}
+
+static struct class fan_class = {
+	.name = "fan",
+	.release = fan_class_release,
+};
+
+static CLASS_DEVICE_ATTR(state, 0644, state_show, state_store);
+static CLASS_DEVICE_ATTR(max_state, 0444, max_state_show, NULL);
+
+static const struct class_device_attribute *fd_class_dev_attribs[] = {
+	&class_device_attr_state,
+	&class_device_attr_max_state,
+};
+
+/*
+ * fan_device_register
+ * --------------------------------
+ * Method for registering fan class of devices with sysfs
+ * name: The name that should appear in sysfs
+ * dev : device* on which sysfs folder should appear
+ * devdata : Device private context
+ * ops : List of call back functions for various attributes
+ * Returns either an
+ * ERR_PTR() or a pointer to the newly allocated device.
+ */
+struct fan_device *fan_device_register(const char *name,
+				       struct device *dev,
+				       void *devdata, struct fan_ops *ops)
+{
+	int i, rc;
+	struct fan_device *new_fd;
+
+	if (!name || !ops)
+		return ERR_PTR(-EINVAL);
+
+	pr_debug("fan_device_alloc: name=%s\n", name);
+
+	new_fd = kzalloc(sizeof(struct fan_device), GFP_KERNEL);
+	if (!new_fd)
+		return ERR_PTR(-ENOMEM);
+
+	new_fd->ops = ops;
+	new_fd->class_dev.class = &fan_class;
+	new_fd->class_dev.dev = dev;
+	strlcpy(new_fd->class_dev.class_id, name, KOBJ_NAME_LEN);
+	class_set_devdata(&new_fd->class_dev, devdata);
+
+	rc = class_device_register(&new_fd->class_dev);
+	if (rc) {
+		kfree(new_fd);
+		return ERR_PTR(rc);
+	}
+
+	for (i = 0; i < ARRAY_SIZE(fd_class_dev_attribs); i++) {
+		rc = class_device_create_file(&new_fd->class_dev,
+					      fd_class_dev_attribs[i]);
+		if (rc) {
+			while (--i >= 0)
+				class_device_remove_file(&new_fd->class_dev,
+							 fd_class_dev_attribs
+							 [i]);
+			class_device_unregister(&new_fd->class_dev);
+			/* No need to kfree(new_bd) since release()
+			   method was called */
+			return ERR_PTR(rc);
+		}
+	}
+
+	return new_fd;
+}
+EXPORT_SYMBOL(fan_device_register);
+
+/*
+ * fan_device_unregister
+ * ----------------------------------
+ * Method for unregistering fan devices  with sysfs
+ * fd: Pointer to fan device
+ */
+void fan_device_unregister(struct fan_device *fd)
+{
+	int i;
+
+	if (!fd)
+		return;
+
+	pr_debug("fan_device_unregister: name=%s\n", fd->class_dev.class_id);
+
+	for (i = 0; i < ARRAY_SIZE(fd_class_dev_attribs); i++)
+		class_device_remove_file(&fd->class_dev,
+					 fd_class_dev_attribs[i]);
+
+	fd->ops = NULL;
+
+	class_device_unregister(&fd->class_dev);
+}
+EXPORT_SYMBOL(fan_device_unregister);
+
+static int __init fan_device_init(void)
+{
+	return class_register(&fan_class);
+}
+
+static void __exit fan_device_exit(void)
+{
+	class_unregister(&fan_class);
+}
+
+/*
+ * if this is compiled into the kernel, we need to ensure that the
+ * class is registered before users of the class try to register lcd's
+ */
+
+postcore_initcall(fan_device_init);
+module_exit(fan_device_exit);
diff --git a/drivers/sysfsclass/memory_sysfs.c b/drivers/sysfsclass/memory_sysfs.c
new file mode 100644
index 0000000..6642336
--- /dev/null
+++ b/drivers/sysfsclass/memory_sysfs.c
@@ -0,0 +1,208 @@
+/*
+*  memory_controller.c - Memory controller sysfs driver ($Revision: 1 $)
+*
+*  Copyright (C) 2006, 2007 Sujith Thomas <sujith.thomas@intel.com>
+*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the GNU General Public License as published by
+*  the Free Software Foundation; version 2 of the License.
+*
+*  This program is distributed in the hope that it will be useful, but
+*  WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+*  General Public License for more details.
+*
+*  You should have received a copy of the GNU General Public License along
+*  with this program; if not, write to the Free Software Foundation, Inc.,
+*  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+*
+* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+* Sysfs class driver for memory_controller. Exposes attributes for get/set
+* memory bandwidth
+*
+*
+*/
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/pci.h>
+#include <linux/memory_controller.h>
+
+MODULE_AUTHOR("Sujith Thomas");
+MODULE_DESCRIPTION("Memory controller sysfs Driver");
+MODULE_LICENSE("GPL");
+
+static ssize_t bandwidth_show(struct class_device *cdev, char *buf)
+{
+	struct memory_controller_device *mc;
+	int result;
+
+	if (!cdev || !buf)
+		return 0;
+
+	mc = to_memory_controller_device(cdev);
+	if (mc->ops && mc->ops->get_cur_bandwidth) {
+		result = mc->ops->get_cur_bandwidth(mc, buf);
+		if (result)
+			return result;
+	}
+
+	return strlen(buf);
+}
+
+static ssize_t bandwidth_store(struct class_device *cdev, const char *buf,
+			       size_t count)
+{
+	struct memory_controller_device *mc;
+	int result;
+	if (!cdev || !buf)
+		return count;
+
+	mc = to_memory_controller_device(cdev);
+	if (mc->ops && mc->ops->set_cur_bandwidth) {
+		result = mc->ops->set_cur_bandwidth(mc, buf);
+		if (result)
+			return result;
+	}
+
+	return count;
+}
+
+static ssize_t max_bandwidth_show(struct class_device *cdev, char *buf)
+{
+	struct memory_controller_device *mc;
+	int result;
+	if (!cdev || !buf)
+		return 0;
+
+	mc = to_memory_controller_device(cdev);
+	if (mc->ops && mc->ops->get_max_bandwidth) {
+		result = mc->ops->get_max_bandwidth(mc, buf);
+		if (result)
+			return result;
+	}
+
+	return strlen(buf);
+}
+
+static void memory_controller_class_release(struct class_device *dev)
+{
+	struct memory_controller_device *device =
+	    to_memory_controller_device(dev);
+	kfree(device);
+}
+
+static struct class memory_controller_class = {
+	.name = "memory_controller",
+	.release = memory_controller_class_release,
+};
+
+static CLASS_DEVICE_ATTR(state, 0644, bandwidth_show, bandwidth_store);
+static CLASS_DEVICE_ATTR(max_state, 0444, max_bandwidth_show, NULL);
+
+static const struct class_device_attribute  *mc_class_dev_attribs[] = {
+	&class_device_attr_state,
+	&class_device_attr_max_state,
+};
+
+/*
+ * memory_controller_device_register
+ * --------------------------------
+ * Method for registering memory_controller class of devices with sysfs
+ * name: The name that should appear in sysfs
+ * dev : device* on which sysfs folder should appear
+ * devdata : Device private context
+ * ops : List of call back functions for various attributes
+ * Returns either an
+ * ERR_PTR() or a pointer to the newly allocated device.
+ */
+struct memory_controller_device *
+memory_controller_device_register(const char *name
+				  , struct device *dev
+				  , void *devdata
+				  , struct memory_controller_ops *ops)
+{
+	int i, rc;
+	struct memory_controller_device *new_mc;
+
+	if (!name || !ops)
+		return ERR_PTR(-EINVAL);
+
+	pr_debug("memory_controller_device_alloc: name=%s\n", name);
+
+	new_mc = kzalloc(sizeof(struct memory_controller_device), GFP_KERNEL);
+	if (!new_mc)
+		return ERR_PTR(-ENOMEM);
+
+	new_mc->ops = ops;
+	new_mc->class_dev.class = &memory_controller_class;
+	new_mc->class_dev.dev = dev;
+	strlcpy(new_mc->class_dev.class_id, name, KOBJ_NAME_LEN);
+	class_set_devdata(&new_mc->class_dev, devdata);
+
+	rc = class_device_register(&new_mc->class_dev);
+	if (rc) {
+		kfree(new_mc);
+		return ERR_PTR(rc);
+	}
+
+	for (i = 0; i < ARRAY_SIZE(mc_class_dev_attribs); i++) {
+		rc = class_device_create_file(&new_mc->class_dev,
+					      mc_class_dev_attribs[i]);
+		if (rc) {
+			while (--i >= 0)
+				class_device_remove_file(&new_mc->class_dev,
+							 mc_class_dev_attribs
+							 [i]);
+			class_device_unregister(&new_mc->class_dev);
+			/* No need to kfree(new_bd) since release()
+			   method was called */
+			return ERR_PTR(rc);
+		}
+	}
+
+	return new_mc;
+}
+EXPORT_SYMBOL(memory_controller_device_register);
+
+/*
+ * memory_controller_device_unregister
+ * ----------------------------------
+ * Method for unregistering memory_controller devices  with sysfs
+ * mc: Pointer to memory_controller device
+ */
+void memory_controller_device_unregister(struct memory_controller_device *mc)
+{
+	int i;
+
+	if (!mc)
+		return;
+
+	pr_debug("memory_controller_device_unregister: name=%s\n",
+		 mc->class_dev.class_id);
+
+	for (i = 0; i < ARRAY_SIZE(mc_class_dev_attribs); i++)
+		class_device_remove_file(&mc->class_dev,
+					 mc_class_dev_attribs[i]);
+
+	mc->ops = NULL;
+
+	class_device_unregister(&mc->class_dev);
+}
+EXPORT_SYMBOL(memory_controller_device_unregister);
+
+static int __init memory_controller_device_init(void)
+{
+	return class_register(&memory_controller_class);
+}
+
+static void __exit memory_controller_device_exit(void)
+{
+	class_unregister(&memory_controller_class);
+}
+
+module_init(memory_controller_device_init);
+module_exit(memory_controller_device_exit);
diff --git a/include/linux/fan.h b/include/linux/fan.h
new file mode 100644
index 0000000..dd37067
--- /dev/null
+++ b/include/linux/fan.h
@@ -0,0 +1,66 @@
+/*
+*  fan.h - Generic fan driver for sysfs ($Revision: 1 $)
+*
+*  Copyright (C) 2006, 2007 Sujith Thomas <sujith.thomas@intel.com>
+*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the GNU General Public License as published by
+*  the Free Software Foundation; version 2 of the License.
+*
+*  This program is distributed in the hope that it will be useful, but
+*  WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+*  General Public License for more details.
+*
+*  You should have received a copy of the GNU General Public License along
+*  with this program; if not, write to the Free Software Foundation, Inc.,
+*  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+*
+* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+* Sysfs class driver for fan devices. Exposes attributes for get/set
+* fan speed.
+*
+*
+*/
+
+#include <linux/device.h>
+
+struct fan_device;
+
+struct fan_ops {
+	int (*get_max_state) (struct fan_device *device, char *buf);
+	int (*get_cur_state) (struct fan_device *device, char *buf);
+	int (*set_cur_state) (struct fan_device *device, const char *buf);
+};
+
+struct fan_device {
+	struct fan_ops *ops;
+	struct class sysfs_class;	/* '/sys/class' entry */
+	struct class_device class_dev;	/*class device entry in sys/class*/
+};
+
+/*
+ * fan_device_register
+ * --------------------------------
+ * Method for registering fan class of devices with sysfs
+ * name: The name that should appear in sysfs
+ * dev : device* on which sysfs folder should appear
+ * devdata : Device private context
+ * ops : List of call back functions for various attributes
+ * Returns either an
+ * ERR_PTR() or a pointer to the newly allocated device.
+ */
+struct fan_device *fan_device_register(const char *name,
+				       struct device *dev, void *devdata,
+				       struct fan_ops *ops);
+
+/*
+ * fan_device_unregister
+ * ----------------------------------
+ * Method for unregistering fan devices  with sysfs
+ * fd: Pointer to fan device
+ */
+void fan_device_unregister(struct fan_device *device);
+
+#define to_fan_device(obj) container_of(obj, struct fan_device, class_dev)
diff --git a/include/linux/memory_controller.h b/include/linux/memory_controller.h
new file mode 100644
index 0000000..a7564c8
--- /dev/null
+++ b/include/linux/memory_controller.h
@@ -0,0 +1,75 @@
+/*
+*  memory_controller.h - Generic memory controller driver for sysfs
+* ($Revision: 1 $)
+*
+*  Copyright (C) 2006, 2007 Sujith Thomas <sujith.thomas@intel.com>
+*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+*
+*  This program is free software; you can redistribute it and/or modify
+*  it under the terms of the GNU General Public License as published by
+*  the Free Software Foundation; version 2 of the License.
+*
+*  This program is distributed in the hope that it will be useful, but
+*  WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+*  General Public License for more details.
+*
+*  You should have received a copy of the GNU General Public License along
+*  with this program; if not, write to the Free Software Foundation, Inc.,
+*  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+*
+* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+* Sysfs class driver for memory_controller. Exposes attributes for get/set
+* memory bandwidth
+*
+*
+*/
+
+#include <linux/device.h>
+
+struct memory_controller_device;
+
+/* Callback functions to the actual memory device driver */
+struct memory_controller_ops {
+	int (*get_max_bandwidth) (struct memory_controller_device *device,
+				  char *buf);
+	int (*get_cur_bandwidth) (struct memory_controller_device *device,
+				  char *buf);
+	int (*set_cur_bandwidth) (struct memory_controller_device *device,
+				  const char *buf);
+};
+
+struct memory_controller_device {
+	struct memory_controller_ops *ops;	/* Callback routines */
+	struct class sysfs_class;	/* '/sys/class' entry*/
+	struct class_device class_dev;	/*class device entry in sys/class*/
+};
+
+/*
+ * memory_controller_device_register
+ * --------------------------------
+ * Method for registering memory_controller class of devices with sysfs
+ * name: The name that should appear in sysfs
+ * dev : device* on which sysfs folder should appear
+ * devdata : Device private context
+ * ops : List of call back functions for various attributes
+ * Returns either an
+ * ERR_PTR() or a pointer to the newly allocated device.
+ */
+struct memory_controller_device *
+memory_controller_device_register(const char *name
+				  , struct device *dev
+				  , void *devdata
+				  , struct memory_controller_ops *ops);
+
+/*
+ * memory_controller_device_unregister
+ * ----------------------------------
+ * Method for unregistering memory_controller devices  with sysfs
+ * mc: Pointer to memory_controller device
+ */
+void memory_controller_device_unregister(struct memory_controller_device
+					 *device);
+
+#define to_memory_controller_device(obj) \
+container_of(obj, struct memory_controller_device, class_dev)
-- 
1.5.3.7-dirty

