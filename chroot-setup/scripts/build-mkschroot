#!/bin/bash
. chroot-defs.conf
#==============================================================================
# This script is intended to automatically set up a schroot environment ready
# to compile the kernel.
# The arguments are the same as for the debootstrap command. The entry for
# the schroot configuration will be automatically appended (if it does not
# exist) and the remaining packages will get installed.
#==============================================================================
RC=0
USER="$SUDO_USER"
DEBOOTSTRAP=debootstrap

if [ "$USER" = "" ]; then
	echo "ERROR: You must run this command under sudo!" >&2
	RC=1
fi
if [ $(id -u) -ne 0 ]; then
	echo "ERROR: You must be root to run this command!" >&2
	RC=1
fi
for i in $DEBOOTSTRAP schroot; do
	if [ "$(type -p $i)" = "" ]; then
		echo "ERROR: $i is required!" >&2
		RC=1
	fi
done

if [ $RC -ne 0 ]; then
	exit $RC
fi

#------------------------------------------------------------------------------
# Command line evaluation
#------------------------------------------------------------------------------
OPTIONS=""
SUITE=""
TARGET=""
MIRROR=""
while [ $# -ne 0 ]; do
	case $1 in
		--arch=*)
			ARCH=$(echo $1|cut -d= -f2)
			OPTIONS="$OPTIONS $1"
			;;
		-*|--*)
			OPTIONS="$OPTIONS $1"
			;;
		*)
			if [ "$SUITE" = "" ]; then
				SUITE="$1"
			elif [ "$TARGET" = "" ]; then
				TARGET="$1"
				if [ "$(dirname $TARGET)" = "." ]; then
					TARGET="$(pwd)/$TARGET"
				fi
			elif [ "$MIRROR" = "" ]; then
				MIRROR="$1"
			else
				echo "Too many arguments <$1>!" >&2
				exit 1
			fi
			;;
	esac
	shift
done

if [ "$SUITE" = "" -o "$TARGET" = "" ]; then
	echo "$(basename $0) <suite> <target> [mirror]"
	exit 1
fi

if [ "$MIRROR" = "" ]
then
	MIRROR=http://archive.ubuntu.com/ubuntu
fi

#------------------------------------------------------------------------------
# Make a list of package we additionally need (depending on suite).
#------------------------------------------------------------------------------
ADDPKG="vim fakeroot git-core kernel-wedge build-essential ccache devscripts"
ADDPKG="$ADDPKG xmlto docbook-utils gs transfig sharutils"
ADDPKG="$ADDPKG docbook-utils gawk m4"
case $SUITE in
	dapper)
		ADDPKG="$ADDPKG kernel-package"
		;;
	hardy)
		;;
	jaunty)
		ADDPKG="$ADDPKG makedumpfile"
		;;
	karmic)
		ADDPKG="$ADDPKG makedumpfile"
		;;
	lucid)
		ADDPKG="$ADDPKG makedumpfile"
		;;
	maverick)
		ADDPKG="$ADDPKG makedumpfile libdw-dev binutils-dev asciidoc"
		;;
	*)
		if [ "$SUITE" != "" ]; then
			echo "Unknown suite <$SUITE>!" >&2
			exit 1
		fi
		;;
esac

# armel is only supported if the lsb-release is Lucid or higher.
if [ "$ARCH" = "armel" ]
then
	ADDPKG="$ADDPKG qemu-kvm-extras-static"
	DEBOOTSTRAP=qemu-debootstrap
fi

HOSTARCH=$(dpkg --print-architecture)
if [ "$ARCH" = "" ]; then
	NAME="$SUITE"
else
	NAME="$SUITE-$ARCH"
fi

CFGFILE="/etc/schroot/chroot.d/$NAME"
CFGEXISTS=false
if [ -f $CFGFILE ]; then
	echo "WARNING: $CFGFILE already exists" >&2
	CFGEXISTS=true
fi

DOINSTALL=true
if [ ! -d "$TARGET" ]; then
	mkdir "$TARGET"
	if [ $? -ne 0 ]; then
		echo "Failed to create <$TARGET>!" >&2
		exit 1
	fi
else
	if $CFGEXISTS; then
		echo "WARNING: Target directory exists as well. " \
		     "Skipping installation" >&2
		DOINSTALL=false
	fi
fi

if $DOINSTALL; then
	#
	# Make sure session recovery is disabled.
	#
	DEF_SCHROOT=/etc/default/schroot
	if egrep "^SESSION" ${DEF_SCHROOT} > /dev/null ; then
		sed -i 's/^SESSION/#SESSION/' ${DEF_SCHROOT}
	fi
	#
	# Weirdly debootstrap seems to be confused if the current working
	# directory is the place where the target direcory gets created.
	# At least on Hardy it will bail out claiming the current working
	# directory does not exist. Circumvent that by stepping aside.
	#
	if [ "$(pwd)" = "$(dirname $TARGET)" ]; then
		cd /tmp
	fi
	echo $DEBOOTSTRAP $OPTIONS $SUITE "$TARGET" $MIRROR
	$DEBOOTSTRAP $OPTIONS $SUITE "$TARGET" $MIRROR || exit 1
	#
	# Update the sources list.
	#
	SL="$TARGET/etc/apt/sources.list"
	echo Updating pockets
	get_pockets ${SUITE} || exit 1
	for i in ${POCKETS}
	do
		if [ "$i" = "release" ] ; then
			echo "deb $MIRROR $SUITE main" > $SL
		else
			echo "deb $MIRROR $SUITE-$i main" >> $SL
		fi
	done
fi

function UpdateConfig()
{
	echo "INFO: Updating configuration file..." >&2
	USER=$SUDO_USER
	cat <<-EOD >>$CFGFILE

	[$NAME]
	description=Ubuntu $SUITE ($ARCH)
	type=directory
	directory=$TARGET
	groups=sbuild
	#run-setup-scripts=true
	EOD
	case $ARCH in
		i386|lpia)
			case $HOSTARCH in
				amd64)
					echo "personality=linux32" >>$CFGFILE
					;;
			esac
			;;
	esac
}
if ! $CFGEXISTS; then
	UpdateConfig
fi

SCHROOTCMD="schroot -q --chroot=$NAME"

${SCHROOTCMD} apt-get update

${SCHROOTCMD} apt-get -u dist-upgrade -y --force-yes
echo SET debconf/frontend Noninteractive | ${SCHROOTCMD} /usr/bin/debconf-communicate debconf
#
# Add each package in a separate invocation, just ignore failures where the package
# doesn't exist, e.g., makedumpfile in armel.
#
for i in $ADDPKG
do
	${SCHROOTCMD} -- apt-get install -y --force-yes $i
done
