
export MAIN_ARCHIVE=http://archive.ubuntu.com/ubuntu
export SRC_ARCHIVE=http://archive.ubuntu.com/ubuntu

export ARCHIVE_PORTS=http://ports.ubuntu.com/ubuntu-ports
export SRC_ARCHIVE_PORTS=http://ports.ubuntu.com/ubuntu-ports

export DEF_DIR=usr3
export CH_ROOT=/${DEF_DIR}/chroots

releases=([0]=dapper [1]=hardy [2]=jaunty [3]=karmic [4]=lucid [5]=maverick)
arches[0]="i386 amd64"
arches[1]="i386 amd64 lpia"
arches[2]="i386 amd64 lpia"
arches[3]="i386 amd64 lpia"
arches[4]="i386 amd64 armel"
arches[5]="i386 amd64 armel"

pockets[0]="release security updates"
pockets[1]="release security updates"
pockets[2]="release security updates"
pockets[3]="release security updates"
pockets[4]="release security updates"
pockets[5]="release"

build_dep[0]="linux-source-2.6.15"
build_dep[1]="linux"
build_dep[2]="linux"
build_dep[3]="linux"
build_dep[4]="linux"
build_dep[5]="linux"

# Use as an index into mirror[] and mirror_ports[]
mirror_sites[0]="redvoodoo"
mirror_sites[1]="rtg"
mirror_sites[2]="ubuntu"

# The release and security mirrors
mirror_release[0]="http://archive.redvoodoo.org/ubuntu"
mirror_updates[0]="http://archive.redvoodoo.org/ubuntu"
mirror_security[0]="http://security.redvoodoo.org/ubuntu"
mirror_ports_release[0]="http://ports.redvoodoo.org/ubuntu-ports"
mirror_ports_updates[0]="http://ports.redvoodoo.org/ubuntu-ports"
mirror_ports_security[0]="http://ports.redvoodoo.org/ubuntu-ports"

mirror_release[1]="http://mirror.rtg.net/ubuntu"
mirror_updates[1]="http://mirror.rtg.net/ubuntu"
mirror_security[1]="http://mirror.rtg.net/ubuntu"
mirror_ports_release[1]="http://mirror.rtg.net/ubuntu-ports"
mirror_ports_updates[1]="http://mirror.rtg.net/ubuntu-ports"
mirror_ports_security[1]="http://mirror.rtg.net/ubuntu-ports"

mirror_release[2]="http://archive.ubuntu.com/ubuntu"
mirror_updates[2]="http://archive.ubuntu.com/ubuntu"
mirror_security[2]="http://security.ubuntu.com/ubuntu"
mirror_ports_release[2]="http://ports.ubuntu.com/ubuntu-ports"
mirror_ports_updates[2]="http://ports.ubuntu.com/ubuntu-ports"
mirror_ports_security[2]="http://ports.ubuntu.com/ubuntu-ports"


#
# Check that the release/arch pair exists in the releases[]/arches[] arrays.
#
function check_release_arch ()
{
RELEASE=$1
ARCH=$2
es=1
let index=0
for i in "${releases[@]}"
do
	if [ "$i" = "${RELEASE}" ]
	then
		for j in ${arches[${index}]}
		do
			if [ "$j" = "${ARCH}" ]
			then
				RELEASE_ARCH="${i}-${j}"
				es=0
			fi
		done
	fi
	let index=${index}+1
done

if [ "${es}" = "1" ]
then
	echo No record matches this release \(${RELEASE}\) and arch \(${ARCH}\)
fi

return $es

}

function get_pockets ()
{
RELEASE=$1

es=1
for i in "${releases[@]}"
do
        if [ "$i" = "${RELEASE}" ]
        then
		export POCKETS="${pockets[${index}]}"
		es=0
		break
        fi
        let index=${index}+1
done
return $es
}

#
# Return true if the input arch is considered a ports arch.
#
function ports_arch ()
{
ARCH=$1
if [ "${ARCH}" = "armel" ] || [ "${ARCH}" = "lpia" ]
then
	es=0
else
	es=1
fi
return $es
}

#
# Find a mirror by looking at the host's /etc/apt/sources.list
#
function write_mirror ()
{
SUITE=$1
ARCH=$2
TARG=$3

SOURCE_URL=http://archive.ubuntu.com/ubuntu
SL=/etc/apt/sources.list

if ! get_pockets ${SUITE} ; then
	echo write_mirror: Bogus release ${SUITE}
	exit 1
fi

let index=0
for i in "${mirror_sites[@]}"
do
	if grep "$i" ${SL} > /dev/null
	then
		let index2=0
		echo > ${TARG}
		if ports_arch ${ARCH}
		then
			release_url="${mirror_ports_release[${index}]}"
			updates_url="${mirror_ports_updates[${index}]}"
			security_url="${mirror_ports_security[${index}]}"
		else
			release_url="${mirror_release[${index}]}"
			updates_url="${mirror_updates[${index}]}"
			security_url="${mirror_security[${index}]}"
		fi
		if echo "${POCKETS}" | grep release > /dev/null ; then
			echo "deb ${release_url} ${SUITE} main" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE} main" >> ${TARG}
		fi
		if echo "${POCKETS}" | grep updates > /dev/null ; then
			echo "deb ${updates_url} ${SUITE}-updates main" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-updates main" >> ${TARG}
		fi
		if echo "${POCKETS}" | grep security > /dev/null ; then
			echo "deb ${security_url} ${SUITE}-security main" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-security main" >> ${TARG}
		fi
		break;
	fi
        let index=${index}+1
done
}

#
# Try to find the suite mirror by looking at the host.
#
function get_suite_mirror ()
{
SUITE=$1

SL=/etc/apt/sources.list

if ! get_pockets ${SUITE} ; then
	echo get_suite_mirror: Bogus release ${SUITE}
	exit 1
fi

let index=0
for i in "${mirror_sites[@]}"
do
	if grep "$i" ${SL} > /dev/null
	then
		let index2=0
		if ports_arch ${ARCH}
		then
			export MIRROR="${mirror_ports_release[${index}]}"
		else
			export MIRROR="${mirror_release[${index}]}"
		fi
		break;
	fi
        let index=${index}+1
done
}

