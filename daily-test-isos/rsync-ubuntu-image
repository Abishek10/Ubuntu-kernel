#!/bin/sh
# sample image pathnames:
# cdimage/daily-live/current/lucid-desktop-amd64.iso
# cdimage/ubuntu-netbook-remix/daily-live/current/karmic-netbook-remix-i386.iso
# cdimage/ubuntu-mid/intrepid/current/ubuntu-mid.img
# cdimage/ubuntu-umpc/intrepid/current/ubuntu-umpc.img
# cdimage/daily-live/current/intrepid-desktop-amd64.iso
# cdimage/ports/daily-live/current/karmic-desktop-armel.img
# cdimage/ports/daily-live/current/karmic-desktop-armel+imx51.img
# cdimage/ports/daily/current/karmic-alternate-lpia.iso
# releases/jaunty/ubuntu-8.10-desktop-i386.iso
# cdimage/ports/daily-live/current/karmic-desktop-armel+dove.img
#
# TODO
# - creates real files from symlinks (-L) as I don't know the real path for
#   files on releases.ubuntu.com
# - nicer handling of manually downloaded files (generate MD5 if the file is
#   already present)

set -e

BASE_DOWNLOAD_DIR="/home/bradf/work/isos/ubuntu"

pathname=""
log() {
    echo "${pathname:+$basename: }$@"
}

log_i() {
    log "I:" "$@"
}

die() {
    log "E:" "$@"
    exit 1
}

if [ $# != 1 ] && [ $# != 2 ]; then
    die "Usage: $(basename "$0") [ssh host] <relative pathname>"
fi

host=""
if [ $# = 2 ]; then
    host="$1"
    shift
fi

pathname="$1"

if [ -z "$pathname" ] || [ "${pathname#/}" != "$pathname" ]; then
    die "Need a relative pathname"
fi

basename="$(basename "$pathname")"
download_dir="$BASE_DOWNLOAD_DIR/$(dirname "$pathname")"

case "$host" in
  bee|fox)
    # assume scp + rsync -e ssh
    fetch_sum="scp"
    rsync_rsh="ssh"

    remote_download_dir="$BASE_DOWNLOAD_DIR"

    url="$pathname"
  ;;
  "")
    # assume http + rsync://
    fetch_sum="http"
    rsync_rsh=""

    case "$pathname" in
      cdimage/*)
        url="cdimage.ubuntu.com/$pathname"
      ;;
      releases/*)
        url="releases.ubuntu.com/$pathname"
      ;;
      *)
        die "Unknown image"
      ;;
    esac
  ;;
  *)
    die "Unknown host"
  ;;
esac

mkdir -pv "$download_dir"
cd "$download_dir"

get_sums() {
    local url="$1"
    local type="$2"
    local basename="$(basename "$url")"

    log_i "Retrieving $type checksums"
    case "$fetch_sum" in
      http)
        case "$type" in
          md5)
            sums_file=MD5SUMS
          ;;
          sha1)
            sums_file=SHA1SUMS
          ;;
          *)
            die "Internal error: unknown type: $1"
          ;;
        esac

        # unsetting http_proxy to force retrieval
        http_proxy="" wget -q -O - "http://$(dirname "$url")/$sums_file" \
            | grep "\\*$basename\$" \
            | cut -f 1 -d" " >"$basename.server.$type"
        ;;
      scp)
        scp -q "$host:$remote_download_dir/$url.local.$type" "$basename.server.$type"
      ;;
      *)
        die "Internal error: unknown fetch sums method: $fetch_sum"
      ;;
    esac
}

check_sums() {
    local basename="$1"
    local type="$2"
    local local_sums="$basename.local.$type"
    local server_sums="$basename.server.$type"

    if [ -e "$local_sums" ] && cmp -s "$local_sums" "$server_sums"; then
        return 0
    fi
    return 1
}

gen_sums() {
    local basename="$1"
    local type="$2"
    local tool="${type}sum"
    local local_sums="$basename.local.$type"

    log_i "Computing local $type..."
    "$tool" "$basename" | cut -f 1 -d" " >"$local_sums"
}

get_sums "$url" md5
get_sums "$url" sha1
if check_sums "$basename" md5 && check_sums "$basename" sha1; then
    log_i "Already up-to-date"
    exit 0
fi

log_i "Rsyncing..."
case "$rsync_rsh" in
  "")
    rsync -LhPvv "rsync://$url" .
    ;;
  ssh)
    rsync -LhPvv -e ssh "$host:$remote_download_dir/$url" .
  ;;
  *)
    die "Internal error: unknown fetch sums method: $fetch_sum"
  ;;
esac

gen_sums "$basename" md5
if ! check_sums "$basename" md5; then
    die "MD5SUMS mismatch!"
fi
gen_sums "$basename" sha1
if ! check_sums "$basename" md5; then
    die "SHA1SUMS mismatch!"
fi

log_i "Updated successfully"

