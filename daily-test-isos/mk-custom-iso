#!/bin/bash
#
# Generate custom Ubuntu ISO.	Based on instructions documented at
# https://help.ubuntu.com/community/LiveCDCustomization
#
# createiso requires that you have already downloded an Ubuntu ISO
# to use as the base image.  Packages intended to be added to the
# custom ISO must be contained within a single directory.  Any
# package dependencies not already included in the base Ubuntu image
# must also be included in this directory.

#set -x
set -e # exit on error

# verify_environment
#
# Make sure that the packages we need are installed.
#
function verify_environment()
{
    # Verify proper tools are installed
    if [ ! -f "/usr/bin/mksquashfs" ]; then
        echo "Please install squashfs-tools"
        exit 1
    elif [ ! -f "/usr/bin/genisoimage" ]; then
        echo "Please install genisoimage"
        exit 1
    fi
}

# cmdline_usage
#
# Print out a block of text that explains all the command line options and
# how to run this script.
#
function cmdline_usage()
{
    echo "  "
    echo "  This script takes a reference ISO, unpacks it, adds and removes packages and then"
    echo "  builds a new ISO. ISOs of the Ubuntu distribution currently in development can be"
    echo "  found at: http://cdimage.ubuntu.com/daily-live/current/"
    echo " "
    echo "  Usage: ./mkiso -i <reference-iso> [-f]"
    echo "  "
    echo "  Where:"
    echo "    -i <reference-iso>    is the path to the ISO image from which our customized image will originate"
    echo "    -f                    build ISO image with only firmware test suite included and none of the other tests"
    echo "  "
    echo "  Example:"
    echo "      ./mkiso -i /tmp/ubuntu-9.10-desktop-amd64.iso"
}

# cmdline_process
#
# Process all the command line parameters and make sure we have all the ones
# that we requre.
#
function cmdline_process()
{
    while getopts "i:d:f" option; do
        case $option in
            i)  ISO="$OPTARG"
                ;;

            d)  DEB_DIR="$OPTARG"
                ;;

	    f)  FWTS_TEST=1
                ;;

            \?) echo -e "\n   *** Error: '$OPTARG' is not a valid option.\n"
                cmdline_usage
                exit 1
                ;;
        esac
    done

    if [ -z "$ISO" ]; then
        echo -e "\n   *** Error: An ISO image file must be specified.\n"
        cmdline_usage
        exit 1
    fi

    if [ ! -e $ISO ]; then
        echo -e "\n   *** Error: The ISO file: $ISO does not exist.\n"
        exit 1
    fi
}

# reference_iso_mount
#
# Mount the ISO image to the correct location
#
function reference_iso_mount()
{
    if [ -z "$ISO" ]; then
        echo -e "** Internal error: the ISO variable is null. We should have not gotten here."
        exit 1
    fi

    if [ -z "$MNT" ]; then
        echo -e "** Internal error: the MNT variable is null. We should have not gotten here."
        exit 1
    fi

    if [ ! -e $MNT ]; then
        mkdir -p $MNT

        if [ ! -e $MNT ]; then
            exit 1
        fi
    fi
    sudo mount -o loop $ISO $MNT

    if [ ! -e $MNT/ubuntu ]; then
        echo -e "** Internal error: It doesn't look like the ISO got mounted correctly"
        exit 1
    fi
}

# reference_iso_unmount
#
# Unmount / cleanup the original ISO image after we are done with it.
#
function reference_iso_unmount()
{
    if [ -z "$MNT" ]; then
        echo -e "** Internal error: the MNT variable is null. We should have not gotten here."
        exit 1
    fi

    sudo umount $MNT
}

# reference_iso_extract
#
# Extract the iso contents to a temporary location
#
function reference_iso_extract()
{
    if [ ! -e $EXTRACT ]; then
        mkdir -p $EXTRACT
    fi

    if [ -z "$EXTRACT" ]; then
        echo -e "** Internal error: the EXTRACT directory doesn't exist."
        exit 1
    fi

    rsync --exclude=/casper/filesystem.squashfs -a $MNT/ $EXTRACT
}

# new_iso_remove_pkgs
#
# We remove some of the standard package in order to make the iso size a little smaller.
# This helps if we are booting the ISO from flash drive or over the network.
#
function new_iso_remove_pkgs()
{
    # Remove packages we are not going to need to test with and are
    # big, thus reducing our size.
    #
    set -x
    sudo chroot $CHROOT sudo apt-get purge -y gimp
    sudo chroot $CHROOT sudo apt-get purge -y gnome-mahjongg gbrainy aisleriot quadrapassel gnome-sudoku
    sudo chroot $CHROOT sudo apt-get purge -y f-spot
    sudo chroot $CHROOT sudo apt-get purge -y transmission-gtk transmission-common
    sudo chroot $CHROOT sudo apt-get purge -y pitivi
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-gnome
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-gtk
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-calc
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-draw
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-emailmerge
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-help-en-us
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-hyphenation
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-hyphenation-en-us
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-impress
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-math
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-writer
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-thesaurus-en-au
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-thesaurus-en-us
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-style-human
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-base-core
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-common
    sudo chroot $CHROOT sudo apt-get purge -y openoffice.org-core
    sudo chroot $CHROOT sudo apt-get purge -y myspell-en-au myspell-en-gb myspell-en-za hunspell-en-ca hunspell-en-us
    sudo chroot $CHROOT sudo apt-get purge -y hunspell-en-ca hunspell-en-us
    sudo chroot $CHROOT sudo apt-get purge -y wbritish 
    sudo chroot $CHROOT sudo apt-get purge -y aspell-en wamerican
    sudo chroot $CHROOT sudo apt-get purge -y gwibber
    sudo chroot $CHROOT sudo apt-get purge -y empathy
    sudo chroot $CHROOT sudo apt-get purge -y tomboy
    sudo chroot $CHROOT sudo apt-get purge -y totem
    sudo chroot $CHROOT sudo apt-get purge -y gnomine
    sudo chroot $CHROOT sudo apt-get purge -y brasero
    sudo chroot $CHROOT sudo apt-get purge -y ubuntuone-client-gnome 
    sudo chroot $CHROOT sudo apt-get purge -y simple-scan
    sudo chroot $CHROOT sudo apt-get purge -y vinagre
    sudo chroot $CHROOT sudo apt-get purge -y tsclient
    sudo chroot $CHROOT sudo apt-get purge -y rhythmbox
    sudo chroot $CHROOT sudo apt-get purge -y evolution
}

# new_iso_add_kernel_team_tests
#
# The main reason for creating a custom iso is to add in a set of tests that the Ubuntu
# kernel team have put together. This function adds those tests and any support into the
# new iso tree.
#
function new_iso_add_kernel_team_tests()
{
    # Install the necessary packages to support the CouchDB that is used
    # by the test scripts to put results into a remote couch database.
    #
    sudo chroot $CHROOT sudo apt-get install -y curl
    sudo chroot $CHROOT sudo curl -O http://peak.telecommunity.com/dist/ez_setup.py
    sudo chroot $CHROOT sudo python ez_setup.py -U setuptools
    sudo chroot $CHROOT sudo easy_install -U Couchdbkit

    # The kernel team tests...
    # 
    sudo chroot $CHROOT sudo apt-get install -y dialog
    sudo chroot $CHROOT sudo apt-get install -y ffmpeg
    sudo chroot $CHROOT sudo apt-get install -y libdirectfb-1.2-0
    #sudo chroot $CHROOT sudo apt-get install -y mplayer
    sudo chroot $CHROOT sudo apt-get install -y vorbis-tools
    sudo chroot $CHROOT sudo apt-get install -y alsa-utils

    echo "/dev/sdb2        /ukt         ext2  defaults   0   0" | sudo tee -a $CHROOT/etc/fstab

    # Setup the autostart file so that as soon as the ubuntu user's
    # desktop starts up, the tests start as well.
    #
    sudo mkdir -p $CHROOT/home/ubuntu/.config/autostart/
    sudo cp $CWD/checkbox-kernel-qa.desktop $CHROOT/home/ubuntu/.config/autostart/
    sudo cp $CWD/tests_first_stage $CHROOT/home/ubuntu/tests_first_stage
    sudo chown 999.999 $CHROOT/home/ubuntu/tests_first_stage
    sudo chmod +x $CHROOT/home/ubuntu/tests_first_stage

    #sudo sudo ln -s /media/ukt/results $CHROOT/home/ubuntu/results
    sudo rsync -arv $CWD/kernel-qa $CHROOT/home/ubuntu/
    sudo chown -R 999.000 $CHROOT/home/ubuntu/kernel-qa
    sudo chmod +x $CHROOT/home/ubuntu/kernel-qa/tests_starter
}

# new_iso_add_kernel_team_fwts_tests
#
# Install the firmware test suite tests into the custom iso and setup the default
# login to automatically run the tests.
#
function new_iso_add_kernel_team_fwts_tests()
{
    sudo chroot $CHROOT sudo add-apt-repository ppa:firmware-testing-team/ppa-firmware-test-suite-dev
    sudo chroot $CHROOT sudo apt-get update
    sudo chroot $CHROOT sudo apt-get install -y --force-yes fwts
    sudo chroot $CHROOT sudo apt-get install -y --force-yes dialog

    # Setup the autostart file so that as soon as the ubuntu user's
    # desktop starts up, the tests start as well.
    sudo mkdir -p $CHROOT/home/ubuntu/.config/autostart/
    sudo cp $CWD/checkbox-kernel-qa.desktop $CHROOT/home/ubuntu/.config/autostart/
    sudo cp $CWD/tests_first_stage_fwts $CHROOT/home/ubuntu/tests_first_stage
    sudo cp $CWD/tests_fwts $CHROOT/home/ubuntu/tests_fwts
    sudo chown 999.999 $CHROOT/home/ubuntu/tests_first_stage
    sudo chown 999.999 $CHROOT/home/ubuntu/tests_fwts
    sudo chmod +x $CHROOT/home/ubuntu/tests_first_stage
    sudo chmod +x $CHROOT/home/ubuntu/tests_fwts
}

# new_iso_initialize
#
# Extract the squashfs from the ISO and start building up the custom ISO 
# location.
#
function new_iso_initialize()
{
    # Note: The $CUSTOM_ISO directory is actually the unsquashfs'd filesystem.squashfs
    #       from the original ISO
    sudo unsquashfs $MNT/casper/filesystem.squashfs
    sudo mv squashfs-root $CHROOT
    sudo cp /etc/hosts $CHROOT/etc/
    sudo cp /etc/resolv.conf $CHROOT/etc/

    sudo mount --bind /dev $CHROOT/dev
    sudo chroot $CHROOT mount -t proc none /proc
    sudo chroot $CHROOT mount -t sysfs none /sys
    sudo chroot $CHROOT mount -t devpts none /dev/pts
}

# new_iso_customize
#
# Do all the customizations we are going to do here.
#
function new_iso_customize()
{
    # set up pre-requisites to install packages
    UUID=`sudo chroot $CHROOT dbus-uuidgen`
    echo $UUID > $TEMPDIR/uuid
    sudo mv $TEMPDIR/uuid $CHROOT/var/lib/dbus/machine-id
    sudo chroot $CHROOT dpkg-divert --local --rename --add /sbin/initctl
    sudo chroot $CHROOT ln -s /bin/true /sbin/initctl

    # inject custom packages
    ISO_KERNEL=`sudo chroot $CHROOT dpkg-query -W -f='${Package}' "linux-image-*-generic"`
    ISO_KERNEL_HEADERS=`sudo chroot $CHROOT dpkg-query -W -f='${Package}' "linux-headers-*-generic"`

    # We modify sudoers so the ubuntu user can sudo without putting in
    # a password.
    #
    sudo cp $CWD/sudoers $CHROOT/etc/sudoers
    sudo chown root.root $CHROOT/etc/sudoers
    sudo cp $CWD/libgl-select.conf $CHROOT/etc/init

    # Modify the isolinux.cfg file so that the user isn't prompted to
    # install the iso and to time out quicker.
    #
    sudo cp $CWD/syslinux.cfg $EXTRACT/isolinux/isolinux.cfg

    sudo cp $CWD/sources.list $CHROOT/etc/apt/
    sudo chroot $CHROOT sudo apt-get update

    new_iso_remove_pkgs

    sudo chroot $CHROOT sudo apt-get install -y patch

    if [ -z "$FWTS_TEST" ]; then
        new_iso_add_kernel_team_tests
    else
        new_iso_add_kernel_team_fwts_tests
    fi
}

# new_iso_prepare_for_assemble
#
# Clean up. Unmount the chroot mount points.
#
function new_iso_prepare_to_assemble()
{
    sudo chroot $CHROOT sudo apt-get clean
    sudo chroot $CHROOT sudo rm /var/lib/dbus/machine-id
    sudo chroot $CHROOT sudo rm /etc/resolv.conf
    sudo chroot $CHROOT sudo rm /etc/hosts
    sudo chroot $CHROOT sudo rm /sbin/initctl
    sudo chroot $CHROOT sudo dpkg-divert --rename --remove /sbin/initctl
    sudo chroot $CHROOT sudo rm -rf /tmp/*

    sudo chroot $CHROOT umount /proc
    sudo chroot $CHROOT umount /sys
    sudo chroot $CHROOT umount /dev/pts
    sudo umount $CHROOT/dev
}

# new_iso_assemble
#
# Take what we've done and assemble it all up into a new ISO.
#
function new_iso_assemble()
{
    # Assemble iso. . .
    # Regenerate manifest
    chmod +w $EXTRACT/casper/filesystem.manifest
    sudo chroot $CHROOT dpkg-query -W --showformat='${Package} ${Version}\n' > $EXTRACT/casper/filesystem.manifest
    sudo cp $EXTRACT/casper/filesystem.manifest $EXTRACT/casper/filesystem.manifest-desktop
    sudo sed -i '/ubiquity/d' $EXTRACT/casper/filesystem.manifest-desktop
    sudo sed -i '/casper/d' $EXTRACT/casper/filesystem.manifest-desktop

    # Compress filesystem
    #sudo rm $EXTRACT/casper/filesystem.squashfs
    sudo mksquashfs $CHROOT $EXTRACT/casper/filesystem.squashfs

    # Create new md5sum
    cd $EXTRACT
    sudo rm md5sum.txt
    find -type f -print0 | sudo xargs -0 md5sum | grep -v isolinux/boot.cat | sudo tee md5sum.txt

    # Create ISO
    CUSTOM_NAME=`basename $ISO .iso`
    sudo mkisofs -D -r -V "$IMAGE_NAME" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o /tmp/$CUSTOM_NAME-custom.iso .
}

# ----------------------------------------------------------------------------
# Call all the functions in the correct order to produce a new, custom, ISO
#

CWD=`pwd`
ISO=""
DEB_DIR=""
TEMPDIR=`mktemp -d`
MNT="$TEMPDIR/mnt"
EXTRACT="$TEMPDIR/extract-iso"
CHROOT="$TEMPDIR/custom-iso"

mkdir $MNT
mkdir $EXTRACT

# Make sure we have all the packages installed that we
# are going to need for this little adventure.
#
verify_environment

# Get the location of the reference ISO from the command
# line.
#
cmdline_process $@

# Using the reference ISO as a base, intialize a directory
# tree where we will do our customizations and which will
# later be bundled up into the new ISO.
#
reference_iso_mount
reference_iso_extract
cd $TEMPDIR
new_iso_initialize

# Done with the reference ISO
#
reference_iso_unmount

# Do all our customization and create the new ISO.
#
new_iso_customize
new_iso_prepare_to_assemble
new_iso_assemble

# Clean up
sudo rm -rf $TEMPDIR

# vi:set ts=4 sw=4 expandtab:
