#!/bin/bash
#==============================================================================
# Remote build script (must reside in top-level directory of base directory.
#==============================================================================
cd $(dirname $0)
LOG="$(pwd)/build.log"
BPID=0
LPID=0
# Older build environments check against unset variable.
unset AUTOBUILD
BUILDTARGET="kernel"

#
# Might come from config file
#
STATUSFILE="$(pwd)/build-status"
CONCURRENCY_LEVEL=0
if [ -r build.cfg ]; then
	. build.cfg
fi

while [ $# -gt 0 ]; do
	case $1 in
		-a)
			AUTOBUILD=1
			;;
		-c|--concurrency)
			CONCURRENCY_LEVEL=$2
			shift
			;;
		-c*)
			CONCURRENCY_LEVEL=$(echo $1|cut -c3-)
			;;
		--lum)
			BUILDTARGET="lum"
			;;
		-*|--*)
			echo "Unknown option $1" >&2
			exit 1
			;;
	esac
	shift
done
export AUTOBUILD

if [ $CONCURRENCY_LEVEL -eq 0 ]; then
	CONCURRENCY_LEVEL=$(getconf _NPROCESSORS_ONLN)
fi

if [ -d /usr/lib/ccache ]; then
	export PATH=/usr/lib/ccache:$PATH
	export CCACHE_DIR=$(pwd)/ccache

	echo "Using ccache in $CCACHE_DIR"
	test -d	 $CCACHE_DIR || mkdir $CCACHE_DIR
fi

function GetVersion()
{
	 head -1 debian/changelog | sed 's/.*(\(.*\)).*$/\1/' | cut -d. -f1-3
}

function BuildLUM()
{
	local VER
	local NAME
	local HEADER
	local HEADERS
	local FLAVOURS

	VER=$(GetVersion)
	HEADERS=$(ls -1 ../linux-headers-$VER-* | grep -v _all.deb)
	for HEADER in $HEADERS; do
		FLAVOURS="$FLAVOURS$(echo $HEADER|cut -d- -f5|cut -d_ -f1) "
	done

	cat <<-EOD >>$STATUSFILE
	FLAVOURS="$FLAVOURS"
	PKGPREFIX="linux-ubuntu-modules-$VER-"
	ACTION=prepare
	EOD

	# Remove any previously built packages.
	rm -f ../linux-ubuntu-modules-$VER-*
	rm -f ../linux-headers-lum-$VER-*

	if [ -d headers ]; then
		echo "Removing old headers..."
		rm -rf headers
	fi
	echo "Extracting global headers..."
	dpkg-deb -x ../linux-headers-${VER}_*_all.deb headers || return 1
	sync

	echo "ACTION=build" >>$STATUSFILE
	for HEADER in $HEADERS; do
		NAME=$(echo $HEADER | cut -d- -f5 | cut -d_ -f1)
		echo "Building LUM for $NAME"
		echo "FLAVOUR=$NAME" >>$STATUSFILE
		dpkg-deb -x $HEADER headers
		fakeroot debian/rules clean || return 1
		fakeroot debian/rules \
			KDIR=$(pwd)/headers/usr/src/linux-headers-$VER-$NAME \
			binary-modules-$NAME
		if [ $? -ne 0 ]; then
			return 1
		fi
	done
	rm -rf headers
	sync
}
	
function Cleanup()
{
	if ps hp$BPID >/dev/null 2>&1; then
		kill $BPID
	fi
	if ps hp$LPID >/dev/null 2>&1; then
		kill $LPID
	fi
	if [ "$1" != "0" ]; then
		echo "Failure($1)" >>$LOG
		echo "STATE=failed" >$STATUSFILE
	else
		rm -f $STATUSFILE
	fi
	wait
	exit 0
}
trap 'Cleanup 3' INT QUIT TRAP USR1 PIPE TERM

cat <<-ENDSTATUS >$STATUSFILE
STATE=building
BUILDTARGET=${BUILDTARGET}
PID=$$
ENDSTATUS

echo "${BUILDTARGET} build started $(date)" >$LOG

case "${BUILDTARGET}" in
	kernel)
		cd ubuntu-2.6
		VER=$(GetVersion)
		cat <<-EOD >>$STATUSFILE
		VER=$VER
		PKGPREFIX="linux-image-$VER-"
		ACTION=prepare
		EOD
		rm -f ../linux-image-$VER-*
		fakeroot debian/rules clean >$LOG 2>&1 || Cleanup $?
		echo "ACTION=headers" >>$STATUSFILE
		fakeroot debian/rules binary-headers \
			CONCURRENCY_LEVEL=$CONCURRENCY_LEVEL >>$LOG 2>&1 ||
			echo "WARNING: no headers target!" >>$LOG
		echo "ACTION=kernel" >>$STATUSFILE
		fakeroot debian/rules binary-arch \
			CONCURRENCY_LEVEL=$CONCURRENCY_LEVEL >>$LOG 2>&1 &
		BPID=$!
		;;
	lum)
		cd ubuntu-2.6-lum
		BuildLUM >>$LOG 2>&1 &
		BPID=$!
		;;
	*)
		Cleanup 4
		exit 0
		;;
esac

tail -f $LOG &
LPID=$!

wait $BPID
Cleanup $?

exit 0
