#!/bin/bash
#
# This scripts performs a build given a release, a repository, and an architecture
#
CDIR="`dirname $0`"
. $CDIR/ukb.conf

UKB_DB="$CDIR/ukb"
RELEASE=
BRANCH=
ARCH=

usage()
{
	echo $0 [--arch=ARCH] [--repo=REPO] --release=RELEASE --branch=BRANCH [--bdir=BUILD_DIR] [--clean]
	echo ex: $0 --arch=amd64 --release=lucid --branch=master-next
	exit 1
}

while [ $# -ne 0 ]; do
	case $1 in
		--arch=*)
			ARCH=$(echo $1|cut -d= -f2)
			;;
		--repo=*)
			REPO_URL=$(echo $1|cut -d= -f2)
			;;
		--release=*)
			RELEASE=$(echo $1|cut -d= -f2)
			;;
		--branch=*)
			BRANCH=$(echo $1|cut -d= -f2)
			;;
		--bdir=*)
			UKB_DEF_BUILD_DIR_BASE=$(echo $1|cut -d= -f2)
			;;
		--clean)
			CLEAN=yes
			;;
		--help)
			usage
			;;
		*)
			echo Unknown option \'$1\`
			usage
			;;
	esac
	shift
done

#
# Make sure the release exists
#
if [ -z "$RELEASE" ]
then
	echo You must specify a release
	usage
fi
if ! find $UKB_DB -maxdepth 1 | grep $RELEASE 2>&1 > /dev/null
then
	echo Could not find release \'$RELEASE\'
	exit 1
fi

#
# Make sure the release supports this architecture
#
if [ -z "$ARCH" ]
then
	if [ "$HOST_ARCH" = "amd64" ]
	then
		echo You must specify an architecture on amd64.
		usage
	fi
	ARCH="$HOST_ARCH"
fi
if ! arch_supported $UKB_DB $RELEASE $ARCH
then
	echo Could not find arch \'$ARCH\'
	exit 1
fi

#
# Make sure branch is not empty.
#
if [ -z "$BRANCH" ]
then
	echo Branch cannot be empty.
	usage
fi

#
# Check for the build directory. If its not there, then attempt to create it
#
BDIR="$UKB_DEF_BUILD_DIR_BASE/$RELEASE/$ARCH/$BRANCH"
if ! mkdir -p $BDIR
then
	echo Could not make build directory $BDIR
	exit 1
fi

if [ -d $UKB_DEF_REFERENCE_REPO_DIR/ubuntu-$RELEASE.git ]
then
	RREF="--reference $UKB_DEF_REFERENCE_REPO_DIR/ubuntu-$RELEASE.git"
fi

if [ -z "$REPO_URL" ]
then
	REPO_URL="$UKB_DEF_REPO_URL/ubuntu-$RELEASE.git"
fi

RDIR=$BDIR/ubuntu-$RELEASE

#
# Do a pre-clean
#
if [ ! -z "$CLEAN" ] && [ -f $RDIR/Makefile ]
then
	rm -rf $RDIR
fi

#
# If the repo has not been checked out, then attempt to get it.
#
if [ ! -f $RDIR/Makefile ]
then
	pushd $BDIR
	if ! git clone $RREF $REPO_URL `basename $RDIR`
	then
		echo Could not checkout $REPO_URL
		exit 1
	fi
	popd
fi

#
# Checkout the right branch
#
pushd $RDIR
if ! git branch | grep $BRANCH
then
	if ! git checkout -b $BRANCH `git branch -a|grep $BRANCH`
	then
		echo Could not checkout branch $BRANCH
		exit 1
	fi
fi
popd

#
# Finally, do the build
#
get_chroot $RELEASE $ARCH
echo CHROOT $CHROOT
pushd $RDIR

if [ ! -f debian/control ] || [ ! -z "$CLEAN" ]
then
	echo "fakeroot debian/rules clean arch=$ARCH" | $CHROOT --directory=`pwd`
fi

CL="`cat /proc/cpuinfo |grep "^processor"|wc -l`"

if ! echo "CONCURRENCY_LEVEL=$CL fakeroot dpkg-buildpackage -B -us -uc 2>&1 | tee log.txt" | $CHROOT --directory=`pwd`
then
	echo $RELEASE $ARCH $BRANCH failed.
	exit 1
fi

popd
