#!/bin/bash
function ScriptUsage()
{
	echo "    Usage: $(basename $0) [<options>] <system> [...]"
}

function ScriptSpecificHelp()
{
	echo "        -b | --branch <branch>"
	echo "                      The specified git repository branch is used "
	echo "                      rather than the default branch (master)."
	echo " "
}

. $(dirname $0)/build-common

BRANCH="master"
DRYRUN=false
TARGETS=""
while [ $# -gt 0 ]; do
	case $1 in
		-b|--branch)
			BRANCH="$2"
			shift
			;;
		--dry-run)
			DRYRUN=true
			;;
		-*|--*)
			echo "Unknown option <$1>!" >&2
			exit 1
			;;
		*)
			TARGETS="$TARGETS $1"
			;;
	esac
	shift
done

if [ "${TARGETS}" = "" ]; then
	echo "Usage: $(basename $0) [<options>] <system|group> [...]"
	exit 1
fi

GetDistroEnvironment "${DIST}" || exit 1

if [ ! -d ${SRCDIR}/.git ]; then
	echo "${SRCDIR} is not a repository!" >&2
	exit 1
fi
cd $SRCDIR

if [ "$(git branch|grep "${BRANCH}")" = "" ]; then
	echo "No branch <${BRANCH}> found!" >&2
	exit 1
fi

TMPVAL=$(git show ${BRANCH}:debian/debian.env 2>/dev/null)
if [ "$TMPVAL" != "" ]; then
	eval $TMPVAL
else
	eval $(git show ${BRANCH}:debian/rules|grep '^DEBIAN=')
	if [ "$DEBIAN" = "" ]; then
		DEBIAN="debian"
	fi
fi

PKG_INFO="$(git show ${BRANCH}:${DEBIAN}/changelog | head -1)"
FULLVER=$(echo $PKG_INFO | awk '{print substr($2, 2, length($2)-2)}')
VER=$(echo $FULLVER|cut -d- -f1)
REL=$(echo $FULLVER|cut -d- -f2)
ABI=$(echo $REL|cut -d. -f1)
TMPDIR="$(pwd)/abi-tmp"
ABIDIR="$(pwd)/${DEBIAN}/abi/$FULLVER"

#
# Build a list of package that should have been build with version information.
# All flavours should be defined in $DEBIAN/control.d/vars.*
# Sub-flavours are not controlled with ABI checks, neither are custom binaries.
#
PKG_NAME=$(
	git show $BRANCH:$DEBIAN/control.d/flavour-control.stub |
	awk '
		/Package:/{
			pkg=$2
		}
		/Provides:.*linux-image/{
			sub(/-PKGVER-ABINUM-FLAVOUR/, "", pkg)
			print pkg
		}
			'
)-$VER-$ABI
PKG_LIST="$(
	for FILE in $(git show $BRANCH:$DEBIAN/control.d); do
		if [ "$(echo $FILE | cut -d. -f1)" != "vars" ]; then
			continue
		fi
		FLAVOUR=$(echo $FILE|cut -d. -f2-)
		eval $(git show $BRANCH:$DEBIAN/control.d/$FILE)
		for i in $arch; do
			echo $PKG_NAME-${FLAVOUR}_${FULLVER}_$i.deb
		done
	done
)"

GetABIFrom()
{
	local PKG="$1"
	local HOST="$2"
	local ABIVER
	local MODDIR

	if [ -f $ABIDIR/$PKGARCH/$FLAVOUR ]; then
		echo "II: Already got $ARCH/$FLAVOUR"
		return 0
	fi
	echo "Fetching $PKG from $TARGET..."
	if [ "$DRYRUN" = "true" ]; then
		return 0
	fi
	scp $HOST:$BASEDIR/$PKG . 2>/dev/null
	if [ ! -f $PKG ]; then
		echo "EE: Failed to download $PKG"
		return 1
	fi
	echo "Extracting..."
	dpkg-deb --extract $PKG tmp
	if [ $? -eq 0 ]; then
		if [ -f tmp/boot/abi-* ]; then
			if [ ! -d $ABIDIR/$ARCH ]; then
				mkdir -p $ABIDIR/$ARCH
			fi
			mv tmp/boot/abi-* $ABIDIR/$ARCH/$FLAVOUR
				ABIVER="$VER-$ABI-$FLAVOUR"
				MODDIR="tmp/lib/modules/$ABIVER/kernel"
				find $MODDIR -name '*.ko' \
					-exec basename {} .ko \; | sort \
					>$FLAVOUR.modules
				mv $FLAVOUR.modules $ABIDIR/$ARCH
				echo "DONE"
		else
			echo "NO ABI FILE"
		fi
	else
		echo "FAILED"
	fi
	rm -rf tmp $PKG

	return 0
}

if [ "$DRYRUN" != "true" ]; then
	if [ ! -d $ABIDIR ]; then
		mkdir $ABIDIR
	fi
	echo "$ABI" >$ABIDIR/abiname
fi

for PKG in $PKG_LIST; do
	FLAVOUR=$(echo $PKG|cut -d- -f5-|cut -d_ -f1)
	PKGARCH=$(echo $PKG|cut -d_ -f3|cut -d. -f1)
	PKGDONE=false
	for TARGET in $(ExpandHostGroups $TARGETS); do
		GetHostEnvironment ${TARGET} 2>/dev/null
		if [ $? -ne 0 ]; then
			SYSNAME="$TARGET"
			continue
		fi
		if [ "$ARCH" = "$PKGARCH" ]; then
			GetABIFrom $PKG $HOST && PKGDONE=true; break
		fi
	done
	if ! $PKGDONE; then
		echo "WW: No host to get $PKG"
	fi
done

