#!/usr/bin/perl

use strict;

my $P = 'config-compare';

my %values;

# Predicate execution engine.
my %pred_attr;
sub pred_do {
	my ($pred) = @_;
	my (@a) = split(' ', $pred);
	my $possible;

	if ($a[0] eq 'arch') {
		die "$P: $pred: malformed -- $pred <arch>\n" if ($#a < 1);
		for $possible (@a[1..$#a]) {
			#print "    *** ARCH<$flavour ?? $possible>\n";
			return 1 if ($pred_attr{'arch'} eq $possible);
		}
		return 0;
	} elsif ($a[0] eq 'flavour') {
		die "$P: $pred: malformed -- $pred <flavour>\n" if ($#a < 1);
		for $possible (@a[1..$#a]) {
			#print "    *** FLAVOUR<$flavour ?? $a[1]>\n";
			return 1 if ($pred_attr{'flavour'} eq $possible);
		}
		return 0;
	} elsif ($a[0] eq 'value') {
		@a = ($a[0], $pred_attr{'option'}, @a[1..$#a]) if ($#a == 1);
		die "$P: $pred: malformed -- $pred <name> <val>\n" if ($#a != 2);
		#warn "    *** CHECK<$a[1] $a[2] ?? " . $values{$pred_attr{'column'}, $a[1]} . ">\n";
		return ($values{$pred_attr{'column'}, $a[1]} eq $a[2]);
	} elsif ($a[0] eq 'exists') {
		@a = ($a[0], $pred_attr{'option'}, @a[1..$#a]) if ($#a == 1);
		die "$P: $pred: malformed -- $pred <name>\n" if ($#a != 1);
		return (defined $values{$pred_attr{'column'}, $a[1]});
	} else {
		die "$P: $pred: unknown predicate\n";
	}
	return 1;
}
sub pred_first {
	my ($rest) = @_;
	my $depth = 0;
	my $off;
	my $char;
	my $pred;
	
	for ($off = 0; $off <= length($rest); $off++) {
		$char = substr($rest, $off, 1);
		if ($char eq '(') {
			$depth++;
		} elsif ($char eq ')') {
			$depth--;
		} elsif ($depth == 0 && $char eq '&') {
			last;
		} elsif ($depth == 0 && $char eq '|') {
			last;
		}
	}
	if ($depth > 0) {
		die "$P: $rest: missing close parenthesis ')'\n";
	} elsif ($depth < 0) {
		die "$P: $rest: missing open parenthesis '('\n";
	}

	($pred, $rest) = (substr($rest, 0, $off), substr($rest, $off + 1));

	$pred =~ s/^\s*//;
	$pred =~ s/\s*$//;

	#print "pred<$pred> rest<$rest> char<$char>\n";
	($pred, $rest, $char);
}
sub pred_exec {
	my ($rest) = @_;
	my $pred;
	my $cut = 0;
	my $res;
	my $sep;

	#print "pred_exec<$rest>\n";

	($pred, $rest, $sep) = pred_first($rest);

	# Leading ! implies inversion.
	if ($pred =~ /^\s*!\s*(.*)$/) {
		#print " invert<$1>\n";
		($cut, $res) = pred_exec($1);
		$res = !$res;

	# Leading / implies a CUT operation.
	} elsif ($pred =~ /^\s*\/\s*(.*)$/) {
		#print " cut<$1>\n";
		($cut, $res) = pred_exec($1);
		$cut = 1;

	# Recurse left for complex expressions.
	} elsif ($pred =~ /^\s*\((.*)\)\s*$/) {
		#print " left<$1>\n";
		($cut, $res) = pred_exec($1);

	# Check for common syntax issues.
	} elsif ($pred eq '') {
		if ($sep eq '&' || $sep eq '|') {
			die "$P: $pred$rest: malformed binary operator\n";
		} else {
			die "$P: $pred$rest: syntax error\n";
		}
		
	# A predicate, execute it.
	} else {
		#print " DO<$pred> sep<$sep>\n";
		$res = pred_do($pred);
	}

	#print " pre-return res<$res> sep<$sep>\n";
	if ($sep eq '') {
		#
		
	# Recurse right for binary operators -- note these are lazy.
	} elsif ($sep eq '&' || $sep eq '|') {
		#print " right<$rest> ? sep<$sep> res<$res>\n";
		if ($rest =~ /^\s*($|\||\&)/) {
			die "$P: $pred$rest: malformed binary operator\n";
		}
		if ($cut == 0 && (($res && $sep eq '&') || (!$res && $sep eq '|'))) {
			#print " right<$rest>\n";
			($cut, $res) = pred_exec($rest);
		}

	} else {
		die "$P: $pred$rest: malformed predicate\n";
	}
	#warn " return cut<$cut> res<$res> sep<$sep>\n";
	return ($cut, $res);
}
sub policy_check {
	my ($column, $option, $policy) = @_;

	# Pull out the arch and flavour from the column name.
	($pred_attr{'arch'}, $pred_attr{'flavour'}) = split(/-/, $column, 2);

	$pred_attr{'column'} = $column;
	$pred_attr{'option'} = $option;

	my ($cut, $res) = pred_exec($policy);
	#print "CUT<$cut> RES<$res>\n";
	return $res;
}

my %options;
my @options;

my $policy = 1;

my $info = 0;
my %flags;
my %expected;
my %policy;

my $sort = 0;

while (1) {
	if ($ARGV[0] eq '--required') {
		open(RQRD, "<$ARGV[1]") || die "$0: $ARGV[1]: open failed - $!\n";
		while (<RQRD>) {
			chomp;

			if (!defined $options{$_}) {
				$options{$_} = 1;
				push(@options, $_);
			}
		}
		close(RQRD);
		shift @ARGV;
		shift @ARGV;

	}  elsif ($ARGV[0] eq '--no-policy') {
		$policy = 0;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--info') {
		my ($config, $maybe, $default, $expected, $options, $option, $value);
		$info = 1;
		open(INFO, "<$ARGV[1]") || die "$0: $ARGV[1]: open failed - $!\n";
		while (<INFO>) {
			chomp;
			($config, $maybe, $default, $expected, $options) = split(' ', $_, 5);
			while ($options =~ /\s*(\S+)<(.*?)?>/g) {
				($option, $value) = ($1, $2);
				if ($option eq 'flag') {
					$flags{$config} .= " '''$value'''";
				} elsif ($option eq 'note') {
					$flags{$config} .= " $2";
				} elsif ($option eq 'choice') {
					$flags{$config} .= " '''CHOICE'''";
				} elsif ($option eq 'policy') {
					$policy{$config} = $value;
					#$flags{$config} .= " '''policy=$value'''";
					$expected = $value;
				}
			}
			$values{'Policy', $config} = $expected;
			if (!defined $policy{$config} &&
			    $expected ne 'c' && $expected ne '-') {
				$policy{$config} = "value $expected";
			}
		}
		close(INFO);
		shift @ARGV;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--sort') {
		$sort = 1;
		shift @ARGV;

	} else {
		last;
	}
}

# No info, no policy checks...
if ($info == 0) {
	$policy = 0;
}

my @columns = @ARGV;

my $opt;
my $is;
for my $column (@columns) {
	open(CONFIG, "<$column") || die "$0: $column: open failed - $!\n";
	while (<CONFIG>) {
		chomp;

		if ($_ =~ /^# (\S+) is not set/) {
			$opt = $1;
			$is = 'n';
		} elsif ($_ =~ /(\S+)=(\S+)/) {
			$opt = $1;
			$is = $2;
		} else {
			next;
		}

		$values{$column, $opt} = $is;

		if (!defined $options{$opt}) {
			$options{$opt} = 1;
			push(@options, $opt);
		}
	}
	close(CONFIG);
}

@options = sort(@options) if ($sort);

push(@columns, "Policy") if ($policy);

print "|| '''Option'''";
for my $column (@columns) {
	print " || '''$column'''";
}
print " || '''Comments''' ||\n";
my $val;
my $cmt;
my $seen;

my $ok;

if (!$policy) {
	%policy = ();
}
for my $option (@options) {
	$seen = '';
	$cmt = '';
	$ok = 1;
	print "|| $option";
	for my $column (@columns) {
		$is = (defined $values{$column, $option})?
				$values{$column, $option} : '-';
		# If we have no policy at all then pick the first valid entry.
		if (!defined $policy{$option} && $is ne '-') {
			$policy{$option} = "value $is";
		}
		if ($policy{$option}) {
			if ($column eq 'Policy' ||
			    !defined $values{$column, $option} ||
			    policy_check($column, $option, $policy{$option})) {
				print " || $is";
			} else {
				print " || '''$is'''";
				$ok = 0;
			}
		} else {
			print " || $is";
		}
		$seen++ if ($is ne '-' && $column ne 'Policy');
	}
	if ($seen == 0) {
		$cmt .= " '''GONE'''";
	}
	if (!$ok) {
		$cmt .= " '''Inconsistent'''";
	}
	if ($flags{$option}) {
		$cmt .= $flags{$option};
	}
	print " || $cmt ||\n";
}
