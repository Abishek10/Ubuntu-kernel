#!/usr/bin/python3

import sys
import re

info_option = re.compile(r'\s*(\S+)<(.*?)>')

(output, annots) = sys.argv[1:3]

# Load in the tree annotations.
annotations = {}
with open(annots) as inf:
    for line in inf:
        if line[0] in ('#', '\n'):
            continue

        line = line.rstrip()
        a = line.split(None, 2)
        if len(a) != 3:
            a.append('')
        (config, value, info) = a

        if config not in annotations:
            annotations[config] = (value, info)
        else:
            (ovalue, oinfo) = annotations[config]
            if value == '-':
                value = ovalue
            info = oinfo + ' ' + info

            annotations[config] = (value, info.strip())
                

# Load in the various architecture lists, take the first one for each option.
# Apply annotations as above as we go.
values = {}
vnames = []
aused = {}
for merge in sys.argv[3:]:
    with open(merge) as inf:
        for line in inf:
            line = line.rstrip()
            a = line.split(None, 4)
            if a[0] in values:
                continue

            # Merge in any annotations.
            if a[0] in annotations:
                aused[a[0]] = True
                (value, info) = annotations[a[0]]
                a[4] = info + ' ' + a[4]
                if value != '-':
                    a[3] = value

            # Elide duplicate flags and marks.
            info = ''
            flags = {}
            matches = info_option.finditer(a[4])
            for match in matches:
                flag_type = match.group(1)
                flag_key = match.group(1) + match.group(2)
                if flag_type in ('flag', 'mark'):
                    if flag_key in flags:
                        continue
                    flags[flag_key] = True
                
                info += match.group(0).strip() + ' '
            a[4] = info

            vnames.append(a[0])
            values[a[0]] = a;
            

with open(output, "w") as outf:
    for option in vnames:
        outf.write(' '.join(values[option]).rstrip() + '\n')

for option in annotations:
    if option not in aused:
        print("WARNING: " + option + " annotation of non-existant option")
