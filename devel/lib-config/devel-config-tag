#!/usr/bin/perl

use strict;

if ($#ARGV != 3) {
	die "Usage: $0 <defaults> <experimental> <staging> <overrides>\n";
}

my ($defaults, $experimental, $staging, $overrides) = @ARGV;
my %options;
my %modenote;

my ($option, $maybe, $default);
open(DEFAULTS, "<$defaults") || die "$0: $defaults: open failed - $!\n";
while (<DEFAULTS>) {
	chomp;

	($option, $maybe, $default) = split(' ');

	# Create the 'expected' column.
	$options{$option} = join(' ', ($maybe, $default, $default));
}
close(DEFAULTS);

my @oa;
my ($note, $mode);
open(EXPERIMENTAL, "<$experimental") ||
	die "$0: $experimental: open failed - $!\n";
while (<EXPERIMENTAL>) {
	chomp;

	@oa = split(' ', $options{$_});

	# We default EXPERIMENTAL options off by default.
	($mode, $note) = ('n', '');

	if ($_ =~ /^CONFIG_SENSORS_/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "sensors are opt-in");

	} elsif ($_ =~ /^CONFIG_[^_]*_?FS$/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "filesystems are opt-in");

	} elsif ($_ =~ /^CONFIG_[SP]ATA_/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "ATA drivers are opt-in");

	} elsif ($_ =~ /^CONFIG_INPUT_/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "input drivers are opt-in");

	} elsif ($_ =~ /^CONFIG_NETFILTER_XT_/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "netfilter targets are opt-in");

	} elsif ($_ =~ /^CONFIG_HID_/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "HID drivers are opt-in");

	} elsif ($_ =~ /^CONFIG_CRYPTO_/ && $oa[2] eq 'm') {
		($mode, $note) = ('m', "CRYPTO drivers are opt-in");
	}
	$oa[2] = 'n';

	push(@oa, "flag<EXPERIMENTAL>");
	$options{$_} = join(' ', @oa);

	$note = "note<$note>" if ($note);
	$modenote{$_} = [$mode, $note] if ($mode ne 'n');
}
close(EXPERIMENTAL);

open(STAGING, "<$staging") ||
	die "$0: $staging: open failed - $!\n";
while (<STAGING>) {
	chomp;

	$options{$_} .= " flag<STAGING>";
}
close(STAGING);

my @oa;
my ($mode, $note);
foreach my $key (sort keys %options) {
	($mode, $note) = ('', undef);

	@oa = split(' ', $options{$key});

	# We default DEBUG options off.
	if ($key =~ /_DEBUG(_FS$|_|$)/) {
		($mode, $note) = ('n', undef);
		$oa[2] = 'n';

	# NET_VENDOR_* represents vendor specific groupings, alway enable.
	} elsif ($oa[2] ne 'y' && $key =~ /^CONFIG_NET_VENDOR_/) {
		($mode, $note) = ('y', "VENDOR driver group always enabled");
	
	# *_PHY represent network PHY devices, always enable.
	#   http://marc.info/?l=linux-netdev&m=125700321922154&w=2
	} elsif ($_ =~ /^CONFIG_.*_PHY/ && $oa[2] eq 'm') {
		($mode, $note) = ('y', "PHY drivers are not autoloadable");
	}

	$options{$key} = join(' ', @oa);
	if ($mode) {
		$note = "note<$note>" if ($note);
		$modenote{$key} = [$mode, $note];
	}
}

my @ea;
open(OVERRIDES, "<$overrides") ||
	die "$0: $overrides: open failed - $!\n";
while (<OVERRIDES>) {
	chomp;

	next if ($_ =~ /^$/ || $_ =~ /^#/);

	@ea = split(' ');

	@oa = split(' ', $options{$ea[0]});
	$oa[0] = '-' if ($oa[0] eq '');
	$oa[1] = '-' if ($oa[1] eq '');
	$oa[2] = '-' if ($oa[2] eq '');

	# Set the option to the specified value and add any other options
	$modenote{$ea[0]} = [$ea[1], join(' ', @ea[2..$#ea])];

	$options{$ea[0]} = join(' ', @oa);
}
close(OVERRIDES);

foreach my $key (sort keys %options) {
	if ($modenote{$key}) {
		($mode, $note) = @{$modenote{$key}};

		@oa = split(' ', $options{$key});
		if ($mode && $mode ne '-') {
			if ($oa[2] ne $mode && $note) {
				push(@oa, "flag<policy=$mode>");
			}
			$oa[2] = $mode;
		}
		push(@oa, $note) if ($note);
		$options{$key} = join(' ', @oa);
	}
	print "$key $options{$key}\n";
}
