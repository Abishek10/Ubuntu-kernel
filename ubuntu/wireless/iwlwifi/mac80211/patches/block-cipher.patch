Switch crypto system to older non-block cipher algorithms.
-----
diff -upr pre/net/mac80211/aes_ccm.c post/net/mac80211/aes_ccm.c
--- pre/net/mac80211/aes_ccm.c	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/aes_ccm.c	2007-03-30 11:18:33.000000000 -0700
@@ -9,7 +9,6 @@
 
 #include <linux/types.h>
 #include <linux/crypto.h>
-#include <linux/err.h>
 #include <asm/scatterlist.h>
 
 #include <net/mac80211.h>
@@ -17,14 +16,24 @@
 #include "aes_ccm.h"
 
 
-static void ieee80211_aes_encrypt(struct crypto_cipher *tfm,
+static void ieee80211_aes_encrypt(struct crypto_tfm *tfm,
 				  const u8 pt[16], u8 ct[16])
 {
-	crypto_cipher_encrypt_one(tfm, ct, pt);
+	struct scatterlist src, dst;
+
+	src.page = virt_to_page(pt);
+	src.offset = offset_in_page(pt);
+	src.length = AES_BLOCK_LEN;
+
+	dst.page = virt_to_page(ct);
+	dst.offset = offset_in_page(ct);
+	dst.length = AES_BLOCK_LEN;
+
+	crypto_cipher_encrypt(tfm, &dst, &src, AES_BLOCK_LEN);
 }
 
 
-static inline void aes_ccm_prepare(struct crypto_cipher *tfm, u8 *b_0, u8 *aad,
+static inline void aes_ccm_prepare(struct crypto_tfm *tfm, u8 *b_0, u8 *aad,
 				   u8 *b, u8 *s_0, u8 *a)
 {
 	int i;
@@ -52,7 +61,7 @@ static inline void aes_ccm_prepare(struc
 }
 
 
-void ieee80211_aes_ccm_encrypt(struct crypto_cipher *tfm, u8 *scratch,
+void ieee80211_aes_ccm_encrypt(struct crypto_tfm *tfm, u8 *scratch,
 			       u8 *b_0, u8 *aad, u8 *data, size_t data_len,
 			       u8 *cdata, u8 *mic)
 {
@@ -91,7 +100,7 @@ void ieee80211_aes_ccm_encrypt(struct cr
 }
 
 
-int ieee80211_aes_ccm_decrypt(struct crypto_cipher *tfm, u8 *scratch,
+int ieee80211_aes_ccm_decrypt(struct crypto_tfm *tfm, u8 *scratch,
 			      u8 *b_0, u8 *aad, u8 *cdata, size_t data_len,
 			      u8 *mic, u8 *data)
 {
@@ -134,12 +143,12 @@ int ieee80211_aes_ccm_decrypt(struct cry
 }
 
 
-struct crypto_cipher * ieee80211_aes_key_setup_encrypt(const u8 key[])
+struct crypto_tfm * ieee80211_aes_key_setup_encrypt(const u8 key[])
 {
-	struct crypto_cipher *tfm;
+	struct crypto_tfm *tfm;
 
-	tfm = crypto_alloc_cipher("aes", 0, CRYPTO_ALG_ASYNC);
-	if (IS_ERR(tfm))
+	tfm = crypto_alloc_tfm("aes", 0);
+	if (!tfm)
 		return NULL;
 
 	crypto_cipher_setkey(tfm, key, ALG_CCMP_KEY_LEN);
@@ -148,8 +157,8 @@ struct crypto_cipher * ieee80211_aes_key
 }
 
 
-void ieee80211_aes_key_free(struct crypto_cipher *tfm)
+void ieee80211_aes_key_free(struct crypto_tfm *tfm)
 {
 	if (tfm)
-		crypto_free_cipher(tfm);
+		crypto_free_tfm(tfm);
 }
diff -upr pre/net/mac80211/aes_ccm.h post/net/mac80211/aes_ccm.h
--- pre/net/mac80211/aes_ccm.h	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/aes_ccm.h	2007-03-30 11:18:33.000000000 -0700
@@ -14,13 +14,13 @@
 
 #define AES_BLOCK_LEN 16
 
-struct crypto_cipher * ieee80211_aes_key_setup_encrypt(const u8 key[]);
-void ieee80211_aes_ccm_encrypt(struct crypto_cipher *tfm, u8 *scratch,
+struct crypto_tfm * ieee80211_aes_key_setup_encrypt(const u8 key[]);
+void ieee80211_aes_ccm_encrypt(struct crypto_tfm *tfm, u8 *scratch,
 			       u8 *b_0, u8 *aad, u8 *data, size_t data_len,
 			       u8 *cdata, u8 *mic);
-int ieee80211_aes_ccm_decrypt(struct crypto_cipher *tfm, u8 *scratch,
+int ieee80211_aes_ccm_decrypt(struct crypto_tfm *tfm, u8 *scratch,
 			      u8 *b_0, u8 *aad, u8 *cdata, size_t data_len,
 			      u8 *mic, u8 *data);
-void ieee80211_aes_key_free(struct crypto_cipher *tfm);
+void ieee80211_aes_key_free(struct crypto_tfm *tfm);
 
 #endif /* AES_CCM_H */
diff -upr pre/net/mac80211/ieee80211_i.h post/net/mac80211/ieee80211_i.h
--- pre/net/mac80211/ieee80211_i.h	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/ieee80211_i.h	2007-03-30 11:18:33.000000000 -0700
@@ -479,8 +479,8 @@ struct ieee80211_local {
 	int long_retry_limit; /* dot11LongRetryLimit */
 	int short_preamble; /* use short preamble with IEEE 802.11b */
 
-	struct crypto_blkcipher *wep_tx_tfm;
-	struct crypto_blkcipher *wep_rx_tfm;
+	struct crypto_tfm *wep_tx_tfm;
+	struct crypto_tfm *wep_rx_tfm;
 	u32 wep_iv;
 	int key_tx_rx_threshold; /* number of times any key can be used in TX
 				  * or RX before generating a rekey
diff -upr pre/net/mac80211/ieee80211_key.h post/net/mac80211/ieee80211_key.h
--- pre/net/mac80211/ieee80211_key.h	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/ieee80211_key.h	2007-03-30 11:19:08.000000000 -0700
@@ -12,7 +12,6 @@
 
 #include <linux/types.h>
 #include <linux/kref.h>
-#include <linux/crypto.h>
 #include <net/mac80211.h>
 
 /* ALG_TKIP
@@ -63,7 +62,7 @@ struct ieee80211_key {
 		struct {
 			u8 tx_pn[6];
 			u8 rx_pn[NUM_RX_DATA_QUEUES][6];
-			struct crypto_cipher *tfm;
+			struct crypto_tfm *tfm;
 			u32 replays; /* dot11RSNAStatsCCMPReplays */
 			/* scratch buffers for virt_to_page() (crypto API) */
 #ifndef AES_BLOCK_LEN
diff -upr pre/net/mac80211/tkip.c post/net/mac80211/tkip.c
--- pre/net/mac80211/tkip.c	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/tkip.c	2007-03-30 11:18:33.000000000 -0700
@@ -218,8 +218,7 @@ void ieee80211_tkip_gen_rc4key(struct ie
  * headroom of eight octets for IV and Ext. IV and taildroom of four octets
  * for ICV. @payload_len is the length of payload (_not_ including extra
  * headroom and tailroom). @ta is the transmitter addresses. */
-void ieee80211_tkip_encrypt_data(struct crypto_blkcipher *tfm,
-				 struct ieee80211_key *key,
+void ieee80211_tkip_encrypt_data(struct crypto_tfm *tfm, struct ieee80211_key *key,
 				 u8 *pos, size_t payload_len, u8 *ta)
 {
 	u8 rc4key[16];
@@ -234,8 +233,7 @@ void ieee80211_tkip_encrypt_data(struct 
  * beginning of the buffer containing IEEE 802.11 header payload, i.e.,
  * including IV, Ext. IV, real data, Michael MIC, ICV. @payload_len is the
  * length of payload, including IV, Ext. IV, MIC, ICV.  */
-int ieee80211_tkip_decrypt_data(struct crypto_blkcipher *tfm,
-				struct ieee80211_key *key,
+int ieee80211_tkip_decrypt_data(struct crypto_tfm *tfm, struct ieee80211_key *key,
 				u8 *payload, size_t payload_len, u8 *ta,
 				int only_iv, int queue)
 {
diff -upr pre/net/mac80211/tkip.h post/net/mac80211/tkip.h
--- pre/net/mac80211/tkip.h	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/tkip.h	2007-03-30 11:18:33.000000000 -0700
@@ -19,7 +19,7 @@ void ieee80211_tkip_gen_phase1key(struct
 				  u16 *phase1key);
 void ieee80211_tkip_gen_rc4key(struct ieee80211_key *key, u8 *ta,
 			       u8 *rc4key);
-void ieee80211_tkip_encrypt_data(struct crypto_blkcipher *tfm,
+void ieee80211_tkip_encrypt_data(struct crypto_tfm *tfm,
 				 struct ieee80211_key *key,
 				 u8 *pos, size_t payload_len, u8 *ta);
 enum {
@@ -28,8 +28,7 @@ enum {
 	TKIP_DECRYPT_INVALID_KEYIDX = -2,
 	TKIP_DECRYPT_REPLAY = -3,
 };
-int ieee80211_tkip_decrypt_data(struct crypto_blkcipher *tfm,
-				struct ieee80211_key *key,
+int ieee80211_tkip_decrypt_data(struct crypto_tfm *tfm, struct ieee80211_key *key,
 				u8 *payload, size_t payload_len, u8 *ta,
 				int only_iv, int queue);
 
diff -upr pre/net/mac80211/wep.c post/net/mac80211/wep.c
--- pre/net/mac80211/wep.c	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/wep.c	2007-03-30 11:18:33.000000000 -0700
@@ -14,8 +14,6 @@
 #include <linux/compiler.h>
 #include <linux/crc32.h>
 #include <linux/crypto.h>
-#include <linux/err.h>
-#include <linux/mm.h>
 #include <asm/scatterlist.h>
 
 #include <net/mac80211.h>
@@ -28,15 +26,13 @@ int ieee80211_wep_init(struct ieee80211_
 	/* start WEP IV from a random value */
 	get_random_bytes(&local->wep_iv, WEP_IV_LEN);
 
-	local->wep_tx_tfm = crypto_alloc_blkcipher("ecb(arc4)", 0,
-						CRYPTO_ALG_ASYNC);
-	if (IS_ERR(local->wep_tx_tfm))
+	local->wep_tx_tfm = crypto_alloc_tfm("arc4", 0);
+	if (!local->wep_tx_tfm)
 		return -ENOMEM;
 
-	local->wep_rx_tfm = crypto_alloc_blkcipher("ecb(arc4)", 0,
-						CRYPTO_ALG_ASYNC);
-	if (IS_ERR(local->wep_rx_tfm)) {
-		crypto_free_blkcipher(local->wep_tx_tfm);
+	local->wep_rx_tfm = crypto_alloc_tfm("arc4", 0);
+	if (!local->wep_rx_tfm) {
+		crypto_free_tfm(local->wep_tx_tfm);
 		return -ENOMEM;
 	}
 
@@ -45,8 +41,8 @@ int ieee80211_wep_init(struct ieee80211_
 
 void ieee80211_wep_free(struct ieee80211_local *local)
 {
-	crypto_free_blkcipher(local->wep_tx_tfm);
-	crypto_free_blkcipher(local->wep_rx_tfm);
+	crypto_free_tfm(local->wep_tx_tfm);
+	crypto_free_tfm(local->wep_rx_tfm);
 }
 
 static inline int ieee80211_wep_weak_iv(u32 iv, int keylen)
@@ -127,21 +123,20 @@ void ieee80211_wep_remove_iv(struct ieee
 /* Perform WEP encryption using given key. data buffer must have tailroom
  * for 4-byte ICV. data_len must not include this ICV. Note: this function
  * does _not_ add IV. data = RC4(data | CRC32(data)) */
-void ieee80211_wep_encrypt_data(struct crypto_blkcipher *tfm, u8 *rc4key,
+void ieee80211_wep_encrypt_data(struct crypto_tfm *tfm, u8 *rc4key,
 				size_t klen, u8 *data, size_t data_len)
 {
-	struct blkcipher_desc desc = { .tfm = tfm };
 	struct scatterlist sg;
 	__le32 *icv;
 
 	icv = (__le32 *)(data + data_len);
 	*icv = cpu_to_le32(~crc32_le(~0, data, data_len));
 
-	crypto_blkcipher_setkey(tfm, rc4key, klen);
+	crypto_cipher_setkey(tfm, rc4key, klen);
 	sg.page = virt_to_page(data);
 	sg.offset = offset_in_page(data);
 	sg.length = data_len + WEP_ICV_LEN;
-	crypto_blkcipher_encrypt(&desc, &sg, &sg, sg.length);
+	crypto_cipher_encrypt(tfm, &sg, &sg, sg.length);
 }
 
 
@@ -196,18 +191,17 @@ int ieee80211_wep_encrypt(struct ieee802
 /* Perform WEP decryption using given key. data buffer includes encrypted
  * payload, including 4-byte ICV, but _not_ IV. data_len must not include ICV.
  * Return 0 on success and -1 on ICV mismatch. */
-int ieee80211_wep_decrypt_data(struct crypto_blkcipher *tfm, u8 *rc4key,
+int ieee80211_wep_decrypt_data(struct crypto_tfm *tfm, u8 *rc4key,
 			       size_t klen, u8 *data, size_t data_len)
 {
-	struct blkcipher_desc desc = { .tfm = tfm };
 	struct scatterlist sg;
 	__le32 crc;
 
-	crypto_blkcipher_setkey(tfm, rc4key, klen);
+	crypto_cipher_setkey(tfm, rc4key, klen);
 	sg.page = virt_to_page(data);
 	sg.offset = offset_in_page(data);
 	sg.length = data_len + WEP_ICV_LEN;
-	crypto_blkcipher_decrypt(&desc, &sg, &sg, sg.length);
+	crypto_cipher_decrypt(tfm, &sg, &sg, sg.length);
 
 	crc = cpu_to_le32(~crc32_le(~0, data, data_len));
 	if (memcmp(&crc, data + data_len, WEP_ICV_LEN) != 0)
diff -upr pre/net/mac80211/wep.h post/net/mac80211/wep.h
--- pre/net/mac80211/wep.h	2007-03-30 11:18:33.000000000 -0700
+++ post/net/mac80211/wep.h	2007-03-30 11:18:33.000000000 -0700
@@ -26,10 +26,10 @@ u8 * ieee80211_wep_add_iv(struct ieee802
 void ieee80211_wep_remove_iv(struct ieee80211_local *local,
 			     struct sk_buff *skb,
 			     struct ieee80211_key *key);
-void ieee80211_wep_encrypt_data(struct crypto_blkcipher *tfm, u8 *rc4key,
-				size_t klen, u8 *data, size_t data_len);
-int ieee80211_wep_decrypt_data(struct crypto_blkcipher *tfm, u8 *rc4key,
-			       size_t klen, u8 *data, size_t data_len);
+void ieee80211_wep_encrypt_data(struct crypto_tfm *tfm, u8 *rc4key, size_t klen,
+				u8 *data, size_t data_len);
+int ieee80211_wep_decrypt_data(struct crypto_tfm *tfm, u8 *rc4key, size_t klen,
+			       u8 *data, size_t data_len);
 int ieee80211_wep_encrypt(struct ieee80211_local *local, struct sk_buff *skb,
 			  struct ieee80211_key *key);
 int ieee80211_wep_decrypt(struct ieee80211_local *local, struct sk_buff *skb,
