From 534b03cd79f6de5cb3c364289cb5fa158bef6632 Mon Sep 17 00:00:00 2001
From: Hong Liu <hong.liu@intel.com>
Date: Tue, 10 Jul 2007 15:21:58 +0800
Subject: [PATCH] mac80211: add 802.11h channel switch packet handling

Add support for 802.11h channel switch packet handling.
Add a new STA state (IEEE80211_CHANNEL_SWITCH), and handle
channel switch in sta_work.

Signed-off-by: Hong Liu <hong.liu@intel.com>
Signed-off-by: Zhu Yi <yi.zhu@intel.com>
---
 include/linux/ieee80211.h    |    9 +++++
 include/net/mac80211.h       |    1 +
 net/mac80211/ieee80211_i.h   |    4 ++-
 net/mac80211/ieee80211_sta.c |   80 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 93 insertions(+), 1 deletions(-)

diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index 6315399..397303b 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -474,6 +474,15 @@ enum ieee80211_category {
 	WLAN_CATEGORY_WMM = 17,
 };
 
+/* Spectrum Management Action Code */
+enum ieee80211_specmgmt_actioncode {
+	WLAN_ACTION_MEASURE_REQ = 0,
+	WLAN_ACTION_MEASURE_REPORT = 1,
+	WLAN_ACTION_TPC_REQ = 2,
+	WLAN_ACTION_TPC_REPORT = 3,
+	WLAN_ACTION_CSA = 4,
+};
+
 /* QoS Action Code */
 enum ieee80211_qos_actioncode {
 	WLAN_ACTION_QOS_ADDTS_REQ = 0,
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index e2071c2..8ca4a0f 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -286,6 +286,7 @@ struct ieee80211_conf {
 #define IEEE80211_CONF_SSID_HIDDEN	(1<<1) /* do not broadcast the ssid */
 #define IEEE80211_CONF_RADIOTAP		(1<<2) /* use radiotap if supported
 						  check this bit at RX time */
+#define IEEE80211_CONF_CHANNEL_SWITCH	(1<<3)
 	u32 flags;			/* configuration flags defined above */
 
 	u8 power_level;			/* transmit power limit for current
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index a780a0d..9b34bb4 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -239,7 +239,8 @@ struct ieee80211_if_sta {
 	enum {
 		IEEE80211_DISABLED, IEEE80211_AUTHENTICATE,
 		IEEE80211_ASSOCIATE, IEEE80211_ASSOCIATED,
-		IEEE80211_IBSS_SEARCH, IEEE80211_IBSS_JOINED
+		IEEE80211_IBSS_SEARCH, IEEE80211_IBSS_JOINED,
+		IEEE80211_CHANNEL_SWITCH
 	} state;
 	struct timer_list timer;
 	struct work_struct work;
@@ -307,6 +308,7 @@ struct ieee80211_if_sta {
 	struct ieee80211_elem_tspec tspec;
 	u8 dls_mac[ETH_ALEN];
 #endif
+	struct ieee80211_channel *switch_channel;
 };
 
 
diff --git a/net/mac80211/ieee80211_sta.c b/net/mac80211/ieee80211_sta.c
index 1b093af..64f7752 100644
--- a/net/mac80211/ieee80211_sta.c
+++ b/net/mac80211/ieee80211_sta.c
@@ -2560,6 +2560,56 @@ void ieee80211_send_addba_resp(struct net_device *dev, u8 *da, u16 tid,
 	return;
 }
 
+static void sta_process_csa(struct ieee80211_local *local,
+			    struct ieee80211_if_sta *ifsta,
+			    struct ieee80211_mgmt *mgmt,
+			    size_t len)
+{
+	u8 *pos = (u8 *)&mgmt->u.action.u.chan_switch;
+	struct ieee80211_hw_mode *mode = local->oper_hw_mode;
+	int i;
+	unsigned short count;
+	short chan_num;
+	u8 csa_mode;
+
+	if (len < 24 + 7) {
+		printk(KERN_DEBUG "csa frame len:%d too short\n", len);
+		return;
+	}
+
+	++pos; /* skip the action code */
+
+	if (*pos++ != WLAN_EID_CHANNEL_SWITCH ||
+	    *pos++ != 3) {
+		printk(KERN_DEBUG "not a csa info element\n");
+		return;
+	}
+
+	csa_mode = *pos++;
+	chan_num = *pos++;
+
+	ifsta->switch_channel = NULL;
+
+	for (i = 0; i < mode->num_channels; i++)
+		if (mode->channels[i].chan == chan_num &&
+		    mode->channels[i].flag & IEEE80211_CHAN_W_SCAN)
+			ifsta->switch_channel = &mode->channels[i];
+
+	if (!ifsta->switch_channel) {
+		printk(KERN_DEBUG "can't find switch channel: %d\n",
+			chan_num);
+		return;
+	}
+
+	if (csa_mode == 1)
+		ieee80211_stop_queues(&local->hw);
+
+	ifsta->state = IEEE80211_CHANNEL_SWITCH;
+	count = *pos;
+	mod_timer(&ifsta->timer,
+		jiffies + msecs_to_jiffies(count * local->hw.conf.beacon_int));
+}
+
 static void ieee80211_sta_process_addba_request(struct net_device *dev,
 						struct ieee80211_mgmt *mgmt,
 						size_t len)
@@ -3155,6 +3205,15 @@ void ieee80211_rx_mgmt_action(struct net_device *dev,
 		return;
 
 	switch (mgmt->u.action.category) {
+	case WLAN_CATEGORY_SPECTRUM_MGMT:
+		switch (mgmt->u.action.u.chan_switch.action_code) {
+		case WLAN_ACTION_CSA:
+			sta_process_csa(local, ifsta, mgmt, len);
+			break;
+		default:
+			break;
+		}
+		break;
 	case WLAN_CATEGORY_QOS:
 	case WLAN_CATEGORY_WMM:
 		if (len < 24 + 4) {
@@ -3429,6 +3488,24 @@ static void ieee80211_sta_merge_ibss(struct net_device *dev,
 	ieee80211_sta_req_scan(dev, ifsta->ssid, ifsta->ssid_len);
 }
 
+static void ieee80211_sta_channel_switch(struct net_device *dev,
+					 struct ieee80211_if_sta *ifsta)
+{
+	struct ieee80211_local *local = wdev_priv(dev->ieee80211_ptr);
+
+	printk(KERN_DEBUG "%s: switch to new channel %d\n",
+		dev->name, ifsta->switch_channel->chan);
+
+	local->oper_channel = ifsta->switch_channel;
+	local->hw.conf.flags |= IEEE80211_CONF_CHANNEL_SWITCH;
+	ieee80211_hw_config(local);
+
+	local->hw.conf.flags &= ~IEEE80211_CONF_CHANNEL_SWITCH;
+	ieee80211_start_queues(&local->hw);
+
+	ifsta->state = IEEE80211_ASSOCIATED;
+	mod_timer(&ifsta->timer, jiffies + IEEE80211_MONITORING_INTERVAL);
+}
 
 void ieee80211_sta_timer(unsigned long data)
 {
@@ -3500,6 +3577,9 @@ void ieee80211_sta_work(struct work_struct *work)
 	case IEEE80211_IBSS_JOINED:
 		ieee80211_sta_merge_ibss(dev, ifsta);
 		break;
+	case IEEE80211_CHANNEL_SWITCH:
+		ieee80211_sta_channel_switch(dev, ifsta);
+		break;
 	default:
 		printk(KERN_DEBUG "ieee80211_sta_work: Unknown state %d\n",
 		       ifsta->state);
-- 
1.5.2

