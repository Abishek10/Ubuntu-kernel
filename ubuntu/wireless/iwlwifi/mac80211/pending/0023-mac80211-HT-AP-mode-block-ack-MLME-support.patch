From 8aff6ff750cb985bafa982b4b1ffc37029e8f013 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Sat, 30 Jun 2007 09:43:39 +0800
Subject: [PATCH] mac80211: [HT] AP mode block ack MLME support

AP mode block ack MLME support

Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
Signed-off-by: Zhu Yi <yi.zhu@intel.com>
---
 net/mac80211/ieee80211.c     |    7 +++++++
 net/mac80211/ieee80211_i.h   |    6 ++++++
 net/mac80211/ieee80211_sta.c |   21 ++++++++++++++++-----
 3 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/net/mac80211/ieee80211.c b/net/mac80211/ieee80211.c
index f0a1f48..a4f2f67 100644
--- a/net/mac80211/ieee80211.c
+++ b/net/mac80211/ieee80211.c
@@ -4026,6 +4026,7 @@ static ieee80211_txrx_result
 ieee80211_rx_h_mgmt(struct ieee80211_txrx_data *rx)
 {
 	struct ieee80211_sub_if_data *sdata;
+	struct ieee80211_mgmt *mgmt = (struct ieee80211_mgmt *) rx->skb->data;
 
 	if (!rx->u.rx.ra_match)
 		return TXRX_DROP;
@@ -4035,6 +4036,12 @@ ieee80211_rx_h_mgmt(struct ieee80211_txrx_data *rx)
 	     sdata->type == IEEE80211_IF_TYPE_IBSS) &&
 	    !rx->local->user_space_mlme) {
 		ieee80211_sta_rx_mgmt(rx->dev, rx->skb, rx->u.rx.status);
+	} else if ((sdata->type == IEEE80211_IF_TYPE_AP) &&
+			   ((rx->fc & IEEE80211_FCTL_FTYPE) == IEEE80211_FTYPE_MGMT) &&
+			   ((rx->fc & IEEE80211_FCTL_STYPE) == IEEE80211_STYPE_ACTION) &&
+			   (mgmt->u.action.category == WLAN_CATEGORY_BACK)){
+		/* 11n is not implemented yet in hostapd,so process in mac80211 */
+		ieee80211_rx_mgmt_action(rx->dev,NULL,mgmt,rx->skb->len);
 	} else {
 		/* Management frames are sent to hostapd for processing */
 		if (!rx->local->apdev)
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index cd22912..a780a0d 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -897,6 +897,12 @@ ieee80211_txrx_result ieee80211_sta_manage_reorder_buf(struct ieee80211_hw *hw,
 	struct ieee80211_txrx_data *rx, struct tid_ht_agg_info_rx *tid_rx_info,
 	struct sk_buff *skb, u16 mpdu_seq_num, int bar_req);
 
+
+void ieee80211_rx_mgmt_action(struct net_device *dev,
+			struct ieee80211_if_sta *ifsta,
+                        struct ieee80211_mgmt *mgmt,
+                        size_t len);
+
 /* ieee80211_iface.c */
 int ieee80211_if_add(struct net_device *dev, const char *name,
 		     struct net_device **new_dev, int type);
diff --git a/net/mac80211/ieee80211_sta.c b/net/mac80211/ieee80211_sta.c
index 5780424..72d1ce4 100644
--- a/net/mac80211/ieee80211_sta.c
+++ b/net/mac80211/ieee80211_sta.c
@@ -2528,7 +2528,10 @@ void ieee80211_send_addba_resp(struct net_device *dev, u8 *da, u16 tid,
 	memset(mgmt, 0, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
 	memcpy(mgmt->sa, dev->dev_addr, ETH_ALEN);
-	memcpy(mgmt->bssid, ifsta->bssid, ETH_ALEN);
+	if(sdata->type == IEEE80211_IF_TYPE_AP)
+		memcpy(mgmt->bssid, dev->dev_addr, ETH_ALEN);
+	else
+		memcpy(mgmt->bssid, ifsta->bssid, ETH_ALEN);
 	mgmt->frame_control = IEEE80211_FC(IEEE80211_FTYPE_MGMT,
 					   IEEE80211_STYPE_ACTION);
 
@@ -2702,8 +2705,13 @@ void ieee80211_send_addba_request(struct net_device *dev, u8 *da, u16 tid,
 	memset(mgmt, 0, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
 	memcpy(mgmt->sa, dev->dev_addr, ETH_ALEN);
-	memcpy(mgmt->bssid, ifsta->bssid, ETH_ALEN);
-	mgmt->frame_control = IEEE80211_FC(IEEE80211_FTYPE_MGMT,IEEE80211_STYPE_ACTION);
+	if(sdata->type == IEEE80211_IF_TYPE_AP)
+		memcpy(mgmt->bssid, dev->dev_addr, ETH_ALEN);
+	else
+		memcpy(mgmt->bssid, ifsta->bssid, ETH_ALEN);
+
+	mgmt->frame_control = IEEE80211_FC(IEEE80211_FTYPE_MGMT,
+					IEEE80211_STYPE_ACTION);
 
 	skb_put(skb, 1 + sizeof(mgmt->u.action.u.addba_req));
 
@@ -2804,7 +2812,10 @@ void ieee80211_send_delba(struct net_device *dev, u8 *da, u16 tid,
 	memset(mgmt, 0, 24);
 	memcpy(mgmt->da, da, ETH_ALEN);
 	memcpy(mgmt->sa, dev->dev_addr, ETH_ALEN);
-	memcpy(mgmt->bssid, ifsta->bssid, ETH_ALEN);
+	if(sdata->type == IEEE80211_IF_TYPE_AP)
+		memcpy(mgmt->bssid, dev->dev_addr, ETH_ALEN);
+	else
+		memcpy(mgmt->bssid, ifsta->bssid, ETH_ALEN);
 	mgmt->frame_control = IEEE80211_FC(IEEE80211_FTYPE_MGMT,IEEE80211_STYPE_ACTION);
 
 	skb_put(skb, 1 + sizeof(mgmt->u.action.u.delba));
@@ -3123,7 +3134,7 @@ ieee80211_sta_manage_reorder_buf(struct ieee80211_hw *hw, struct ieee80211_txrx_
 	return TXRX_QUEUED;
  }
 
-static void ieee80211_rx_mgmt_action(struct net_device *dev,
+void ieee80211_rx_mgmt_action(struct net_device *dev,
 				     struct ieee80211_if_sta *ifsta,
 				     struct ieee80211_mgmt *mgmt,
 				     size_t len)
-- 
1.5.2

