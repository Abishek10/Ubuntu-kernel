#!/bin/sh

# job-autotest
#
# This shell script runs the autotest testcase that is specified on the
# command line. It gethers the autotest results and gets them back to
# the jenkins server.
#

set +x

JENKINS_SERVER=kernel-jenkins
CONTROL_FILE=control
AUTOTEST_TEST=_bogus_

while [ $# -ge 1 ]; do
    case $1 in
        -c*)    shift

                CONTROL_FILE=$1
                shift
                ;;

        *)      AUTOTEST_TEST=$1
                shift
                ;;
    esac
done

echo ===============
uname -a
echo ===============
set -x



# Run the test
#
sudo autotest/client/bin/autotest autotest/client/tests/$AUTOTEST_TEST/$CONTROL_FILE

#
# For benchmarks, process the results and send them for archiving
#
if [ "$HAS_METRICS" = "true" ]; then
    pwd
    autotest/client/tools/process_metrics.py --testname=$AUTOTEST_TEST --path=autotest/client | sudo tee autotest/client/results/$BUILD_TAG.json > /dev/null
    scp autotest/client/results/$BUILD_TAG.json $JENKINS_SERVER:$JENKINS_HOME/metrics/
fi

# If this test is being run as part of a larger set of tests where all the
# results are aggregated together. Do that here.
#
if [ "$AGGREGATE_RESULTS" = "true" ]; then
    sudo autotest/client/tools/results2junit.py autotest/client/results/default > $AGGREGATE_RESULTS_DIR/autotest-results.$TEST_NAME.xml
else
    # Process the results
    #
    sudo autotest/client/tools/results2junit.py autotest/client/results/default > $WORKSPACE/autotest-results.$TEST_NAME.xml
fi

# Gather up the files that will be helpful is any of the tests fail.
#
sudo chown -R jenkins.jenkins autotest/client/results
tar jcf $TEST_NAME-results.tbz2 autotest/client/results

# vi:set ts=4 sw=4 expandtab:
