#!/usr/bin/env python
#
# This script is intended to produce an html, report of all the bugs in any "open"
# state that have been tagged with a "regression" tag.
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error, stde
from ktl.bugs                           import DeltaTime
from ktl.std_app                        import StdApp
from datetime                           import datetime
import json

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>]                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=' ]
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

            if result: # No errors yet

                # At lease one source package must be specified.
                #
                if len(args) > 0:
                    self.cfg['database'] = args[0]

        except GetoptError as e:
            print(e, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if 'database' not in self.cfg:
            raise CmdlineError('A json file containing the sru information is required. This is generated by the sru-report script.')
        return

# RegressionsReport
#
class RegressionsReport():
    # __init__
    #
    def __init__(self, db):
        self.db = db
        self.importance_color = {
                "Unknown"       : "#000000",
                "Critical"      : "#ff4500", # "#cc0033",
                "High"          : "#ffff22", # "#ff00cc",
                "Medium"        : "#33ff11", # "#009900",
                "Low"           : "#66ffff", # "#cc9900",
                "Wishlist"      : "#ffffff", # "#0066cc",
                "Undecided"     : "#000000"  # "#999999"
            }
        self.status_color     = {
                "New"           : "#ffffff", #"#ff00cc",
                "Incomplete"    : "#ffff22",
                "Confirmed"     : "#66ffff", #"#0066cc",
                "Triaged"       : "#33ff11", #"#ff9933",
                "In Progress"   : "#ff88ff",
                "Fix Committed" : "#000000", #"#006600",
                "Fix Released"  : "#000000", #"#009900",
                "Invalid"       : "#000000",
                "Won't Fix"     : "#000000",
                "Opinion"       : "#000000",
                "Expired"       : "#000000",
                "Unknown"       : "#000000"
            }

        return

    # __str__
    #
    def __str__(self):
        retval  = self.__head()
        retval += self.__body()
        retval += self.__tail()
        return retval

    # __head
    #
    # The begining of the html file.
    #
    def __head(self):
        retval = '''<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />'''
        if   self.db['tags'] == 'regression-potential':
            retval += '        <title>Regressions-Potential Report</title>\n'
        elif self.db['tags'] == 'regression-release':
            retval += '        <title>Regressions-Release Report</title>\n'
        elif self.db['tags'] == 'regression-update':
            retval += '        <title>Regressions-Update Report</title>\n'
        else:
            retval += '        <title>The Regressions Report</title>\n'

        retval += '''


        <link rel="stylesheet" href="css/themes/bjf/style.css" type="text/css" media="print, projection, screen" />
        <link rel="stylesheet" href="css/style.css" type="text/css" media="print, projection, screen" />
        <link href='http://fonts.googleapis.com/css?family=Cantarell&subset=latin'              rel='stylesheet' type='text/css'>
        <script type="text/javascript" src="js/jquery-latest.js"></script>
        <script type="text/javascript" src="js/jquery.tablesorter.js"></script>'''

        retval += '\n'
        retval += '        <script type="text/javascript">'
        retval += '''
           // add parser through the tablesorter addParser method
           $.tablesorter.addParser({
               // set a unique id
               id: 'importance',
               is: function(s) {
                   // return false so this parser is not auto detected
                   return false;
               },
               format: function(s) {
                   // format your data for normalization
                       return s.toLowerCase().replace(/critical/,6).replace(/high/,5).replace(/medium/,4).replace(/low/,3).replace(/wishlist/,2).replace(/undecided/,1).replace(/unknown/,0);
               },
               // set type, either numeric or text
               type: 'numeric'
           });

           // add parser through the tablesorter addParser method
           $.tablesorter.addParser({
               // set a unique id
               id: 'status',
               is: function(s) {
                   // return false so this parser is not auto detected
                   return false;
               },
               format: function(s) {
                   // format your data for normalization
                       return s.toLowerCase().replace(/new/,12).replace(/incomplete/,11).replace(/confirmed/,10).replace(/triaged/,9).replace(/in progress/,8).replace(/fix committed/,7).replace(/fix released/,6).replace(/invalid/,6).replace(/won't fix/,5).replace(/confirmed/,4).replace(/opinion/,3).replace(/expired/,2).replace(/unknown/,1);
               },
               // set type, either numeric or text
               type: 'numeric'
           });
           '''

        retval += '$(function() {\n'
        for pkg in self.db['packages']:
            retval += '                $("#%s").tablesorter({\n' % pkg.replace('.', '_')
            retval += '                    headers: {\n'
            retval += '                        3: {\n'
            retval += '                            sorter:\'importance\'\n'
            retval += '                        },\n'
            retval += '                        4: {\n'
            retval += '                            sorter:\'status\'\n'
            retval += '                        }\n'
            retval += '                    },\n'
            retval += '                    widgets: [\'zebra\']\n'
            retval += '                });\n'
            retval += '            });\n'
        retval += '        </script>\n'

        retval += '\n'
        retval += '    </head>\n'
        retval += '\n'

        return retval

    # __tail
    #
    def __tail(self):
        return '''

</html>
        '''

    # __body
    #
    def __body(self):
        retval =  '''
    <body class="bugbody">
        <div class="outermost">'''
        retval += '\n'

        retval += '            <div class="title">\n'
        if   self.db['tags'] == 'regression-potential':
            retval += '                The Regressions-Potential Report\n'
        elif self.db['tags'] == 'regression-release':
            retval += '                The Regressions-Release Report\n'
        elif self.db['tags'] == 'regression-update':
            retval += '                The Regressions-Update Report\n'
        else:
            retval += '                The Regressions Report\n'
        retval += '            </div>\n'

        for pkg in self.db['packages']:
            retval += '                <div class="section">\n'
            retval += '                        <div class="table-heading">&nbsp;%s</div>\n' % pkg
            retval += '                    <table id="%s" class="tablesorter" border="0" cellpadding="0" cellspacing="1" width="100%%">\n' % pkg.replace('.', '_')
            retval += '                        <thead>\n'
            retval += '                            <tr>\n'
            retval += '                                <th width="40">Bug</th>\n'
            retval += '                                <th>Summary</th>\n'
            retval += '                                <th width="80">Series</th>\n'
            retval += '                                <th width="80">Importance</th>\n'
            retval += '                                <th width="80">Status</th>\n'
            retval += '                                <th width="80">Assignee</th>\n'
            retval += '                                <th width="50">Age</th>\n'
            retval += '                                <th width="50">&nbsp; C &nbsp;</th>\n'
            retval += '                            </tr>\n'
            retval += '                        </thead>\n'

            retval += '                        <tbody>\n'
            for bug_id in self.db['packages'][pkg]['bugs']:
                retval += self.__bug_details(bug_id, pkg)
            retval += '                        </tbody>\n'

            retval += '                    </table>\n'
            retval += '                </div>\n'
            retval += '                <br />\n'
            retval += '                <br />\n'
        retval += '            <div>\n'
        retval += '                <br />\n'
        retval += '                <hr />\n'
        retval += '                %s\n' % self.db['updated']
        retval += '                <br />\n'
        retval += '                <br />\n'
        retval += '            </div>\n'
        retval += '''

        </div> <!-- Outermost -->
    </body>
        '''
        return retval

    # date_to_string
    #
    def date_to_string(self, date):
        return date.strftime("%A, %d. %B %Y %H:%M UTC")

    # string_to_date
    #
    def string_to_date(self, date):
        return datetime.strptime(date, '%A, %d. %B %Y %H:%M UTC')

    def how_long_ago(self, date):
        now = datetime.utcnow()
        now.replace(tzinfo=None)
        ago = DeltaTime(self.string_to_date(date), now)
        #if ago.days > 1:
        #    when = '%d days' % (ago.days)
        #elif ago.days == 1:
        #    when = '1 day, %h hours' % (ago.hours)
        #elif ago.hours > 1:
        #    when = '%h hours' % (ago.hours)
        #elif ago.hours == 1:
        #    when = '1 hour, %d mintues' % (ago.minutes)
        #when = '%d:%02d:%02d' % (ago.days, ago.hours, ago.minutes)
        when = '%d.%d.%d' % (ago.days, ago.hours, ago.minutes)
        when_style = ''
        if ago.days == 0:
            if ago.hours == 0:
                when_style = 'style="color: #ff0000"'
            else:
                when_style = 'style="color: #ffff00"'

        return when_style, when

    # __bug_details
    #
    def __bug_details(self, bug_id, pkg):
        bug_url = "http://launchpad.net/bugs/%s" % bug_id
        bug = self.db['packages'][pkg]['bugs'][bug_id]

        retval  = '                                <tr>\n'
        retval += '                                    <td><a href="%s">%s</a></td>\n' % (bug_url, bug_id)     # Bug
        retval += '                                    <td>%s</td>\n' % bug['title']                           # Summary
        retval += '                                    <td style="color: #ffffff">%s</td>\n' % (bug['series name']) # Series
        retval += '                                    <td style="color: %s">%s</td>\n' % (self.importance_color[bug['importance']], bug['importance']) # Importance
        retval += '                                    <td style="color: %s">%s</td>\n' % (self.status_color[bug['status']], bug['status'])             # Status
        retval += '                                    <td>%s</td>\n' % bug['assignee']                        # Assignee
        retval += '                                    <td %s>%s</td>\n' % self.how_long_ago(bug['date created'])      # Age
        retval += '                                    <td %s>%s</td>\n' % self.how_long_ago(bug['date last message']) # Last comment
        retval += '                                </tr>\n'
        return retval

# MkRegressionsReportError
#
class MkRegressionsReportError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# MkRegressionsReport
#
class MkRegressionsReport(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # __initialize
    #
    # A separate initialize that we can control when it gets called (not
    # when the object is instantiated).
    #
    def __initialize(self):
        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        bugs_db = None
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.__initialize()

            if path.exists(self.cfg['database']):
                with open(self.cfg['database'], 'r') as f:
                    bugs_db = json.load(f)

            else:
                raise MkRegressionsReportError('The specified database file (%s) does not exist.' % self.cfg['database'])

            if bugs_db != None:
                report = RegressionsReport(bugs_db)
                print(report)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle application errors.
        #
        except MkRegressionsReportError as e:
            error(e.msg)

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = MkRegressionsReport()
    app.main()

# vi:set ts=4 sw=4 expandtab:

