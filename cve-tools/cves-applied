#!/usr/bin/python
#
# cves-applied -- 
#
import sys
import re

from subprocess     import Popen, PIPE

branch = sys.argv[1]
tagvers = sys.argv[2:]

# cves[cve] = [ sha1 ... ]
cves = {}
# wanted[sha] = True/False
wanted = {}

# Read in all of the CVEs and their associated upstream commits.
for line in sys.stdin:
    shas = line.split()
    cve_num = shas.pop(0)

    cves[cve_num] = shas

    for sha in shas:
        wanted[sha] = True


# Take the list of tags and record their version
tags = []
tags_ver = {}
for tag, version in zip(tagvers[::2], tagvers[1::2]):
    tags.append(tag)
    if version:
        tags_ver[tag] = version
    else :
        tags_ver[tag] = tag


# Look through the output of git log for commit references, recording the
# local sha representing those passed in wanted.
log_commit = re.compile(r'^commit\s([0-9a-f]{40})')
log_sha = re.compile(r'\b([0-9a-f]{40})\b')

def log_shas(commits, wanted):
    cmd = [ 'git', 'log', commits ]
    p = Popen(cmd, stdout=PIPE)

    found = {}
    sha_current = None
    for line in p.stdout:
        match = log_commit.search(line)
        if match:
            sha_current = match.group(1)
            if sha_current in wanted:
                del wanted[sha_current]
                found[sha_current] = sha_current
            continue
        match = log_sha.search(line)
        if match:
            sha = match.group(1)
            if sha in wanted:
                del wanted[sha]
                found[sha] = sha_current
            continue
    return found


# Run through the tags looking for any sha1 conversions we can find.
prev = ''
found = {}
for tag in tags:
    # Run the log for this tag looking for commit ids mentioned in the
    # body text.
    found[tag] = log_shas(prev + tag, wanted)

    prev = tag + ".."

# Run through all of the cves and see if we found all of the shas
# it consists of.
tag_found = None
for cve_num in cves:
    wanted = cves[cve_num]
    commits = []
    for tag in tags:
        for sha in list(wanted):
            if sha in found[tag]:
                wanted.remove(sha)
                commits.append(found[tag][sha])
                tag_found = tag
    if len(wanted):
        continue

    print cve_num + " " + branch + " " + ",".join(commits) + " " + \
        tags_ver[tag_found]
