#!/usr/bin/python


from __future__ import print_function

import sys
import re
import sqlite3
from subprocess     import Popen, PIPE


class IdStore:
    def __init__(this, db):
        this.__con = sqlite3.connect(db)

        try:
            result = this.__con.execute('select Version from Version;')
        except:
            this.__con.execute('create table Version(Version INT);')
            this.__con.execute('create table TagDetail(Series TEXT, Source TEXT, Version TEXT, Tag TEXT, Id TEXT, IdPrev TEXT);')
            this.__con.execute('create table IdDetail(Id TEXT, Tid INTEGER, Frevert BOOLEAN DEFAULT 0, Foverlay DEFAULT 0);')
            this.__con.execute('create table TitleId(Title TEXT, Tid INTEGER, Id TEXT);')
            this.__con.execute('insert into Version(Version) values (1);')
            this.__con.execute('create index IdDetailIdxId on IdDetail(Id)')
            this.__con.commit()

        this.recalc_rids()


    def recalc_rids(this):
        this.__tag_rids = {}

        tags = []
        commit_link = {}
        commit_rowid = {}

        cur = this.__con.execute('select ROWID,Series,Source,Version,Id,IdPrev from TagDetail;')
        for row in cur:
            (r_rowid, r_series, r_source, r_version, r_id, r_idprev) = row

            if r_id == r_idprev:
                continue
            commit_link[r_id] = r_idprev;
            commit_rowid[r_id] = r_rowid;
        
        cur = this.__con.execute('select ROWID,Series,Source,Version,Id,IdPrev from TagDetail;')
        for row in cur:
            (r_rowid, r_series, r_source, r_version, r_id, r_idprev) = row

            rids = []
            while r_id:
                ##print(r_id)
                rids.append(str(commit_rowid[r_id]))
                r_id = commit_link.get(r_id, None)

            if r_series == 'precise' and r_source == 'linux' and r_version == '3.1.0-1.1':
                print(r_rowid, rids)
            this.__tag_rids[(r_series, r_source, r_version)] = rids
        
        ##print(this.__commit_tag)


    def commit(this):
        this.__con.commit();


    # Look through the output of git log for commit references, recording the
    # local sha representing those passed in wanted.
    log_commit = re.compile(r'^commit\s([0-9a-f]{40})')
    # commit SHA1 upstream
    log_shaA = re.compile(r'commit\s+([0-9a-f]{40})\s+upstream')
    # cherry picked from commit SHA1
    # backported from commit SHA1
    log_shaB = re.compile(r'(?i)(?:(?:cherry(?:-|\s+)picked|back(?:-|\s*)port(?:ed)?)\s+from\s+(?:commit\s+)?|upstream(?:-|\s+)commit[:\s]\s*|commit\s+upstream\s+)([0-9a-f]{40})\b')
    # Change-Id: ID
    log_shaC = re.compile(r'Change-Id: (I[0-9a-f]+)')
    log_title = re.compile(r'^\s\s\s\s(\S.*)$')

    def log_shas(this, tid, commits):
        ##print('log_shas', commits)
        cmd = [ 'git', 'log', commits ]
        p = Popen(cmd, stdout=PIPE)

        found = {}
        sha_current = None
        title_seen = True
        for line in p.stdout:
            ##print(line, end='')
            # commit <sha>
            match = this.log_commit.search(line)
            if match:
                sha_current = match.group(1)
                # Note we want to find the title...
                title_seen = False
                ## sha_current is in commits
                #if sha_current in this.__commit_tag:
                #    print('log_shas: stop at tag ' + this.__commit_tag[sha_current])
                #    break
                this.__con.execute('insert into IdDetail(Id, Tid) values (?, ?);',
                    (sha_current, tid))
                continue
            if not sha_current:
                continue
            # '    <title>'
            if not title_seen:
                match = this.log_title.search(line)
                if match:
                    title = match.group(1).strip()
                    title_seen = True
                    # sha_current has title title
                    title_safe = None
                    try:
                        title_safe = unicode(title, 'utf-8')
                    except:
                        pass
                    if title_safe:
                        this.__con.execute('insert into TitleId(Title, Tid, Id) values (?, ?, ?);',
                            (title_safe, tid, sha_current))
            if not sha_current:
                continue
            # <sha1>
            match = this.log_shaA.search(line)
            if not match:
                match = this.log_shaB.search(line)
            if not match:
                match = this.log_shaC.search(line)
            if match:
                sha = match.group(1)
                # sha_current mentions and likely is sha
                ##print("IS", sha_current, sha)
                this.__con.execute('insert into IdDetail(Id, Tid) values (?, ?);',
                    (sha, tid))
                continue
        return found


    def log_base(this, commits):
        print('log_base', commits)
        cmd = [ 'git', 'log', '--pretty=format:%H', commits ]
        p = Popen(cmd, stdout=PIPE)

        for line in p.stdout:
            cur = this.__con.execute('select Id from TagDetail where Id=?', (line.strip(),))
            row = cur.fetchone()
            cur.close()
            if row:
                break
        if row:
            return row[0]
        else
            return None


    def git_tag_detail(this, tag):
        cmd = [ 'git', 'log', '-1', '--format=%H', tag ]
        p = Popen(cmd, stdout=PIPE)
        commit = None
        for line in p.stdout:
            commit = line.strip()
        p.terminate()

        ##print('git_tag_detail', tag, commit)

        return commit


    def tag_seen(this, tag):
        ##print(tag)
        cur = this.__con.execute('select Id from TagDetail where Tag=?;', (tag,))
        result = cur.fetchone()
        cur.close()
        ##print("tag_seen", result)
        return result


    def tag_detail_check(this, series, source, version, tag, prev):
        ##print('tag_detail_check', series, source, version, tag, prev)

        commit_tag = this.git_tag_detail(tag)
        if prev != '':
            commit_prev = this.git_tag_detail(prev)
        else:
            commit_prev = None

        cur = this.__con.execute('select Id,IdPrev,ROWID from TagDetail where Series=? and Source=? and Tag=?;', (series, source, tag))
        result = cur.fetchone()
        cur.close()

        if not result:
            ##print('tag_detail_check no entry')
            return False

        if result[0] != commit_tag or (commit_prev and result[1] != commit_prev):
            ##print('tag_detail_check missmatch', result[0], commit_tag, result[1], commit_prev)
            this.__con.execute('delete from IdDetail where Tid=?;', (result[2],))
            this.__con.execute('delete from TagDetail where ROWID=?;', (result[2],))
            return False

        return True


    def tag_detail_add(this, series, source, version, tag, prev):
        ##print('tag_detail_add', series, source, version, tag, prev)

        commit_tag = this.git_tag_detail(tag)
        if prev != '':
            commit_prev = this.git_tag_detail(prev)
        else:
            commit_prev = None

        ##print('tag_detail_add APW', series, source, version, tag, prev, commit_tag, commit_prev)

        cur = this.__con.cursor()
        cur.execute('insert into TagDetail(Series, Source, Version, Tag, Id, IdPrev) values (?, ?, ?, ?, ?, ?);',
            (series, source, version, tag, commit_tag, commit_prev))
        tid = cur.lastrowid;
        cur.close()

        this.recalc_rids()

        return tid


    def package_update(this, series, package, version, tag, prev):
        if store.tag_detail_check(series, package, version, tag, prev):
            return False
        
        print(tag, "scanning", ((prev + '..') if prev else '') + tag, file=sys.stderr)
        tid = store.tag_detail_add(series, package, version, tag, prev)
        store.log_shas(tid, ((prev + '..') if prev else '') + tag)

        store.commit()

        return True


    def package_has(this, series, package, version, commit):
        rids = this.__tag_rids[(series, package, version)]

        cur = this.__con.cursor()
        cur.execute('select Id from IdDetail where Id=? and Tid in (' + ','.join(rids) + ');',
            (commit,))
        row = cur.fetchone()
        cur.close()

        #print('package_has', series, package, version, commit, row)
        return row


    def __overlay_add(this, tid, sha):
        this.__con.execute('insert into IdDetail(Id, Tid, Foverlay) values (?, ?, ?);',
                (sha, tid, 1))


    def overlay_cmd_title(this, title, shas):
        ##print("overlay_cmd_title", title, shas)
        cur = this.__con.cursor()
        cur.execute('select Tid,Id from TitleId where Title=?;', (title,))
        for row in cur:
            (tid, commit) = row
            for sha in shas:
                ##print("overlay_cmd_title", tid, sha)
                this.__overlay_add(tid, sha)
        cur.close()

    def overlay_cmd_unpublished_version(this, version):
        pass


    def overlay_update(this, overlays):
        # Read in the any corrective overlays.
        this.__con.execute('delete from IdDetail where Foverlay=?', (1,))
        with file(overlays) as fh:
            for line in fh:
                if line[0] == ':':
                    exec("this.overlay_cmd_" + line[1:])
                    continue
                shas = line.split()
                if len(shas) == 0 or shas[0] == '#':
                    continue
                fix = shas.pop(0)
                cur = this.__con.execute('select Tid from IdDetail where Id=?;', (fix,))
                for row in cur:
                    tid = row[0]
                    for sha in shas:
                        ##print("basic overlay", tid, sha)
                        this.__overlay_add(tid, sha)
                cur.close()
                #if not row:
                #    print("OVERLAY IGNORED: " + line, end='', file=sys.stderr)
                #    continue

        this.__con.commit()


#                                "$here/cves-applied2" <"$cve_list" "$overlay" \
#                                        "$series" "$cvebranch" \
#                                        $bases $tag_list "$branch" "pending" | \
#                                        tee "$state+cache"
##store = IdStore("/home/apw/test.db")
##store.overlay_update('/home/apw/bzr/cve-tracker/kernel-cve-tracker/active/10autotriage.linux')
##raise "DEBUG"

(store_db, overlay, series, package, base) = sys.argv[1:6]
tagvers = sys.argv[6:]

store = IdStore(store_db)

print("Opened store " + store_db + " successfully", file=sys.stderr)
print(base, file=sys.stderr)

if base != '-':
    prev = base
else:
    prev = ''

update_overlay = False
for tag, version in zip(tagvers[::2], tagvers[1::2]):
    if store.package_update(series, package, version, tag, prev):
        update_overlay = True
    prev = tag

if overlay != '-' and (update_overlay or base == '-'):
    store.overlay_update(overlay)

# Read in all of the CVEs and their associated upstream commits.
cves = []

for line in sys.stdin:
    shas = line.split()
    cve_num = shas.pop(0)

    # Work out which package fixes to apply, if there are specific
    # fixes listed use those else use the linux ones.
    pkg_needed = 'linux'
    for sha in shas:
        # <package>:[pre>]need[|need]...
        (pkg, sha) = sha.split(':', 1)

        if pkg == package:
            pkg_needed = package

    needs = []
    for sha in shas:
        # <package>:[pre>]need[|need]...
        (pkg, sha) = sha.split(':', 1)
        if '>' in sha:
            (psha, sha) = sha.split('>')
        else:
            psha = '-'
        shal = sha.split('|')

        # Only the fixes listed for this package are interesting.
        if pkg != pkg_needed:
            continue

        # Drop illegal values.
        valid = True
        if psha != '-' and len(psha) != 40 and not psha.startswith('I'):
            valid = False
        for isha in shal:
            if len(isha) != 40 and not isha.startswith('local-') and not isha.startswith('I'):
                value = False
                break
        if not valid:
            continue

        needs.append((psha, shal))

    ##print(cve_num, needs)
    (ptag, pversion) = tagvers[-2:]

    ##print("CHECKING PREREQ VERSION:", tag, version)
    # Do we have the dependancies
    all_shal = []
    for (psha, shal) in needs:
        if cve_num == 'active/CVE-2012-0055':
            print("LOOKING FOR", series, package, pversion, psha)
        if psha != '-' and not store.package_has(series, package, pversion, psha):
            continue
        if cve_num == 'active/CVE-2012-0055':
            print("FOUND", series, package, pversion, psha)
        all_shal += shal
    
    found = True
    if len(all_shal) > 0:
        for tag, version in zip(tagvers[::2], tagvers[1::2]):
            found = True
            for sha in all_shal:
                if not store.package_has(series, package, version, sha):
                    found = False
                    break
            if found:
                break

        ##print(psha, shal)
    if len(all_shal) == 0:
        print(cve_num, series, package, '-', 'not-affected')
    elif not found:
        print(cve_num, series, package, ','.join(all_shal), 'needed')
    else:
        print(cve_num, series, package, ','.join(all_shal), version)
