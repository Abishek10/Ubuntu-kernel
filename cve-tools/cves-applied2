#!/usr/bin/python


from __future__ import print_function

import sys
import re
import sqlite3
from subprocess     import Popen, PIPE


class IdStore:
    def __init__(this, db):
        this.__con = sqlite3.connect(db)

        try:
            result = this.__con.execute('select Version from Version;')
        except:
            this.__con.execute('create table Version(Version INT);')
            this.__con.execute('create table TagDetail(Series TEXT, Source TEXT, Version TEXT, Tag TEXT, Id TEXT, IdPrev TEXT);')
            this.__con.execute('create table IdDetail(Id TEXT, Tid INTEGER, Type CHARACTER);')
            this.__con.execute('create table TitleId(Title TEXT, Tid INTEGER, Id TEXT);')
            this.__con.execute('insert into Version(Version) values (1);')
            this.__con.commit()

        this.__commit_tag = {}
        cur = this.__con.execute('select Tag,Id from TagDetail;')
        for row in cur:
            this.__commit_tag[row[1]] = row[0]

        ##print(this.__commit_tag)


    def commit(this):
        this.__con.commit();


    # Look through the output of git log for commit references, recording the
    # local sha representing those passed in wanted.
    log_commit = re.compile(r'^commit\s([0-9a-f]{40})')
    # commit SHA1 upstream
    log_shaA = re.compile(r'commit\s+([0-9a-f]{40})\s+upstream')
    # cherry picked from commit SHA1
    # backported from commit SHA1
    log_shaB = re.compile(r'(?i)(?:(?:cherry(?:-|\s+)picked|back(?:-|\s*)port(?:ed)?)\s+from\s+(?:commit\s+)?|upstream(?:-|\s+)commit[:\s]\s*|commit\s+upstream\s+)([0-9a-f]{40})\b')
    # Change-Id: ID
    log_shaC = re.compile(r'Change-Id: (I[0-9a-f]+)')
    log_title = re.compile(r'^\s\s\s\s(\S.*)$')

    def log_shas(this, tid, commits):
        ##print('log_shas', commits)
        cmd = [ 'git', 'log', commits ]
        p = Popen(cmd, stdout=PIPE)

        found = {}
        sha_current = None
        title_seen = True
        for line in p.stdout:
            ##print(line, end='')
            # commit <sha>
            match = this.log_commit.search(line)
            if match:
                sha_current = match.group(1)
                # Note we want to find the title...
                title_seen = False
                ## sha_current is in commits
                #if sha_current in this.__commit_tag:
                #    print('log_shas: stop at tag ' + this.__commit_tag[sha_current])
                #    break
                this.__con.execute('insert into IdDetail(Id, Tid, Type) values (?, ?, ?);',
                    (sha_current, tid, 'A'))
                continue
            if not sha_current:
                continue
            # '    <title>'
            if not title_seen:
                match = this.log_title.search(line)
                if match:
                    title = match.group(1).strip()
                    title_seen = True
                    # sha_current has title title
                    title_safe = None
                    try:
                        title_safe = unicode(title, 'utf-8')
                    except:
                        pass
                    if title_safe:
                        this.__con.execute('insert into TitleId(Title, Tid, Id) values (?, ?, ?);',
                            (title_safe, tid, sha_current))
            if not sha_current:
                continue
            # <sha1>
            match = this.log_shaA.search(line)
            if not match:
                match = this.log_shaB.search(line)
            if not match:
                match = this.log_shaC.search(line)
            if match:
                sha = match.group(1)
                # sha_current mentions and likely is sha
                ##print("IS", sha_current, sha)
                this.__con.execute('insert into IdDetail(Id, Tid, Type) values (?, ?, ?);',
                    (sha, tid, 'A'))
                continue
        return found


    def git_tag_detail(this, tag):
        cmd = [ 'git', 'log', '-1', '--format=%H', tag ]
        p = Popen(cmd, stdout=PIPE)
        commit = None
        for line in p.stdout:
            commit = line.strip()
        p.terminate()

        ##print('git_tag_detail', tag, commit)

        return commit


    def tag_seen(this, tag):
        ##print(tag)
        cur = this.__con.execute('select Id from TagDetail where Tag=?;', (tag,))
        result = cur.fetchone()
        cur.close()
        ##print("tag_seen", result)
        return result


    def tag_add(this, tag, commit):
        this.__con.execute('insert into TagDetail(Tag, Id) values (?, ?);',
            (tag, commit))


    def tag_detail_check(this, series, source, version, tag, prev):
        ##print('tag_detail_check', series, source, version, tag, prev)

        commit_tag = this.git_tag_detail(tag)
        if prev != '':
            commit_prev = this.git_tag_detail(prev)
        else:
            commit_prev = None

        cur = this.__con.execute('select Id,IdPrev,ROWID from TagDetail where Series=? and Source=? and Tag=?;', (series, source, tag))
        result = cur.fetchone()
        cur.close()

        if not result:
            ##print('tag_detail_check no entry')
            return False

        if result[0] != commit_tag or (commit_prev and result[1] != commit_prev):
            ##print('tag_detail_check missmatch', result[0], commit_tag, result[1], commit_prev)
            this.__con.execute('delete from IdDetail where Tag=?;', (result[2],))
            this.__con.execute('delete from TagDetail where ROWID=?;', (result[2],))
            return False

        return True


    def tag_detail_add(this, series, source, version, tag, prev):
        ##print('tag_detail_add', series, source, version, tag, prev)

        commit_tag = this.git_tag_detail(tag)
        if prev != '':
            commit_prev = this.git_tag_detail(prev)
        else:
            commit_prev = None

        ##print('tag_detail_add APW', series, source, version, tag, prev, commit_tag, commit_prev)

        cur = this.__con.cursor()
        cur.execute('insert into TagDetail(Series, Source, Version, Tag, Id, IdPrev) values (?, ?, ?, ?, ?, ?);',
            (series, source, version, tag, commit_tag, commit_prev))
        tid = cur.lastrowid;
        cur.close()

        this.__commit_tag[commit_tag] = tag

        return tid

#                                "$here/cves-applied2" <"$cve_list" "$overlay" \
#                                        "$series" "$cvebranch" \
#                                        $bases $tag_list "$branch" "pending" | \
#                                        tee "$state+cache"

(store_db, overlay, series, package, base) = sys.argv[1:6]
tagvers = sys.argv[6:]

store = IdStore(store_db)

print("Opened store " + store_db + " successfully")
print(base)
print(tagvers)

if base != '-':
    prev = base
else:
    prev = ''
for tag, version in zip(tagvers[::2], tagvers[1::2]):
    if store.tag_detail_check(series, package, version, tag, prev):
        prev = tag
        continue

    print(tag, "scanning", ((prev + '..') if prev else '') + tag)
    tid = store.tag_detail_add(series, package, version, tag, prev)
    store.log_shas(tid, ((prev + '..') if prev else '') + tag)
    ##store.log_shas(series, package, version, tag)

    store.commit()

    prev = tag
