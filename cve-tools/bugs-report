#! /usr/bin/python

# Copyright 2013 Canonical Ltd.
# Author: Andy Whitcroft <apw@canonical.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Allow editing of bugs ..."""

from __future__ import print_function

from optparse import OptionParser

from launchpadlib.launchpad import Launchpad

import sys
import re


def main():
    options = {}
    parser = OptionParser(
        usage="usage: %prog -s suite [options] package [...]")
    parser.add_option(
        "-l", "--launchpad", dest="launchpad_instance", default="production")
#    parser.add_option(
#        "-n", "--dry-run", default=False, action="store_true",
#        help="only show removals that would be performed")
#    parser.add_option(
#        "-d", "--distribution", default="ubuntu",
#        metavar="DISTRIBUTION", help="override in DISTRIBUTION")
#    parser.add_option(
#        "-s", "--suite", metavar="SUITE", help="override in SUITE")
#    parser.add_option(
#        "-e", "--version",
#        metavar="VERSION", help="package version (default: current version)")
#    parser.add_option(
#        "-c", "--command", default='unblock',
#        help="migration hint command (default: unlock)")
#
    options, args = parser.parse_args()

    options.launchpad = Launchpad.login_anonymously(
        "bug-list", options.launchpad_instance, version="devel")

    brkfix_re = re.compile("^break-fix:\s*(\S+)\s+(\S+)")


    ubuntu = options.launchpad.distributions['ubuntu']
    devel = ubuntu.current_series

    out = {}
    closable = {}
    cbid = None
    bug = None
    for line in sys.stdin:
        (bid, series_name, source_name, shas, state) = line.split()

        if series_name == 'linus':
            continue

        if state == 'pending':
            bstate = 'Fix Committed'
        elif state == 'needed':
            bstate = 'Confirmed'
        elif state == 'not-affected':
            bstate = 'Invalid'
        else:
            bstate = 'Fix Released'
            
        # Find the specified bug if different.
        if cbid != bid:
            bug = options.launchpad.bugs[bid]
    
        # Find the package/series combination task.
        task = None
        series = ubuntu.getSeries(name_or_version=series_name)
        series_source = series.getSourcePackage(name=source_name)
        for tsk in bug.bug_tasks:
            if tsk.target_link != series_source.self_link:
                continue
            task = tsk
            break

        # If there is no specific task there may be a source package task
        # but only if we are talking about the development release.
        if not task and devel.self_link == series.self_link:
            series_source = ubuntu.getSourcePackage(name=source_name)
            for tsk in bug.bug_tasks:
                if tsk.target_link != series_source.self_link:
                        continue
                task = tsk
                break
            
        # Check if the status matches if not emit an update record -- only for valid tasks
        if not task:
            prefix = "#m# "
        elif bstate != task.status:
            prefix = ""
        else:
            prefix = "#=# "

        # We have a task in an open state which we are going to track further.
        if task and state in ('pending', 'needed'):
            closable[bid] = False

        if bid not in out:
            out[bid] = []

        out[bid].append("%(prefix)sbug-update bug '%(bug)s' task '%(series)s' '%(source)s' status '%(bstate)s'" % \
            { 'prefix': prefix, 'bug': bid, 'series': series_name, 'source': source_name, 'bstate': bstate })

    # Print records in bug order.
    for bid in out:
        print("\n" + "#U# url https://bugs.launchpad.net/bugs/" + str(bid) + "\n" + "\n".join(out[bid]))
        if bid not in closable:
            prefix = ""
        else:
            prefix = "#C# "
        print(prefix + "bug-update bug " + str(bid) + " tag-remove linux-bug-break-fix")


if __name__ == '__main__':
    main()
        
## 	echo "$HOME/bzr/ubuntu-archive-tools/bug-update bug '$bug' task '$series' '$source' status '$bstate'"
