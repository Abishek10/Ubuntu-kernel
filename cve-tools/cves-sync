#!/bin/bash

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

repos="$HOME/cve-autotriage"

work="$1"
cache="$2"
overlay="$3"
cve_list="$4"

case "$overlay" in
/*) ;;
*)  overlay="`pwd`/$overlay" ;;
esac
shift

tag_cache="$cache/tag"
mkdir -p "$tag_cache"

cve_list_cache="$cache/CVE-list"
cves_changed=1

branch_id="/tmp/cve-branch.$$"

{
	# Ensure all upstream repositories exist.
	echo "*** creating missing repos ... " 1>&2
	while read series cvebranch repo branch flags tos url X
	do
		(
			if [ "$url" = '-' ]; then
				continue
			fi

			echo "*** checking $repo ..."
			cd "$repos" || exit 1
			if [ ! -d "$repo" ]; then
				echo "*** cloning $repo ..."
				if [ "$repo" != "linux-linus.git" ]; then
					git clone --bare --reference linux-linus.git "$url" "$repo"
				else
					git clone --bare "$url" "$repo"
				fi
				cd "$repo" || exit 1
				git remote add origin "$url"
			fi
		) 1>&2
	done <"$work"
	
	# Fetch all of the upstream repos in parallel.
	echo "*** updating all repos ..." 1>&2
	prev_repo=""
	while read series cvebranch repo branch flags X
	do
		[ "$prev_repo" = "$repo" ] && continue

		(
			echo "*** fetching $repo ... "
			cd "$repos/$repo" || exit 1
			git fetch origin '+refs/heads/*:refs/heads/*' '+refs/tags/*:refs/tags/*'
			echo "*** fetching $repo ... complete"
		) 1>&2 &
		prev_repo="$repo"
	done <"$work"
	wait

	# Check if the list of CVEs have changed.
	if [ -f "$cve_list_cache" ]; then
		if cmp -s "$cve_list_cache" "$cve_list"; then
			cves_changed=0
			echo "NOTE: CVE list unchanged" 1>&2
		else
			echo "NOTE: CVE list changed" 1>&2
		fi
	fi

	while read series cvebranch repo branch flags X
	do
		case ",$flags," in
		*,scan,*)		;;
		*)			continue;;
		esac

		tags_tip=0
		tags_git=0
		case ",$flags," in
		*,tags-tip,*)		tags_tip=1;;
		*,tags-git,*)		tags_git=1;;
		esac

		echo "*** checking $series $cvebranch ... " 1>&2
		(
			cd "$repos/$repo" || exit 1
			if [ "$tags_tip" -eq 1 ]; then
				tag_list=""

			elif [ "$tags_git" -eq 1 ]; then
				tag_list=$("$here/cves-git-tags-order" "$tag_cache" \
					`git tag -l 'v*' | grep -v v2.6.11 | \
						awk '{
							x=$1;
							sub("^v", "", x);
							gsub("-rc", "~rc", x);
							print $1 " " x
						}'
					`
				)

			else
				tag_list=`"$here/cves-git-tags-versions" tags "$tag_cache" $("$here/cves-kernel-versions" "tags" "$series" "$cvebranch")`
			fi
			{
				git show "$branch" | head -1
				echo "$tag_list"
				cat "$overlay" | md5sum
			} >"$branch_id"
			state="$cache/$series-$cvebranch--$repo-$branch"
			if [ -f "$state" ] && cmp -s "$state" "$branch_id"; then
				branch_changed=0
				echo "NOTE: $series $cvebranch unchanged" 1>&2
			else
				branch_changed=1
				echo "NOTE: $series $cvebranch changed" 1>&2
			fi
			if [ "$cves_changed" = 1 -o "$branch_changed" = 1 ]; then
				echo "NOTE: $series $cvebranch rescan" 1>&2
				"$here/cves-applied" <"$cve_list" "$overlay" \
					"$series" "$cvebranch" \
					$tag_list "$branch" "pending" | \
					tee "$state+cache"

				mv "$branch_id" "$state"
			else
				cat "$state+cache"
			fi
		)
	done <"$work"
}

cp "$cve_list" "$cve_list_cache"
rm -f "$cve_list" "$branch_id"
