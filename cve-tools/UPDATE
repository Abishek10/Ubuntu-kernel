#!/bin/bash

shopt -s extglob

http_proxy=http://squid.internal:3128/
export http_proxy

PATH=$PATH:$HOME/bin

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

out="$HOME/cve-autotriage"

cd "$out" || exit 1

wip="cve-tracker-wip"
final="cve-tracker"

cve_list="/tmp/cve-commits.$$"

echo "*** reset to kernel changes ..."
if [ ! -d "$wip" ]; then
	bzr branch lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team/ "$wip" || exit 1
fi
if [ ! -d "$final" ]; then
	bzr branch lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team/ "$final" || exit 1
fi

# Perform all the merges application etc in a temporary copy to avoid
# races for consumers.
(
	cd "$out/$wip" || exit 1

	bzr pull --overwrite lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team/ || exit 1
	bzr revert

	echo "*** merging upstream changes ..."
	bzr pull lp:ubuntu-cve-tracker || bzr merge lp:ubuntu-cve-tracker
	bzr commit -m 'update from upstream'

	echo "*** determine development release ..."
	# Work out what the development release is called here.
	devel=`
		(
			cd scripts || exit 1
			python -c '
from cve_lib import devel_release
print devel_release
			'
		)
	`
	echo "$devel"

	# Work out where linux-overlay is.
	echo "*** locate overlays ..."
	overlay="$out/$wip/active/10autotriage.linux"
	[ ! -f "$overlay" ] && overlay="$here/linux-overlay"
	echo "$overlay"

	echo "*** listing CVES ..."
	cves=(active/CVE-+([0-9])-+([0-9]))

	echo "*** enumerating cve commits ..." 1>&2
	"$here/cves-commits" "${cves[@]}" >"$cve_list"

	echo "*** scanning git repositories ..."
	mkdir -p "$out/state"
	$here/cves-sync "$here/cves-autotriage.conf" "$out/state" "$overlay" "$cve_list" | \
		$here/cves-tracker-update "$devel"

	echo "*** applying rebases ..."
	$here/cves-rebase-transfer "$here/cves-autotriage.conf" "$devel" "${cves[@]}" | \
		$here/cves-tracker-update --rebase "$devel"

	echo "*** fixing -release pocket (and -updates for unsupported releases) ..."
	$here/cves-fix-unsupported "$here/cves-autotriage.conf" "$devel" "${cves[@]}"

	echo "*** fixing ignored ..."
	$here/cves-fix-ignored "$here/cves-autotriage.conf" "$devel" "${cves[@]}"

	bzr commit -m 'autotriage'
)

# All done ... publish.
(
	cd "$out/$final" || exit 1

	echo "*** updating published version ..."
	if bzr diff --old "../$wip" >/dev/null 2>&1; then
		echo "NOTE: tree unchanged"
	else
		echo "NOTE: tree changed"
		bzr pull --overwrite "../$wip"
		bzr revert
	fi
)

rm -f "$cve_list"

# Datestamp the log to aid debug.
date
