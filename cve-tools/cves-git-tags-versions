#!/usr/bin/python
#
# cves-git-tags
#

from __future__ import print_function

import sys
import os
import re

from subprocess     import Popen, PIPE

cache = sys.argv[1]
versions = sys.argv[2:]

# Find the debian version of the release pointed to by this tag
commit_changelog = re.compile(r'^:.*\s(\S*/changelog)')
commit_version = re.compile(r'\((.*)\)')
def tag_version(tag):
    # Find the filename of the changelog
    cmd = [ 'git', 'show', '--raw', tag ]
    p = Popen(cmd, stdout=PIPE)

    changelog = None
    for line in p.stdout:
        line = line.decode('utf-8')
        match = commit_changelog.search(line)
        if match:
            changelog = match.group(1)
            break

    if not changelog:
        return tag

    # Grab the first line and pull the version string out of it
    cmd = [ 'git', 'cat-file', '-p', "%s:%s" % (tag, changelog) ]
    p = Popen(cmd, stdout=PIPE)
    line = p.stdout.readline()
    line = line.decode('utf-8')
    p.terminate()
    match = commit_version.search(line)
    if match:
        return match.group(1)

    return tag


def tag_version_cache(tag, sha1):
    # Use the sha1 of the tag as a cache key.
    vcache = os.path.join(cache, sha1)
    try:
        with open(vcache, 'r') as f:
            line = f.readline()
            return line.strip()
    except:
        version = tag_version(tag)

        with open(vcache, 'w') as f:
            f.write(tag + "\n")
    
        return version


# Get a list of tags by their debian version number
def git_taglist():
    tags = {}
    # Grab the first line and pull the version string out of it
    cmd = [ 'git', 'for-each-ref', 'refs/tags/Ubuntu-*' ]
    p = Popen(cmd, stdout=PIPE)
    for line in p.stdout:
        line = line.decode('utf-8')
        (sha1, what, tag) = line.strip().split()
        tag_name = tag.split('/')[2]

        tag_vers = tag_version_cache(tag_name, sha1)

        #tags[tag_vers] = tag_name
        print(sha1, what, tag_name)
    p.terminate()
    return tags


tag_version_map = git_taglist()
for version in versions:
    if version in tag_version_map:
        print(tag_version_map[version], version)
    else:
        sys.stderr.write("cves-git-tags-versions: {0} has no tag".format(version))
