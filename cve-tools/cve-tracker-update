#!/bin/bash

if [ "$#" -ne 1 ]; then
	echo "Usage: $0 <cve-tracker-file>" 1>&2
	exit 1
fi
file="$1"

cmd="sed -i '$file'"
while read series branch commit version
do
	[ "$version" = "" ] && continue
	#version=`echo "$version" | sed -e 's/~.*//'`

	if [ "$version" = 'pending' ]; then
		test_state='pending'
		set_state='pending'
		set_state2='pending' #XXX
	elif [ "$version" = 'not-affected' ]; then
		test_state='not-affected'
		set_state='not-affected'
		set_state2='not-affected' #XXX
	else
		test_state="\\(released\\|not-affected\\) ($version)"
		set_state="pending ($version)"
		set_state2="not-affected ($version)" #XXX
	fi

	if [ "$series" = 'oneiric' ]; then
		series='devel'
	fi

	case "$series-$branch" in
	linus-master)
		# Simply inject the upstream version.
		cmd="$cmd -e 's/^\\(upstream_.*:\\) \\(needs-triage\\|released\\).*/\\1 released ($version)/'"
		continue;
		;;
	dapper-master-next)
		package_pat="\\(${series}_linux-source-2.6.15:\\)"
		;;
	*-master-next)
		package_pat="\\(${series}_linux:\\)"
		;;
	*)	
		package_pat="\\(${series}_linux-$branch:\\)"
		;;
	esac

	# If we are released and the version is correct we want to leave the line alone
	# _otherwise_ we want to move it pending (version) so it can be detected upstream.
	cmd="$cmd -e 's/^$package_pat \\($test_state\\)$/\\1 __CORRECT__ \\2/'"
#	cmd="$cmd -e 's/^$package_pat \\(not-affected\\)$/\\1 $set_state2/'" #XXX
#	cmd="$cmd -e 's/^$package_pat \\(needs-triage\\|needed\\|pending\\|released\\)\\(.*\)/\\1 $set_state/'" #XXX
	cmd="$cmd -e 's/^$package_pat \\(active\\|needs-triage\\|needed\\|pending\\|released\\|not-affected\\)\\(.*\\)/\\1 $set_state/'"
	cmd="$cmd -e 's/^$package_pat __CORRECT__/\\1/'"
done

#echo "$cmd"
eval "$cmd"
