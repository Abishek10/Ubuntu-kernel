#!/bin/bash
#

# This script is to be run on a "system under test". It will create a
# virtual client.
#

set -x

usage()
{
    echo "usage: $0 [option] sut-name"
    echo " "
    echo "-h | --help"
    echo "    Prints this help message and exits. "
    echo " "
    echo "--orchestra"
    echo "    Hostname of the orchestra server"
    echo " "
    echo "--test-repository-host"
    echo "    Hostname or IP address of the system that has the test files."

    exit 1
}

ORCHESTRA_SERVER=magners-orchestra
TEST_REPOSITORY_HOST=kernel-jenkins

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            usage
            ;;

        --orchestra=*)
            ORCHESTRA_SERVER=$(echo $1 | cut -d= -f2)
            ;;

        --jenkins=*)
            TEST_REPOSITORY_HOST=$(echo $1 | cut -d= -f2)
            ;;

        *)
            SUT_NAME=$1
            ;;
    esac
    shift
done

cd /var/lib/jenkins
rm -rf kernel-testing
rsync -ar --exclude '.git' -e "ssh -o StrictHostKeyChecking=no" $TEST_REPOSITORY_HOST:kernel-testing-bjf/ ./kernel-testing/

sudo apt-get install -y qemu-kvm koan virt-manager
sudo sed -ie 's/^\(libvirtd.*\)/\1jenkins/' /etc/group

# The file structure on an Ubuntu CD uses the string amd64 instead of x86_64. To
# use koan to install x86_64 VMs it is necessary (at least with cobbler on Oneiric)
# to modify one file.
#
sudo sed -i -e '/elif uri.count("installer-amd64"):/ i \ \ \ \ \ \ \ \ elif uri.count("x86_64"):\n\ \ \ \ \ \ \ \ \ \ \ \ self._treeArch = "amd64"' /usr/share/pyshared/virtinst/OSDistro.py

echo '\n\nauto br0\niface br0 inet dhcp\n        bridge_ports     eth0\n        bridge_stp         off\n        bridge_fd            0\n        bridge_maxwait 0\n' | sudo tee -a /etc/network/interfaces
sudo ifup br0

sudo koan --virt --server=$ORCHESTRA_SERVER --profile=$SUT_NAME --virt-name=$SUT_NAME --virt-bridge=br0 --vm-poll

set +e

export TARGET_HOST=$SUT_NAME

ssh-keygen -f '/var/lib/jenkins/.ssh/known_hosts' -R $SUT_NAME

cd /var/lib/jenkins/kernel-testing
./wait-for-system $SUT_NAME
./create-slave-node $SUT_NAME $SUT_NAME '$SUT_NAME'

# Fix .ssh config on slave so it can copy from kernel-jenkins
#
scp -r /var/lib/jenkins/.ssh $SUT_NAME:

# vi:set ts=4 sw=4 expandtab syntax=python:
