#!/usr/bin/env python
#
# Called by the ceph provisioning job. This script generates a directory
# and set of configuration files for each node in the ceph test cluster.
#

from sys                                import stdout, argv, exit
from os                                 import getenv, path, mkdir, makedirs, chdir
from shutil                             import rmtree
from argparse                           import ArgumentParser
from logging                            import debug, info, basicConfig, DEBUG, INFO
from socket                             import gethostbyaddr

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# CephFactory
#
class CephFactory():

    # __init__
    #
    def __init__(self, args):
        self.cfg = args

    def mkceph_config(self, dictionary):
        retval = '[osd]\n'
        retval += '    osd journal size = 1000\n'
        retval += '    filestore xattr use omap = true\n'
        retval += '\n'

        servers = sorted(dictionary.keys())

        # Mon
        for i in range(0, len(servers)):
            retval += '[mon.%c]\n' % chr(ord('a') + i)
            retval += '    host = %s\n' % servers[i]
            retval += '    mon addr = %s:6789\n' % dictionary[servers[i]]['ip']
            retval += '\n'

        # Osd
        for i in range(0, len(servers)):
            retval += '[osd.%d]\n' % i
            retval += '    host = %s\n' % servers[i]
            retval += '\n'

        # Mds
        for i in range(0, len(servers)):
            retval += '[mds.%c]\n' % chr(ord('a') + i)
            retval += '    host = %s\n' % servers[i]
            retval += '\n'

        return retval

    # main
    #
    def main(self):
        retval = 1

        try:
            nodes = {}
            for system in self.cfg.systems:
                fqdn, alias, ip = gethostbyaddr(system)
                nodes[system] = { 'ip' : ip[0] }

            print self.mkceph_config(nodes)
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return retval


if __name__ == '__main__':

    result = 0

    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(asctime)-15s-%(levelname)s - %(message)s")
    #info('Started')

    parser = ArgumentParser()

    parser.add_argument('systems', metavar='S', type=str, nargs="+", help="A ceph cluster node name")

    args = parser.parse_args()

    app = CephFactory(args)
    result = app.main()

    #info('That\'s All Folks!')
    exit(result)

# vi:set ts=4 sw=4 expandtab:

