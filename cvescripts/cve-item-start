#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os, optparse
from cvescripts_lib import *
from buildenv_lib import *

parser = optparse.OptionParser("Usage: %prog [options] <workitem>")
dsc  = "Start working on the given CVE (CVE-xxxx-yyyy) or bug (BUG-#) or "
dsc += "on preparing a release 'security'."
parser.set_description(dsc)
parser.add_option("-f", "--force", action="store_true", dest="force",
	default=False, help="Throw away exising work and start over!")
(opts, args) = parser.parse_args()

#------------------------------------------------------------------------------
# There should be only one positional argument/item.
#------------------------------------------------------------------------------
if len(args) != 1:
	parser.print_usage()
	sys.exit(1)

id = args[0]
if not WorkItemNameValid(id):
	print "EE: " + id + " is not a valid work item name!"
	sys.exit(1)

#------------------------------------------------------------------------------
# Check whether there is a CVE file listed in the tracker repo.
#------------------------------------------------------------------------------
owd = os.getcwd()
if not id == WorkItemReleaseName():
	TrackerPull()
	os.chdir(tracker_dir)
	try:
		cve = cve_lib.find_cve(id)
	except:
		print "EE: No CVE file found for {0]".format(cve)
		sys.exit(1)
	os.chdir(owd)
	AssertDir(os.path.join("workitems", os.path.basename(cve)))
	cve = os.path.join(tracker_dir, cve)
	wi = WorkItem(cve)
	assignee = wi.get_assignee()

	#----------------------------------------------------------------------
	# If the workitem is not assigned, then assign myself and update the
	# branch. Do not proceed, if someone else is already assigned.
	#----------------------------------------------------------------------
	if not assignee:
		print "II: Assigning", my_ircnick, "to workitem."
		wi.set_assignee(my_ircnick)
		wi.save(cve)
		TrackerCommit("Assigned " + my_ircnick + " to " + id)
	elif assignee != my_ircnick:
		print "EE: This item already is assigned to" + assignee + "!"
		sys.exit(1)

def CreateBranch(series, package, name):
	pkgname = PkgList[series][package]
	version = GetUploadVersion(series, pkgname)
	if not version:
		version = GetUploadVersion(series, pkgname, pocket="release")
	print "  - " + package + "(" + version + ") -> " + id
	if name in GitListBranches():
		if opts.force == False:
			print "    EE: Branch " + name + " already exists"
			raise BranchExists()
		else:
			print "    WW: Trhowing away previous " + name
			os.system("git checkout -q master >/dev/null")
			os.system("git branch -D " + name + " >/dev/null")
	cmd = "git checkout -q -b " + name + " Ubuntu-" + version
	os.system(cmd)

print "II: Checking all workareas to be clean..."
if not IsWorkareaClean():
	print "EE: Refusing to start a new task while workarea is unclean"
	sys.exit(1)

#------------------------------------------------------------------------------
# Try creating new branches in all workareas.
#------------------------------------------------------------------------------
for area in ListWorkareas():
	series, package = area.split(os.path.sep, 1)

	print "*", area
	try:
		os.chdir(area)
		print " - Updating repository..."
		os.system("git remote update ubuntu >/dev/null 2>&1")
		try:
			CreateBranch(series, package, id)
		except:
			print "EE: CreateBranch() failed!"
			sys.exit(1)
		else:
			os.chdir(owd)
	except:
		sys.exit(1)

if id == "security":
	if os.path.exists("current-item"):
		os.unlink("current-item")
	sys.exit(0)

#------------------------------------------------------------------------------
# Make current-item a link to the CVE file.
#------------------------------------------------------------------------------
if os.path.exists("current-item"):
	os.unlink("current-item")
os.symlink(cve, "current-item")


