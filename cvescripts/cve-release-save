#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os
import optparse
from cvescripts_lib import *
from buildenv_lib import *

parser = optparse.OptionParser()
dsc    = "Saves the current progress on the release. This pushes the security "
dsc   += "branches to the central repo."
parser.set_description(dsc)
(opt, args) = parser.parse_args()

#------------------------------------------------------------------------------
# Verify that the work repositories are clean.
#------------------------------------------------------------------------------
print "II: Verifying whether all workareas are clean..."
if not IsWorkareaClean():
	print "EE: Will not save until workarea has been cleaned"
	sys.exit(1)

#------------------------------------------------------------------------------
# Now walk through all workareas and extract the patches
#------------------------------------------------------------------------------
owd = os.getcwd()
for area in ListWorkareas():
	nr_patches = 0

	#----------------------------------------------------------------------
	# Check whether there is a security branch which can be pushed.
	#----------------------------------------------------------------------
	os.chdir(os.path.join(owd, area))
	if not "security" in GitListBranches():
		os.chdir(owd)
		continue

	#----------------------------------------------------------------------
	# Find the merge-base relative to the master branch in the public
	# repository.
	#----------------------------------------------------------------------
	mergebase = GitMergeBase("security", "ubuntu/master")
	if not mergebase:
		print "EE: Failed to find a mergebase for", area
		sys.exit(1)

	#----------------------------------------------------------------------
	# Find out how many patches (beside starting the new release) are in
	# the branch. Only push if there is something.
	#----------------------------------------------------------------------
	cmd  = "git log --pretty=oneline " + mergebase + ".."
	for line in Popen(cmd, shell=True, stdout=PIPE).stdout:
		if "Start new release" in line:
			continue
		nr_patches += 1

	#----------------------------------------------------------------------
	# There is at least one patch, push it to the central repo.
	#----------------------------------------------------------------------
	if nr_patches:
		print "II: Updating central security repo for", area, "...",
		sys.stdout.flush()
		if os.system("git push -q central +security"):
			print "FAILED!"
		else:
			print "done"
	os.chdir(owd)

