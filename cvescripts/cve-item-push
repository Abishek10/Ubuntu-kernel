#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os
import optparse
from cvescripts_lib import *
from buildenv_lib import *
from patch_lib import *
import cve_lib

parser = optparse.OptionParser()
dsc = "Push the status of the current item to the website and remote repos."
parser.set_description(dsc)
(opt, args) = parser.parse_args()

#------------------------------------------------------------------------------
# First make sure there is a link named "current-item" which points to the
# cve-tracker data.
#------------------------------------------------------------------------------
workdir = os.getcwd()
workfile = os.path.join(workdir, "current-item")
if not os.path.islink(workfile):
	print "EE: Link {0} not found or not a symbolic link".format(workfile)
	sys.exit(1)
if not os.path.isfile(workfile):
	print "EE: Link {0} does not point to a file".format(workfile)
	sys.exit(1)

#------------------------------------------------------------------------------
# Load workitem data.
#------------------------------------------------------------------------------
wi = WorkItem(workfile)

patches = []
patchdir = os.path.join("workitems", wi.get_candidate(), "patches")
for area in ListWorkareas():
	for file in sorted(os.listdir(os.path.join(patchdir, area))):
		patches.append(Patch(os.path.join(patchdir, area, file)))

for patch in patches:
	print patch.filename
	print patch.hash
