#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os
import optparse
from cvescripts_lib import *
import cve_lib

parser = optparse.OptionParser("Usage: %prog [options] <basedir>")
dsc  = "Create/update the files and directories used for the CVE process"
parser.set_description(dsc)
(opt, args) = parser.parse_args()

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
if len(args) < 1:
	parser.print_usage()
	sys.exit(1)
basedir = args[0]

AssertDir(basedir)

#------------------------------------------------------------------------------
# First try to get the kernel references up to date
#------------------------------------------------------------------------------
# os.system("cve-pull --kernel-reference"

#------------------------------------------------------------------------------
# Need that to update the remote (review) repositories. So copy the
# cve-remote-setup script over to the central host.
#------------------------------------------------------------------------------
cvescripts_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
cmd = "scp -q " + cvescripts_dir + "/cve-remote-setup " + repo_host + ":"
try:
	print "LL: Sending setup script to " + repo_host + " ...",
	os.system(cmd)
except:
	print "failed!"
	sys.exit(1)
else:
	print "ok"

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def RemoteSetupRepo(series, package):
	gitbase = "/srv/kernel.ubuntu.com/git/ubuntu"
	repo = os.path.join(gitbase, "ubuntu-" + series)
	#----------------------------------------------------------------------
	# The kernel package has a reference upstream repository at
	# <gitbase>/ubuntu/linux-2.6
	# All central repos are named ubuntu-<series>-<package>.git, except
	# the kernel package, which is ubuntu-<series>.git only.
	#----------------------------------------------------------------------
	if package == "linux":
		refrepo = os.path.join(gitbase, "linux-2.6")
		repo += ".git"
	else:
		refrepo = ""
		repo += "-" + package + ".git"
	cmd = "./cve-remote-setup RR kernel_team " + series + " " + package
	cmd += " " + repo + " " + refrepo
	os.system("ssh " + repo_host + " " + cmd)

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def LocalSetupRepo(series, package):
	owd = os.getcwd()
	workdir = os.path.abspath(os.path.join(basedir, series))
	AssertDir(workdir)
	os.chdir(workdir)
	if os.path.isdir(os.path.join(package, ".git")):
		print "LL: Updating " + series + "/" + package
		os.chdir(package)
		os.system("git fetch -q")
	else:
		print "LL: Cloning " + series + "/" + package
		cmd = "git clone "
		if package == "linux" and kernel_reference != "":
			cmd += " --reference " + kernel_reference
		cmd += " " + repo_host + ":"
		cmd += os.path.join("security", series, package)
		cmd += " " + package
		os.system(cmd)
		os.chdir(package)
	if not "central" in GitListRemotes():
		print "LL: Adding remote central"
		path = repo_host + ":"
		path += os.path.join(repo_path, series, package)
		os.system("git remote add central " + path)
	os.system("git remote update central")
	if not "ubuntu" in GitListRemotes():
		print "LL: Adding remote ubuntu"
		path = repo_host + ":"
		path = os.path.join(path, "srv", "kernel.ubuntu.com")
		path = os.path.join(path, "git", "ubuntu", "ubuntu-")
		if package == "linux":
			path += series + ".git"
		else:
			path += series + "-" + package + ".git"
		os.system("git remote add ubuntu " + path)
	os.system("git remote update ubuntu")

	cmd = "build-set-target " + series + "-sec "
	# Hack until buildscripts are changed!
	if package == "linux":
		cmd += "kernel "
	else:
		cmd += package + " "
	cmd += os.getcwd()
	os.system(cmd)

	os.chdir(owd)
	
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
for series in ListSupportedSeries():
	print "LL: Setup for " + series
	if not series in PkgList.keys():
		continue
	for package in sorted(PkgList[series].keys()):
		RemoteSetupRepo(series, package)
		LocalSetupRepo(series, package)
