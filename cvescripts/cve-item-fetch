#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os, re
import optparse
from cvescripts_lib import *
from git_lib import *

parser = optparse.OptionParser(
    '''%prog [options] (CVE-xxxx-yyyy|BUG-#)'''
)
parser.set_description(
    '''Import the saved patches from someone else. The work item must be '''
    '''assigned to somebody else for this command to succeed.'''
)
parser.add_option(
    "--force", "-f", action="store_true", default=False,
    help='''Force creation of branches, even if one of the same name already'''
        ''' exists (default=%default).'''
)
(opts, args) = parser.parse_args()

#------------------------------------------------------------------------------
# Requires a name for the work item. And it should be a valid real one.
#------------------------------------------------------------------------------
if len(args) < 1:
    print "EE: no work item specified"
    sys.exit(1)

id = args[0]
if not WorkItemNameValid(id) or id == WorkItemReleaseName():
    print "EE:", id, "is not a valid work item name!"
    sys.exit(1)

owd = os.getcwd()
TrackerPull()

os.chdir(tracker_dir)
try:
    cvefile = cve_lib.find_cve(id)
except:
    print "EE: No CVE file found for", cvefile
    sys.exit(1)
os.chdir(owd)

cvefile  = os.path.join(tracker_dir, cvefile)
wi       = WorkItem(cvefile)
assignee = wi.get_assignee()

#------------------------------------------------------------------------------
# It not assigned to anybody or assigned to myself, this does not make sense.
#------------------------------------------------------------------------------
if assignee == "":
    print "EE:", id, "is not assigned to anybody!"
    sys.exit(1)
if assignee == my_ircnick:
    print "EE:", id, "is assigned to yourself!"
    sys.exit(1)

repo = os.path.join(repo_host + ":", "home")
for section in config.sections():
    if section == assignee:
        repo = os.path.join(repo, section, "security")
        break
    try:
        if Unquote(config.get(section, "ircnick")) == assignee:
            repo = os.path.join(repo, section, "security")
            break
    except:
        pass
else:
    print "EE: Login name for", assignee, "not found in configuration"
    sys.exit(1)

print "II: Fetchting", id, "from", assignee + "'s repo..."
fetched = 0
for area in ListWorkareas():
    os.chdir(area)
    print "II:", area

    if id in GitListBranches():
        if not opts.force:
            print "EE: Branch", id, "already exists and not forced"
            sys.exit(1)
        if os.system("git branch -D " + id + " 2>/dev/null") != 0:
            print "EE: Failed to delete existing branch (checked out?)"
            sys.exit(1)

    cmd = "git fetch " + os.path.join(repo, area) + " " + id + " 2>/dev/null"
    if os.system(cmd) == 0:
        fetched += 1
        if os.system("git branch " + id + " FETCH_HEAD") != 0:
            print "EE: Failed to create local branch", id
            sys.exit(1)
    else:
        (series, pkgshort) = area.split(os.path.sep)
        CreateBranch(series, pkgshort, id, checkout=False)

    os.chdir(owd)

if fetched == 0:
    print "EE: No branches were actually fetched!"
    sys.exit(1)

# vi:set ts=4 sw=4 expandtab:
