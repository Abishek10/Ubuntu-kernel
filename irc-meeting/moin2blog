#!/usr/bin/python

import re
import sys

class Irep:

    # __init__
    #
    def __init__(self):
        pass

    # initialize
    #
    def initialize(self):
        self.moin = [
            {
                'rexp'   : '^=\s+(.*)\s+=$',
                'name' : 'h1',
            }, {
                'rexp'   : '^==\s+(.*)\s+==$',
                'name' : 'h2',
            }, {
                'rexp' : '^===\s+(.*)\s+===$',
                'name' : 'h3',
            }, {
                'rexp' : '^====\s+(.*)\s+====$',
                'name' : 'h4',
            }, {
                'rexp' : '^=====\s+(.*)\s+=====$',
                'name' : 'h5',
            }, {
                'rexp' : '^\s+[\.*]\s+(.*)$',
                'name' : 'list',
            }, {
                'rexp' : '^ \.\s+(.*)$',
                'name' : 'l1',                         # bulletless
            }, {
                'rexp' : '^  \.\s+(.*)$',
                'name' : 'l2',                         # bulletless
            }, {
                'rexp' : '^   \.\s+(.*)$',
                'name' : 'l3',                         # bulletless
            }, {
                'rexp' : '^ \*\s+(.*)$',
                'name' : 'bl1',
            }, {
                'rexp' : '^  \*\s+(.*)$',
                'name' : 'bl2',
            }, {
                'rexp' : '^   \*\s+(.*)$',
                'name' : 'bl3',
            }, {
                'rexp' : '^\s*\|\|.*$',
                'name' : 'table',
            }, {
                'rexp' : '\[\[(.*)\s*\|\s*(.*)\]\]',
                'name' : 'link',
            }, {
                'rexp' : '<<BR>>',
                'name' : 'line-break',
            }

        ]

        for rec in self.moin:
            rec['comp'] = re.compile(rec['rexp'], re.IGNORECASE)

        self.rc_list = re.compile('^(\s+)([\.\*])\s+(.*)$')
        self.list_tracker = {
            'tracking'     : False,
            'indent_depth' : 0,
            'last_wspace'  : 0
        }

        self.working_table = False

        self.spaces = "                                                                        "

    # list_cleanup
    #
    # If we are anywhere in a list, when this is caled we need to produce
    # all the code to get out cleanly of the lists.
    #
    def list_cleanup(self):
        if self.list_tracker['tracking']:
            while self.list_tracker['indent_depth'] > 0:
                self.print_list_element_end()
                self.list_tracker['indent_depth'] -= 1
                self.print_list_begin_end(-1)
                self.list_tracker['indent_depth'] -= 1
        self.list_tracker['tracking']     = False
        self.list_tracker['indent_depth'] = 0
        self.list_tracker['last_wspace']  = 0

    def print_list_begin_end(self, lvl):
        if lvl == 1:
            print("%s<ul>"  % (self.spaces[:self.list_tracker['indent_depth'] * 4]))
        else:
            print("%s</ul>" % (self.spaces[:self.list_tracker['indent_depth'] * 4]))

    def print_list_element_start(self):
        print("%s<li>" % (self.spaces[:self.list_tracker['indent_depth'] * 4]))

    def print_list_element_end(self):
        print("%s</li>" % (self.spaces[:self.list_tracker['indent_depth'] * 4]))

    def print_list_text(self, txt):
        m = re.match('(^.*)\[\[(.*)\s*\|\s*(.*)\]\](.*$)', txt)
        if m != None:
            txt = '%s<a href="%s">%s</a>%s' % (m.group(1), m.group(2), m.group(3), m.group(4))

        print("%s%s" % (self.spaces[:(self.list_tracker['indent_depth'] + 1) * 4], txt))

    # do_list
    #
    def do_list(self, line):
        if not self.list_tracker['tracking']:
            self.list_tracker['tracking'] = True
            indent_depth = 1
            m = self.rc_list.match(line)
            if m != None:
                self.list_tracker['last_wspace'] = len(m.group(1))
                self.print_list_begin_end(1)
                self.list_tracker['indent_depth'] += 1
                self.print_list_element_start()
                self.print_list_text(m.group(3))
        else:
            m = self.rc_list.match(line)
            if m != None:
                wspace = len(m.group(1))
                # Same list level
                #
                if wspace == self.list_tracker['last_wspace']:
                    self.print_list_element_end()
                    self.print_list_element_start()
                    self.print_list_text(m.group(3))

                # Adding level
                #
                elif wspace > self.list_tracker['last_wspace']:
                    self.list_tracker['last_wspace'] = len(m.group(1))
                    self.list_tracker['indent_depth'] += 1
                    self.print_list_begin_end(1)
                    self.list_tracker['indent_depth'] += 1
                    self.print_list_element_start()
                    self.print_list_text(m.group(3))

                # Removing level
                #
                else:
                    self.list_tracker['last_wspace'] = len(m.group(1))
                    self.print_list_element_end()
                    self.list_tracker['indent_depth'] -= 1
                    self.print_list_begin_end(-1)
                    self.list_tracker['indent_depth'] -= 1
                    self.print_list_element_end()
                    self.print_list_element_start()
                    self.print_list_text(m.group(3))

    def do_h3(self, text):
        print("")
        print("<!-- -------------------------------------------------------------------------")
        print("     %s" % (text))
        print("-->")
        print("<br>")
        print('<h3 style="font-weight: bold;font-size:1.25em;border-bottom: 2px solid silver;">%s</h3>' % (text))

    def do_h1(self, text):
        print('<h3 style="font-weight: bold;font-size:1.75em;border-bottom: 2px solid silver;">%s</h3>' % (text))

    def do_h2(self, text):
        print('<h3 style="font-weight: bold;font-size:1.50em;border-bottom: 2px solid silver;">%s</h3>' % (text))

    def do_h4(self, text):
        print('<h3 style="font-weight: bold;font-size:1.0em;">%s</h3>' % (text))

    def do_link(self, url, text):
        print('<a href="%s">%s</a>' % (url, text))

    def do_table(self, line):
        if not self.working_table:
            print('<table width="100%" cellspacing="0">')
            self.working_table = True

        line = line.strip('||')
        line = line.rstrip('||')

        sys.stdout.write("    <tr>")
        segments = line.split('||')
        for td in segments[:len(segments)]:
            sys.stdout.write(" <td>%s</td>" % (td))
            sys.stdout.write(" <td>&nbsp;&nbsp;</td>")
        sys.stdout.write("</tr>\n")

    def table_cleanup(self):
        if self.working_table:
            print("</table>")
            self.working_table = False

    # main
    #
    def main(self):
        self.initialize()
        ln = 0
        for line in sys.stdin:
            line = line.rstrip()
            ln += 1
            hit = False
            for rec in self.moin:
                m = rec['comp'].search(line)
                if m != None:
                    hit = True
                    if rec['name'] == 'h1':
                        self.do_h1(m.group(1))
                    elif rec['name'] == 'h2':
                        self.do_h2(m.group(1))
                    elif rec['name'] == 'link':
                        self.do_link(m.group(1), m.group(2))
                    elif rec['name'] == 'line-break':
                        print("<br />")
                    elif rec['name'] == 'list':
                        self.table_cleanup()
                        self.do_list(line)
                    else:
                        self.list_cleanup()
                        if rec['name'] == 'table':
                            self.do_table(line)
                        else:
                            self.table_cleanup()
                            if rec['name'] == 'h3':
                                self.do_h3(m.group(1))
                            else:
                                if rec['name'] == 'h4':
                                    self.do_h4(m.group(1))
                                else:
                                    print("[%d] %s: %s" % (ln, rec['name'], m.group(1)))

                    break

            if hit: continue

            print(line)

        self.list_cleanup()
        self.table_cleanup()

if __name__ == '__main__':
    app = Irep()
    app.main()

# vi:set ts=4 sw=4 expandtab:
