#!/bin/bash
. $(dirname $0)/build-common

if [ "$1" = "" ]; then
	echo "Usage: $0 <system>"
	exit 1
fi

GetHostEnvironment $1

status=$($(dirname $0)/build-check $1)
if [ $? -ne 0 ]; then
	echo "${SYSNAME}: $status"
	exit 1
fi

GetDistroEnvironment "${DIST}" || exit 1

for i in $(QueryChroots ${HOST}); do
	if [ "$i" = "${CHROOT}" ]; then
		break
	fi
done
if [ "$i" != "${CHROOT}" ]; then
	echo "No chroot setup for ${DIST} on ${HOST}!" >&2
	exit 1
fi

echo "$SYSNAME:"
if $VERBOSE; then
	echo "  Source:     ${SRCDIR}"
	echo "  Sending to: ${HOST}:${BUILDDIR}"
fi

if [ ! -d ${SRCDIR}/.git ]; then
	echo "${SRCDIR} is not a repository!" >&2
	exit 1
fi

#
# For paths not located in /home the path is assumed to be under
# the chroot tree.
#
case "${BUILDDIR}" in
	/home/*|home/*)
		INITDIR="${BUILDDIR}"
		;;
	*)
		INITDIR="$(GetChrootLocation ${HOST} ${CHROOT})${BUILDDIR}"
		;;
esac

cat <<EOD | ssh ${HOST} ${CHROOTCMD}
if [ ! -d $BUILDDIR ]; then
	echo "  remote: creating $BUILDDIR"
	mkdir -p $BUILDDIR
fi
if [ ! -d ${BUILDDIR}/.git ]; then
	cd ${BUILDDIR}
	echo "  remote: creating empty git repos."
	git-init >/dev/null 2>&1
fi
EOD

echo "  local: using git to push..."
cd "${SRCDIR}"
git-send-pack --force ${HOST}:${INITDIR} master
#	echo "  local: using tar to push..."
#	tar -czf- --exclude=.git --exclude=.gitignore -C ${SRCDIR} . | \
#		ssh ${HOST} ${CHROOTCMD} tar -xzf- -C ${BUILDDIR}

echo "  ${HOST}: cleaning up build area ..."
EmitDoClean | ssh ${HOST} ${CHROOTCMD}
