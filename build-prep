#!/bin/bash
. $(dirname $0)/build-common

BRANCH="master"
TARGET=""
while [ $# -gt 0 ]; do
	case $1 in
		-b|--branch)
			BRANCH="$2"
			shift
			;;
		-*|--*)
			echo "Unknown option <$1>!" >&2
			exit 1
			;;
		*)
			if [ "${TARGET}" = "" ]; then
				TARGET="$1"
			else
				echo "Too many arguments!" >&2
				exit 1
			fi
			;;
	esac
	shift
done

if [ "$(git-branch|grep "${BRANCH}")" = "" ]; then
	echo "No branch <${BRANCH}> found!" >&2
	exit 1
fi

if [ "${TARGET}" = "" ]; then
	echo "Usage: $(basename $0) [<options>] <system>"
	exit 1
fi

GetHostEnvironment ${TARGET}

status=$($(dirname $0)/build-check ${TARGET})
if [ $? -ne 0 ]; then
	echo "${SYSNAME}: $status"
	exit 1
fi

GetDistroEnvironment "${DIST}" || exit 1

for i in $(QueryChroots ${HOST}); do
	if [ "$i" = "${CHROOT}" ]; then
		break
	fi
done
if [ "$i" != "${CHROOT}" ]; then
	echo "No chroot setup for ${DIST} on ${HOST}!" >&2
	exit 1
fi

echo "$SYSNAME:"
if $VERBOSE; then
	echo "  Source:     ${SRCDIR}"
	echo "  Sending to: ${HOST}:${BUILDDIR}"
fi

if [ ! -d ${SRCDIR}/.git ]; then
	echo "${SRCDIR} is not a repository!" >&2
	exit 1
fi

cat <<EOD | ssh ${HOST} 2>/dev/null || exit 1
if [ ! -d $BUILDDIR ]; then
	echo "  remote: creating $BUILDDIR"
	mkdir -p $BUILDDIR
	if [ \$? -ne 0 ]; then
		echo "  remote: failed to create directory!"
		exit 1
	fi
fi
if [ ! -d "${BUILDDIR}/.git" ]; then
	cd "${BUILDDIR}"
	echo "  remote: creating empty git repos."
	git-init
	if [ \$? -ne 0 ]; then
		echo "  remote: failed to initialize git!"
		exit 1
	fi
fi
EOD

echo "  local: sending status scripts..."
scp -q $(dirname $0)/target-scripts/run-* ${HOST}:${BASEDIR}

echo "  local: using git to push..."
cd "${SRCDIR}"
git-push --tags --force ${HOST}:${BUILDDIR} ${BRANCH} || exit 1

echo "  ${HOST}: cleaning up build area ..."
ssh ${HOST} ${BASEDIR}/run-clean --branch ${BRANCH} $(basename ${BUILDDIR})

