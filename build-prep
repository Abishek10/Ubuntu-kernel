#!/bin/bash
. $(dirname $0)/build-common

if [ "$1" = "" ]; then
	echo "Usage: $0 <system>"
	exit 1
fi

GetHostEnvironment $1

status=$($(dirname $0)/build-check $1)
if [ $? -ne 0 ]; then
	echo "${SYSNAME}: $status"
	exit 1
fi

GetDistroEnvironment "${DIST}" || exit 1

for i in $(QueryChroots ${HOST}); do
	if [ "$i" = "${CHROOT}" ]; then
		break
	fi
done
if [ "$i" != "${CHROOT}" ]; then
	echo "No chroot setup for ${DIST} on ${HOST}!" >&2
	exit 1
fi

echo "$SYSNAME:"
if $VERBOSE; then
	echo "  Source:     ${SRCDIR}"
	echo "  Sending to: ${HOST}:${BUILDDIR}"
fi

if [ ! -d ${SRCDIR}/.git ]; then
	echo "${SRCDIR} is not a repository!" >&2
	exit 1
fi

echo "  local: sending status scripts..."
scp -q $(dirname $0)/target-scripts/run-*status ${HOST}:${BASEDIR}

cat <<EOD | ssh ${HOST} 2>/dev/null || exit 1
if [ ! -d $BUILDDIR ]; then
	echo "  remote: creating $BUILDDIR"
	mkdir -p $BUILDDIR
	if [ \$? -ne 0 ]; then
		echo "  remote: failed to create directory!"
		exit 1
	fi
fi
if [ ! -d "${BUILDDIR}/.git" ]; then
	cd "${BUILDDIR}"
	echo "  remote: creating empty git repos."
	git-init
	if [ \$? -ne 0 ]; then
		echo "  remote: failed to initialize git!"
		exit 1
	fi
fi
EOD

echo "  local: using git to push..."
cd "${SRCDIR}"
git-send-pack --force ${HOST}:${BUILDDIR} master || exit 1

echo "  ${HOST}: cleaning up build area ..."
EmitDoClean | ssh ${HOST} 2>/dev/null

