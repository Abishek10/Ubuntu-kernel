#!/usr/bin/env python
#
# Take a tree of test results and process it, producing a set of html
# reports.
#

from sys                                import argv

from grinder                            import Cmdline, CmdlineError, Exit, TestResultsRepository, TestResultsRepositoryError
from lib.core.dbg                       import Dbg
from lib.core.utils                     import error

# Digest
#
class Digest():
    """
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("Digest.__init__")

        self.cfg = cfg

        Dbg.leave("Digest.__init__")

    # initialize
    #
    def initialize(self):
        Dbg.enter("Digest.initialize")

        try:
            self.trr = TestResultsRepository()

        except TestResultsRepositoryError as e:
            error(e.msg)
            Dbg.leave("Digest.initialize")
            raise Exit()

        Dbg.leave("Digest.initialize")

    # main
    #
    def main(self):
        Dbg.enter("Digest.main")

        try:
            self.initialize()

            for tr in self.trr.test_runs:
                results = self.trr.results(tr)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("Digest.main")
        return


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]

    # The cmdline processing is done here partially so the debug options
    # can be processed right away.
    #
    cmdline = Cmdline()
    try:
        app = Digest(cmdline.process(argv, defaults))
        app.main()
    except CmdlineError as e:
        cmdline.error(e.msg, defaults)

# vi:set ts=4 sw=4 expandtab:

