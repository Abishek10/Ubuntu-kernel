#!/usr/bin/env python
#

from core.base_bug_engine               import BaseBugEngine, BaseBugEngineError
from core.bug_handler                   import BugHandler
import bug_handlers.open

# OpenEngineError
#
class OpenEngineError(BaseBugEngineError):
    # __init__
    #
    def __init__(self, error):
        BaseBugEngineError(self, error)

# OpenEngine
#
class OpenEngine(BaseBugEngine):
    """
    This class is all about working on any "Open" bugs. "Open" bugs
    have a status of: "New", "Confirmed", "Triaged" or "In Progress".
    """

    # __init__
    #
    def __init__(self):
        """
        Initialize the base class.
        """
        defaults = {}
        defaults['configuration_file'] = 'open.rc'
        BaseBugEngine.__init__(self, defaults)

    # bug_handler_startup
    #
    def bug_handler_startup(self):
        # The plugin list is pulled in here because we only want to do it once
        # and not every time the bug_handler is called. And also, because this
        # method is called after the base class has created self.lp.
        #
        self.bug_handlers = BugHandler.get_plugins(self.lp, self.vout)

        if 'verbose' in self.cfg:
            BugHandler.verbose = self.cfg['verbose']

        if 'verbosity' in self.cfg:
            BugHandler.verbosity = self.cfg['verbosity']


if __name__ == '__main__':
    app = OpenEngine()
    app.main()

# vi:set ts=4 sw=4 expandtab:

