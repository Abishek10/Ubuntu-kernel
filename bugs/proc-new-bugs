#!/usr/bin/env python
#
# A script for processing all the "New" bugs.
#

from core.bug_engine                    import BugEngine
from core.bug_handler                   import BugHandler

import bug_handlers.new  # This imports all the bug handler plugins that this script
                         # will use.

# NewEngine
#
class NewEngine(BugEngine):
    """
    This class is all about working on any "New" bugs. "New" bugs
    have a status of: "New".
    """

    # __init__
    #
    def __init__(self):
        """
        The most important things we do here are set the default for the configuration
        file that this script uses and then calls the base class to initialize it.
        """
        defaults = {}
        defaults['configuration_file'] = 'new.rc'
        BugEngine.__init__(self, defaults)

    # bug_handler_startup
    #
    def bug_handler_startup(self):
        """
        Setup the list of bug handler plugins that this script will use.

        The plugin list is pulled in here because we only want to do it once
        and not every time the bug_handler is called. And also, because this
        method is called after the base class has created self.lp.

        Note: This will probably move into the base class.
        """
        self.bug_handlers = BugHandler.get_plugins(self.lp, self.vout)

        # Yes, the verbose handling is a little stupid right now, it will get
        # cleaned up "soon".
        #
        if 'verbose' in self.cfg:
            BugHandler.verbose = self.cfg['verbose']

        if 'verbosity' in self.cfg:
            BugHandler.verbosity = self.cfg['verbosity']


if __name__ == '__main__':
    app = NewEngine()
    app.main()

# vi:set ts=4 sw=4 expandtab:

