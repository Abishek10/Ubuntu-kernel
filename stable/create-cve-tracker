#!/usr/bin/env python
#

from sys                                import argv
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, eout
from ktl.std_app                        import StdApp
from ktl.git                            import Git, GitError
from ktl.debian                         import Debian, DebianError
from ktl.kernel                         import Kernel, KernelError
from lpltk.service                      import LaunchpadService
from lazr.restfulclient.errors          import HTTPError
import re

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': print e
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [options]                                                                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --staging        Use the staging LP server to create the bug. This is just for       \n")
        stdo("                         testing and will go away when the database is reset.                \n")
        stdo("                                                                                             \n")
        stdo("        --cve            The CVE that this is to create a tracking bug for. This parameter   \n")
        stdo("                         is required.                                                        \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --cve=2010-4079                                                                   \n" % self.cfg['app_name'])
        stdo("        %s --cve=2010-4079 --staging                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'staging', 'cve=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--staging'):
                    self.cfg['staging'] = True

                elif (opt == '--cve'):
                    self.cfg['cve'] = val

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):

        if 'cve' not in self.cfg:
            raise CmdlineError('You are required to specify a CVE.')

        if self.cfg['cve'] == '':
            raise CmdlineError('You are required to specify a CVE.')

        m = re.match('[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]', self.cfg['cve'])
        if m == None:
            raise CmdlineError('The specified CVE does not match a CVE format.')

        return


# AppError
#
# A general exception that can be raised when an error is encountered in the app.
#
class AppError(Exception):
    # __init__
    #
    def __init__(self, error=''):
        self.msg = error

# CreateCveTracker
#
class CreateCveTracker(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # initialize
    #
    def initialize(self):
        if 'staging' in self.cfg:
            self.defaults['launchpad_services_root'] = 'staging'
        self.lp = LaunchpadService(self.defaults)

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)
            self.initialize()

            # Title: CVE-xxxx-xxxx
            #
            title = "CVE-%s" % (self.cfg['cve'])

            # Description:
            #    This bug is for tracking the <version> upload package. This bug will
            #    contain status and testing results related to that upload.
            #
            description = "Placeholder"

            tags = ['kernel-cve-tracking-bug']
            bug = self.lp.create_bug(project='ubuntu', package='linux', title=title, description=description, security_related=True, tags=tags)

            if 'staging' in self.cfg:
                print("https://bugs.staging.launchpad.net/bugs/%s" % (bug.id))
            else:
                print("https://bugs.launchpad.net/bugs/%s" % (bug.id))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle ommand line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        except GitError as e:
            eout(e.msg[0])

        except DebianError as e:
            eout(e.msg)

        except KernelError as e:
            eout(e.msg)

        return

if __name__ == '__main__':
    app = CreateCveTracker()
    app.main()

# vi:set ts=4 sw=4 expandtab:

