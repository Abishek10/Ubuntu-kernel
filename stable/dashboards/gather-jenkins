#!/usr/bin/env python
#
# This application takes a list json file as input. That json file
# contains a 'dictionary' of key value pairs where the key is a
# LauncPad bug id and the value is the source package of interest.
#

from sys                                import argv

from dash.cmdline                       import Cmdline, CmdlineError
from dash.dbg                           import Dbg
from dash.utils                         import dump
import urllib
import json

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# Jenkins
#
class Jenkins():
    # __init__
    #
    def __init__(self, server):
        Dbg.enter("Jenkins.__init__")
        self.server = server
        Dbg.leave("Jenkins.__init__")

    # jobs
    #
    def jobs(self, url):
        Dbg.enter("Jenkins.jobs")

        root = self.json_fetch(url)
        retval = root['jobs']

        Dbg.leave("Jenkins.jobs")
        return retval

    # job
    #
    def job(self, url):
        Dbg.enter("Jenkins.job")

        root = self.json_fetch(url)
        retval = root

        Dbg.leave("Jenkins.job")
        return retval

    # views
    #
    def views(self):
        Dbg.enter("Jenkins.views")

        root = self.json_fetch(self.server)
        retval = root['views']

        Dbg.leave("Jenkins.views")
        return retval

    # json_fetch
    #
    def json_fetch(self, url):
        f = urllib.urlopen(url + "/api/json")
        data = json.loads(f.read())
        return data

# Gather
#
class Gather():
    """
    This class/script examines all 'open' bugs. If a given bug was filed against a
    version of Ubuntu that is no longer supported, change the status of that bug
    to "Won't Fix" and add a comment explaining why it was marked as such.
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("Gather.__init__")

        self.cfg    = cfg
        self.qa = Jenkins("https://jenkins.qa.ubuntu.com")

        Dbg.leave("Gather.__init__")

    # main
    #
    def main(self):
        Dbg.enter("Gather.main")

        try:
            jobs = self.qa.jobs("https://jenkins.qa.ubuntu.com")
            for j in jobs:
                if j['name'] == 'kernel-smoketest-statler':
                    job = self.qa.job(j['url'])
                    jd = self.qa.json_fetch(job['lastBuild']['url'])
                    dump(jd)

            raise Exit()

            views = self.qa.views()
            for v in views:
                print(v['name'])
                if v['name'] == 'SRU Kernel':
                    jobs = self.qa.jobs(v['url'])
                    for j in jobs:
                        job = self.qa.job(j['url'])
                        jd = self.qa.json_fetch(job['lastBuild']['url'])
                        dump(jd)

                        f = urllib.urlopen(job['lastBuild']['url'] + "/console")
                        print(f.read())

                        break

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("Gather.main")
        return


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]
    defaults['launchpad_client_name']   = 'kernel-team-dashboard-gatherer'
    defaults['read_only'] = True

    # The cmdline processing is done here partially so the debug options
    # can be processed right away.
    #
    cmdline = Cmdline()
    try:
        app = Gather(cmdline.process(argv, defaults))
        app.main()
    except CmdlineError as e:
        cmdline.error(e.msg, defaults)

# vi:set ts=4 sw=4 expandtab:

