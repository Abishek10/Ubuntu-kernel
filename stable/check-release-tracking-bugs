#!/usr/bin/env python
#

from sys                                import argv, stderr
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo
from ktl.std_app                        import StdApp
from ktl.workflow                       import Workflow
from lpltk.service                      import LaunchpadService
from datetime                           import datetime
import re

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>]                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("        --staging                                                                            \n")
        stdo("                         Use the staging LP service instead of the production one.           \n")
        stdo("                                                                                             \n")
        stdo("        --bug=<bug number>                                                                   \n")
        stdo("                         Process only the specified bug, instead of scanning all tracking    \n")
        stdo("                         bugs.                                                               \n")
        stdo("                                                                                             \n")
        stdo("        --fix                                                                                \n")
        stdo("                         Fix when possible errors on tracking bugs. For errors which this    \n")
        stdo("                         tool can fix automatically, they will be prefixed  with '**Fixing'  \n")
        stdo("                         when displaying them, and a try to repair will be done.             \n")
        stdo("                                                                                             \n")
        stdo("        --invalidate                                                                         \n")
        stdo("                         Invalidate a tracking bug. Requires that you specify the bug number \n")
        stdo("                         with --bug option (doesn't allow invalidating all tracking bugs)    \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=', 'staging', 'bug=', 'fix', 'invalidate']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

                elif (opt == '--staging'):
                    self.cfg['staging'] = True

                elif (opt == '--bug'):
                    self.cfg['bug'] = val

                elif (opt == '--fix'):
                    self.cfg['fix'] = True

                elif (opt == '--invalidate'):
                    self.cfg['invalidate'] = True

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        """
        Used to verify that all required parameters are present and correct.
        """
        return


# CheckTrackingBugs
#
class CheckTrackingBugs(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        if 'staging' in self.cfg:
            self.defaults['launchpad_services_root'] = 'qastaging'
            self.cfg['lpserver'] = 'bugs.qastaging.launchpad.net'
        else:
            self.cfg['lpserver'] = 'bugs.launchpad.net'
        self.workflow = Workflow()
        self.lp = LaunchpadService(self.defaults)
        self.project = self.lp.projects['kernel-sru-workflow']
        self.prjname = self.project.display_name
        # TODO: workflow class looks the best place for these:
        self.valid_task_states = {
            'prepare-package'       : [ 'New', 'In Progress', 'Incomplete', 'Fix Released' ],
            'promote-to-proposed'   : [ 'New', 'Confirmed', 'In Progress', 'Incomplete', 'Fix Released' ],
            'verification-testing'  : [ 'New', 'In Progress', 'Incomplete', 'Fix Released' ],
            'certification-testing' : [ 'New', 'Confirmed', 'In Progress', 'Invalid', 'Incomplete', 'Fix Released' ],
            'regression-testing'    : [ 'New', 'Confirmed', 'In Progress', 'Incomplete', 'Fix Released' ],
            'promote-to-updates'    : [ 'New', 'Confirmed', 'Incomplete', 'Fix Released' ],
            'promote-to-security'   : [ 'New', 'Confirmed', 'Invalid', 'Incomplete', 'Fix Released' ],
            'security-signoff'      : [ 'New', 'Confirmed', 'In Progress', 'Invalid', 'Incomplete', 'Fix Released' ]
            }
        self.certification_tags = [ 'certification-testing-passed', 'certification-testing-failed' ]
        self.qa_tags = [ 'qa-testing-passed', 'qa-testing-failed' ]
        st_msg = [None] * 19
        st_msg[1] = [ 0, "Waiting kernel team member to start to work on it (new)" ]
        st_msg[2] = [ 0, "Waiting package to be prepared/built" ]
        st_msg[3] = [ 1, "Please run workflow manager, prepare-package is fix released but promote-to-proposed is not confirmed" ]
        st_msg[4] = [ 0, "Waiting archive admin to promote to proposed" ]
        st_msg[5] = [ 1, "Please run workflow manager, promote-to-proposed is fix released but verification-test is not in progress" ]
        st_msg[6] = [ 0, "In verification phase" ]
        st_msg[7] = [ 1, "Please run workflow manager, verification-testing is fix released but one of certification-testing/regression-testing/security-signoff are still with status = New" ]
        st_msg[8] = [ 0, "Waiting HW Certification to start" ]
        st_msg[9] = [ 0, "HW Certification in progress" ]
        st_msg[10] = [ 0, "This bug is not subject to verification from HW Certification team" ]
        st_msg[11] = [ 0, "Waiting QA/regression testing to start" ]
        st_msg[12] = [ 0, "QA/regression testing in progress" ]
        st_msg[13] = [ 0, "Waiting Security signoff to start" ]
        st_msg[14] = [ 0, "Security signoff in progress" ]
        st_msg[15] = [ 0, "This bug doesn't need Security Signoff" ]
        st_msg[16] = [ 0, "Warning: security-signoff is fix released but promote-to-security is not confirmed" ]
        st_msg[17] = [ 0, "Waiting for packages to be copied to -updates" ]
        st_msg[18] = [ 0, "Waiting for packages to be copied to -security" ]
        self.st_msg = st_msg
        self.st_table = {
            'prepare-package' :
                { 
                  'New'          : {
                                     'promote-to-proposed'   : { 'New' : 1 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'In Progress'  : {
                                     'promote-to-proposed'   : { 'New' : 2 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Incomplete'  :  {
                                     'promote-to-proposed'   : { 'New' : 2 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Fix Released' : {
                                     'promote-to-proposed'   : { 'New' : 3, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   }
                },
            'promote-to-proposed' :
                {
                  'New'          : { 
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 3 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Confirmed'    : {
                                     'prepare-package'       : { 'Fix Released' : 4 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'In Progress'  : {
                                     'prepare-package'       : { 'Fix Released' : 4 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Incomplete'   : { 
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 5, 'In Progress' : 6, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   }
                },
            'verification-testing' :
                {
                  'New'          : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 5 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'In Progress'  : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 6 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Incomplete'   : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 6 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'New' : 7, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 7, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'New' : 7, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   }
                },
            'certification-testing' :
                {
                  'New'          : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 7 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Confirmed'    : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 8 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'In Progress'  : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 9 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Incomplete'   : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 9 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Invalid'      : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 10, 'In Progress' : 10, 'Incomplete' : 0, 'Fix Released' : 10 },
                                     'regression-testing'    : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   }
                },
            'regression-testing' :
                {
                  'New'          : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 7 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'New' : 0 }
                                   },
                  'Confirmed'    : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 11 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'In Progress'  : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 12 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Incomplete'   : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 12 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   }
                },
            'security-signoff' :
                {
                  'New'          : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 7 },
                                     'certification-testing' : { 'New' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 }
                                   },
                  'Confirmed'    : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 13 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 }
                                   },
                  'In Progress'  : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 14 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 }
                                   },
                  'Incomplete'  : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 14 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0 },
                                     'promote-to-security'   : { 'New' : 0 }
                                   },
                  'Invalid'      : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 15 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Invalid' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 16, 'Confirmed' : 0, 'Incomplete' : 0, 'Fix Released' : 0 }
                                   }
                },
            'promote-to-security' :
                {
                  'New'          : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'Incomplete' : 0, 'In Progress' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0, 'In Progress': 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 17, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0, 'Invalid' : 0 }
                                   },
                  'Confirmed'    : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'Confirmed' : 17, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Fix Released' : 0 }
                                   },
                  'Incomplete'   : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'Confirmed' : 17, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Fix Released' : 0 }
                                   },
                  'Invalid'      : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'New' : 0, 'Confirmed' : 17, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Invalid' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Fix Released' : 0, 'Invalid' : 0 },
                                     'regression-testing'    : { 'Fix Released' : 0 },
                                     'promote-to-updates'    : { 'Confirmed' : 17, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Fix Released' : 0 }
                                   }
                },
            'promote-to-updates' :
                {
                  'New'          : {
                                     'prepare-package'       : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'verification-testing'  : { 'New' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'certification-testing' : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'New' : 0, 'Confirmed' : 18, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'New' : 0, 'Confirmed' : 0, 'In Progress' : 0, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Confirmed'    : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'Confirmed' : 18, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Incomplete'   : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'Confirmed' : 18, 'Incomplete' : 0, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Invalid' : 0, 'Fix Released' : 0 }
                                   },
                  'Fix Released' : {
                                     'prepare-package'       : { 'Fix Released' : 0 },
                                     'promote-to-proposed'   : { 'Fix Released' : 0 },
                                     'verification-testing'  : { 'Fix Released' : 0 },
                                     'certification-testing' : { 'Invalid' : 0, 'Fix Released' : 0 },
                                     'regression-testing'    : { 'Fix Released' : 0 },
                                     'promote-to-security'   : { 'Confirmed' : 18, 'Invalid' : 0, 'Fix Released' : 0 },
                                     'security-signoff'      : { 'Invalid' : 0, 'Fix Released' : 0 }
                                   }
                }
        }
        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.initialize()

            if 'bug' in self.cfg:
                bug = self.lp.get_bug(self.cfg['bug'])
                is_track_bug = self.verify_tracking_bug(bug)
                if 'invalidate' in self.cfg:
                    if is_track_bug:
                        for task in bug.tasks:
                            task.status = 'Invalid'
                        while len(bug.tags):
                            del bug.tags[0]
                        bug.title = "Ignore this bug"
                        stdo("Succesfully invalidated bug %s\n" % (self.cfg['bug']))
                    else:
                        self.err("Not invalidating %s, as it doesn't look like a tracking bug"
                                 % (self.cfg['bug']))
            elif 'invalidate' in self.cfg:
                self.err("You must specify the bug number to invalidate (--bug=<number>)")
            else:
                project = self.project
                search_tags = [ 'kernel-release-tracking-bug' ]
                search_tags_combinator = "All"
                # search for bugs with all states for sanity checking, except the
                # already closed ones (Fix Released)
                search_status = [ "New", "Incomplete (with response)",
                                  "Incomplete (without response)", "Incomplete",
                                  "Opinion", "Invalid", "Won't Fix", "Expired",
                                  "Confirmed", "Triaged", "In Progress",
                                  "Fix Committed" ]
                search_since = datetime(year=2011, month=5, day=1)
                # usually tracking bugs marked duplicate are the ones which
                # we invalidated, so omit them too
                search_omit_duplicates = True
                tasks = project.search_tasks(status=search_status, tags=search_tags,
                                             tags_combinator=search_tags_combinator,
                                             modified_since=search_since,
                                             omit_duplicates=search_omit_duplicates)
                for task in tasks:
                    self.verify_tracking_bug(task.bug)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

    def verify_tracking_bug(self, bug):
        print "--- Processing bug %s (%s)" % (bug.id, self.bug_url(bug.id))

        # sanity check source package target, and get workflow tasks
        target = self.verify_bug_target(bug)
        if not target in self.workflow.tdb:
            self.err("Unknown package name (%s), unable to do more checks on this bug" % (target))
            return False
        assignments = self.workflow.tdb[target]['task_assignment']

        # sanity check for master workflow task
        master_task = False
        for task in bug.tasks:
            if task.bug_target_name == self.prjname:
                    master_task = True
                    break
        if not master_task:
            self.err("Didn't found any %s tasks! Unable to do more checks on this bug" % (self.prjname))
            return False
        elif 'invalidate' in self.cfg: # if invalidating, no need for more checks
            return True

        # verify kernel sru workflow tasks for this package
        task_tbl = {}
        for task in bug.tasks:
            task_name = task.bug_target_name
            if (task_name != self.prjname and
                task_name.startswith(self.prjname)):
                self.verify_bug_task(task, target)
                workflow_task = task_name[len(self.prjname):].strip()
                task_tbl[workflow_task] = task.status # cache status for later checks
        for task in iter(assignments):
            if not task in task_tbl:
                self.err("Required workflow task %s not found (target = '%s')" % (task, target))

        # verify bug tags
        initial_tags = self.workflow.initial_tags(target)
        for tag in initial_tags:
            if not tag in bug.tags:
                if self.handle("Required tag in tracking bug missing: %s" % (tag)):
                    bug.tags.append(tag)
        self.verify_bug_tags(bug, 'certification-testing', 'Fix Released', self.certification_tags)
        self.verify_bug_tags(bug, 'regression-testing', 'Fix Released', self.qa_tags)
        # TODO: these extra tags should be in workflow class
        allowed_tags = [ ]
        allowed_tags.extend(initial_tags)
        allowed_tags.extend(self.certification_tags)
        allowed_tags.extend(self.qa_tags)
        allowed_tags.append('regression-proposed')
        allowed_tags.append('verification-failed')
        for tag in bug.tags:
            if not tag in allowed_tags:
                self.err("Unknown tag in tracking bug: %s" % (tag))

        # verify bug state
        valid_status = True
        for task in iter(task_tbl):
            if not task_tbl[task] in self.valid_task_states[task]:
                self.err("Invalid status (%s) for task %s" % (task_tbl[task], task))
                valid_status = False
        if valid_status:
            msgs = {}
            for task in iter(task_tbl):
                ttable = self.st_table[task][task_tbl[task]]
                for otsk in iter(ttable):
                    if otsk in task_tbl:
                        if task_tbl[otsk] in ttable[otsk]:
                            if ttable[otsk][task_tbl[otsk]]:
                                msgs[ttable[otsk][task_tbl[otsk]]] = 1
                        else:
                            self.err("Task %s has status == '%s', but task %s has unexpected status == '%s'"
                                  % (task, task_tbl[task], otsk, task_tbl[otsk]))
            for msg in iter(msgs):
                if self.st_msg[msg][0]:
                    self.err(self.st_msg[msg][1])
                else:
                    stdo("Bug Status: %s\n" % self.st_msg[msg][1])
        else:
            self.err("One or more tasks have invalid status, not checking current bug state")
        return True

    def verify_bug_target(self, bug):
        target = ''
        pkg_title = re.findall('linux[^:]*', bug.title)
        if not pkg_title:
            self.err("Bug title doesn't have the expected package name")
            return target
        pkg_title = pkg_title[0]
        assignments = self.workflow.tdb
        real_target = ''
        for task in bug.tasks:
            task_name = task.bug_target_name
            if (task_name == self.prjname or
                task_name.startswith(self.prjname)):
                continue
            pkg = str(task.target).rsplit('/', 1)[1]
            if pkg in assignments:
                if not target:
                    target = pkg
                    real_target = target
                elif pkg != real_target:
                    self.err("Bug is set to more than one source package! ('%s' != '%s')" % (target, pkg))
                    continue
            else:
                if not target:
                    target = 'default'
                    real_target = pkg
                elif pkg != real_target:
                    self.err("Invalid target/task, or more than one source package set (%s)" % (task_name))
                    continue
                else:
                    continue
            if pkg_title != pkg:
                self.err("Package in bug title (%s) doesn't match source package task (%s)!" % (pkg_title, pkg))
        if not target:
            self.err("No package task found (package in title = %s)" % (pkg_title))
            target = pkg_title
        return target

    def verify_bug_task(self, task, target):
        # check if the task is valid
        task_name = task.bug_target_name
        workflow_task = task_name[len(self.prjname):].strip()
        tname = self.workflow.assignee(target, workflow_task)
        if (not tname and task.status != 'Invalid'):
            if self.handle("Wrong workflow task available or invalid for this package (%s): %s" % (target, workflow_task)):
                task.status = 'Invalid'
            return
        elif not tname:
            return

        # see if task has the proper assignee
        aname = None
        try:
            lp_team = self.lp.launchpad.people[tname]
        except KeyError:
            self.err("Can't find '%s' team in Launchpad!" % (tname))
            lp_team = None
        invalid_assignee = False
        if task.assignee:
            aname = task.assignee.lpperson.name
            if (aname != tname and lp_team):
                invalid_assignee = True
                for member in lp_team.participants:
                    # assume that either the task is assigned to the
                    # individual of the team, or directly to the team
                    # (not a subteam)
                    if (member.is_valid and not member.is_team and
                        member.name == aname):
                        invalid_assignee = False
                        break
        elif lp_team:
            invalid_assignee = True
        if invalid_assignee:
            if self.handle("Invalid or missing assignee (%s) for workflow task %s"
                           % (aname, workflow_task)):
                task.assignee = lp_team
        return

    def verify_bug_tags(self, bug, task, status, taglist):
        tagcount = 0
        if self.is_task_status(bug, task, status):
            for tag in taglist:
                if tag in bug.tags:
                    tagcount += 1
            if tagcount == 0:
                stderr.write("** Error: Task %s done, but bug doesn't have one of required tags:" % (task))
                for tag in taglist:
                    stderr.write(" %s" % (tag))
                stderr.write("\n")
            if tagcount > 1:
                self.err("Inconsistent tags for %s results (two or more set)" % (task))
        return

    def bug_url(self, bug_id):
        return 'http://%s/bugs/%s' % (self.cfg['lpserver'], bug_id)

    def is_task_status(self, bug, name, status):
        for task in bug.tasks:
            task_name = task.bug_target_name
            if (task_name == self.prjname or
                not task_name.startswith(self.prjname)):
                continue
            workflow_task = task_name[len(self.prjname):].strip()
            if workflow_task == name:
                return task.status == status
        return False

    def err(self, msg):
        stderr.write("** Error: %s\n" % (msg))

    def handle(self, msg):
        if not 'fix' in self.cfg:
            self.err(msg)
            return False
        stderr.write("** Fixing: %s\n" % (msg))
        return True

if __name__ == '__main__':
    app = CheckTrackingBugs()
    app.main()

# vi:set ts=4 sw=4 expandtab:

