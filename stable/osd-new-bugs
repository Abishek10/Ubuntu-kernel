#!/usr/bin/env python
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
from urllib2                            import urlopen, URLError

import json

from ktl.utils                          import stdo, error
from ktl.dbg                            import Dbg
from ktl.cfg                            import Cfg, CfgError
import pygtk
pygtk.require('2.0')
import pynotify

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error("%s\n" % e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--debug=<dbg options>]                                               \n" % defaults['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("                         Recognized debug options:                                           \n")
        stdo("                             enter                                                           \n")
        stdo("                             leave                                                           \n")
        stdo("                             verbose                                                         \n")
        stdo("                             cfg                                                             \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --debug=\"enter,leave,verbose\"                                                   \n" % defaults['app_name'])

    # process
    #
    def process(self, argv):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        result = True
        try:
            cfg = {}
            optsShort = ''
            optsLong  = ['help', 'verbose', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    cfg['verbose'] = True
                    if 'verbose' not in Dbg.levels:
                        Dbg.levels.append('verbose')

                elif opt in ('--debug'):
                    cfg['debug'] = val.split(',')
                    for level in cfg['debug']:
                        if level not in Dbg.levels:
                            Dbg.levels.append(level)

            if result: # No errors yet
                # There might be some bugs listed on the command line.
                #
                if len(args) > 0:
                    cfg['bug-ids'] = args

        except GetoptError, error:
            raise CmdlineError(error)

        return cfg


# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# OsdNewBugs
#
class OsdNewBugs():
    """
    This class/script examines all 'open' bugs. If a given bug was filed against a
    version of Ubuntu that is no longer supported, change the status of that bug
    to "Won't Fix" and add a comment explaining why it was marked as such.
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("OsdNewBugs.__init__")
        self.cfg    = cfg
        self.cache_24hr_data = path.join(path.expanduser('~'), '.cache', '24hr_bug_data.json')
        Dbg.leave("OsdNewBugs.__init__")

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        Dbg.enter("OsdNewBugs.initialize")

        try:
            # Process the command line arguments, and any configuration file options. Make sure
            # that any required parameters have been provided.
            #
            self.cfg = Cfg.merge_options(defaults, self.cfg)

        except CfgError as e:
            error(e)
            Dbg.leave("OsdNewBugs.initialize")
            raise Exit()

        Dbg.leave("OsdNewBugs.initialize")
        return

    # ljf
    #
    def ljf(self, fname):
        """
        Load JSON File.
        """
        retval = None
        if path.exists(fname):
            with open(fname, 'r') as f:
                retval = json.load(f)
        return retval

    # sjf
    #
    def sjf(self, obj, fname):
        """
        Store object in JSON File.
        """
        with open(fname, 'w') as f:
            f.write(json.dumps(obj, sort_keys=True, indent=4))
        return

    # get_24hr_bug_data
    #
    def get_24hr_bug_data(self):
        """
        Download the latest bug data from the kernel report web site.
        """
        retval = None
        try:
            response = urlopen('http://people.canonical.com/~kernel/reports/1-day-window.json')
            retval = json.loads(response.read())
        except URLError as e:
            print(e.reason)
            raise Exit
        return retval

    # notify
    #
    def notify(self, summary, body):
        n = pynotify.Notification(summary, body)
        if not n.show():
            error("Failed to send notification.")
        return

    # main
    #
    def main(self):
        Dbg.enter("OsdNewBugs.main")

        try:
            self.initialize()
            bugs_now    = self.get_24hr_bug_data()
            bugs_before = self.ljf(self.cache_24hr_data)

            # If there is nothing previously cached, then just cache what we just got.
            #
            if bugs_before is not None:
                title = "Bug: %s" % '000000'
                subject = "Hey! Look at me!"
                self.notify(title, subject)

            self.sjf(bugs_now, self.cache_24hr_data)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("OsdNewBugs.main")
        return


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]
    defaults['configuration_file'] = path.dirname(__file__) + '/sru-workflow.cfg'

    # The cmdline processing is done here partially so the debug options
    # can be processed right away.
    #
    cmdline = Cmdline()
    try:
        app = OsdNewBugs(cmdline.process(argv))
        app.main()
    except CmdlineError as e:
        cmdline.error(e.msg, defaults)

# vi:set ts=4 sw=4 expandtab:

