#!/usr/bin/env python
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO, DEBUG, WARNING

from lpltk.LaunchpadService             import LaunchpadService
from ktl.termcolor                      import colored
from ktl.ubuntu                         import Ubuntu

from sb.log                             import Clog, cinfo, cwarn
from sb.kernel_package                  import KernelPackage, KernelPackageBuildStatus, KernelPackageVersion

def dump(d, indent=0):
    for key, value in d.iteritems():
        cinfo( ' ' * (indent * 4) + str(key))
        if isinstance(value, dict):
            dump(value, indent+1)
        else:
            if isinstance(value, KernelPackageBuildStatus):
                if value.built:
                    c = 'green'
                    s = colored('built', c)
                elif value.building:
                    c = 'yellow'
                    s = colored('building', c)
                elif value.missing:
                    c = 'red'
                    s = colored('missing', c)
                cinfo( ' ' * ((indent+1) * 4) + s)
            else:
                cinfo( ' ' * ((indent+1) * 4) + str(value))


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args
        s.__kernel_test_versions = None
        s.ubuntu = Ubuntu()

    @property
    def kernel_versions(s):
        if s.__kernel_test_versions is None:
            lp = s.lp_production.launchpad
            person = lp.people['canonical-kernel-team']
            ppa = person.getPPAByName(name='ppa')

            s.__kernel_test_versions = []
            for astatus in ['Pending', 'Published']:
                psrc = ppa.getPublishedSources(status=astatus)
                for p in  psrc:
                    if p.source_package_name == 'linux':
                        s.__kernel_test_versions.append(p.source_package_version)
                        continue

        return s.__kernel_test_versions

    def p(s, d):
        for pkg in d:
            cinfo('    ' + pkg, 'yellow')

            s = '        '
            for pocket in d[pkg]['status']:
                s += colored('%s: ' % pocket, 'magenta')
                if d[pkg]['status'][pocket].built:
                    c = 'green'
                    s += colored('built     ', c)
                elif d[pkg]['status'][pocket].building:
                    c = 'yellow'
                    s += colored('building  ', c)
                elif d[pkg]['status'][pocket].missing:
                    c = 'red'
                    s += colored('missing   ', c)
            cinfo(s)

    # dependent_packages
    #
    def dependent_packages(s, pv):
        '''
        Put together a list of all the packages that depend on this package.
        '''
        pkgs = {}
        series = s.ubuntu.series_name(pv.package, pv.full)
        entry = s.ubuntu.lookup(series)
        if entry:
            if 'dependent-packages' in entry:
                if pv.package in entry['dependent-packages']:
                    pkgs.update(entry['dependent-packages'][pv.package])

        # The package depends upon itself
        #
        pkgs['main'] = pv.package

        return pkgs

    # main
    #
    def main(s):
        '''
        '''
        retval = 1

        try:
            s.defaults = {}
            s.defaults['launchpad_client_name'] = 'kernel-team-sru-workflow-manager'
            s.lp_production = LaunchpadService(s.defaults)  # Some things are only available on the production
                                                            # service.

            package = 'linux'
            for version in s.kernel_versions:
                v = '%s: %s' % (package, version)
                cinfo(v, 'yellow')
                pv= KernelPackageVersion(v)
                p = KernelPackage(s.lp_production, pv)
                for pocket in ['ppa', 'proposed', 'updates', 'security', 'release']:
                    cinfo('%12s' % pocket + ':' + ' %s' % p.is_in_pocket(pocket))
                cinfo('')
                s.p(p.status)
                cinfo('')

                #s.pkgs = s.dependent_packages(pv)
                for dep in iter(p.pkgs):
                    #cinfo('    %-20s   assignee: %s' % (p.pkgs[dep], p.status[dep]['status']['ppa'].pkg.package_signer))

                    if p.pkgs[dep] == pv.package:  # if 'linux' == 'linux'
                        prep_task_name = 'prepare-package'
                    else:
                        prep_task_name = 'prepare-package-%s' % (dep)

                    cinfo('    workflow task: %s' % prep_task_name)


                cinfo('')

                #       prepare-package - status: Fix Released  assignee: https://api.launchpad.net/devel/~sconklin
                #  prepare-package-meta - status: Fix Released  assignee: https://api.launchpad.net/devel/~sconklin
                #prepare-package-signed - status: Fix Released  assignee: https://api.launchpad.net/devel/~sconklin

            #version = '3.11.0-11.17'
            #v = '%s: %s' % (package, version)
            #cinfo(v, 'yellow')
            #p = KernelPackage(s.lp_production, KernelPackageVersion(v))
            #for pocket in ['ppa', 'proposed', 'updates', 'security', 'release']:
            #    cinfo('%12s' % pocket + ':' + ' %s' % p.is_in_pocket(pocket))
            #cinfo('')
            #s.p(p.status)

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            cwarn("Aborting ...")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    kp --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--verbose',                    action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--debug',                      action='store_true', default=False, help='')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
        Clog.dbg = True
    elif args.verbose:
        basicConfig(level=INFO, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

