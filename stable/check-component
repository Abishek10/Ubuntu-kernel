#!/usr/bin/env python
#

from sys                                import argv
from getopt                             import getopt, GetoptError
from ktl.check_component                import CheckComponent
from ktl.utils                          import stdo, error
from ktl.std_app                        import StdApp
from lpltk.LaunchpadService             import LaunchpadService
from logging                            import basicConfig, INFO, DEBUG, WARNING
from ktl.log                            import Clog

# This script uses the CheckComponent class for listing components or
# checking for component mismatches using the launchpad api

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo("    Usage:                                                                                   \n")
        stdo("        %s <series> <source package>                                                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --staging                                                                            \n")
        stdo("                         Use the staging LP service instead of the production one.           \n")
        stdo("                                                                                             \n")
        stdo("        --pocket=<pocket>                                                                    \n")
        stdo("                         Use the specified pocket instead of the default (proposed)          \n")
        stdo("                                                                                             \n")
        stdo("        --package_version=<version>                                                          \n")
        stdo("                         Don't use the latest version from the archive, use the specified    \n")
        stdo("                         package version                                                     \n")
        stdo("                                                                                             \n")
        stdo("        --list                                                                               \n")
        stdo("                         Just list the component where the packages are in, don't do any     \n")
        stdo("                         mismatch check                                                      \n")
        stdo("                                                                                             \n")
        stdo("        --dbg            Be more verbose                                                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s oneiric linux                                                                     \n" % self.cfg['app_name'])

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'staging', 'pocket=', 'package_version=', 'list', 'dbg']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--staging'):
                    self.cfg['staging'] = True

                elif (opt == '--dbg'):
                    self.cfg['dbg'] = True

                elif opt in '--pocket':
                    self.cfg['pocket'] = val

                elif opt in '--package_version':
                    self.cfg['package_version'] = val

                elif opt in '--list':
                    self.cfg['list'] = True

            if len(args) < 2:
                raise CmdlineError('Missing series and/or package arguments')
            self.cfg['series'] = args[0]
            self.cfg['package'] = args[1]

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        """
        Used to verify that all required parameters are present and correct.
        """
        return


# CheckComponentCli
#
class CheckComponentCli(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}
        self.defaults['dbg'] = False

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        self.defaults['launchpad_client_name'] = 'kernel-team-check-component'
        if 'staging' in self.cfg:
            self.defaults['launchpad_services_root'] = 'qastaging'
        self.defaults['pocket'] = 'proposed'
        self.defaults['read_only'] = True
        self.lp = LaunchpadService(self.defaults)
        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.initialize()
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            if self.cfg['dbg']:
                log_format = "%(levelname)s - %(message)s"
                basicConfig(level=DEBUG, format=log_format)
                Clog.dbg = True

            series = self.cfg['series']
            package = self.cfg['package']
            pocket = self.cfg['pocket']
            if 'package_version' in self.cfg:
                version = self.cfg['package_version']
            else:
                version = None

            check_component = CheckComponent(self.lp)
            if not 'list' in self.cfg:
                mlist = check_component.mismatches_list(series, package, version, pocket)
                for item in mlist:
                    print("%s %s - is in %s instead of %s" % 
                          (item[0], item[1], item[2], item[3]))
            else:
                clist = check_component.components_list(series, package, version, pocket)
                for item in clist:
                    print("%s %s - in %s" % (item[0], item[1], item[2]))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = CheckComponentCli()
    app.main()

# vi:set ts=4 sw=4 expandtab:

