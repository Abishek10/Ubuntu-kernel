#!/usr/bin/env python
#
# This script is intended to produce an html, report of all the bugs in any "open"
# state that have been tagged with a "regression" tag.
#

from sys                                import argv
from os                                 import path, mkdir
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error, dump
from ktl.bugs                           import Bugs, DeltaTime
from ktl.std_app                        import StdApp
from lpltk.service                      import LaunchpadService
from datetime                           import datetime
import json
import pygtk
pygtk.require('2.0')
import pynotify

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    def verbose(self, msg):
        if 'verbose' in self.cfg and self.cfg['verbose']:
            stdo(msg)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s <options>                                                                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("        --update                                                                             \n")
        stdo("                         Run through all the bugs in the specified db and updates the        \n")
        stdo("                         bug information. Any comments added to the bugs since the last      \n")
        stdo("                         are displayed via OSD.                                              \n")
        stdo("                                                                                             \n")
        stdo("        --staging                                                                            \n")
        stdo("                         Use the qastaging server instead of the production server. This     \n")
        stdo("                         is used mostly for debugging.                                       \n")
        stdo("                                                                                             \n")
        stdo("        --db=<db-name>                                                                       \n")
        stdo("                         The database to use to keep track of the bugs being tracked.        \n")
        stdo("                         This is a json format text file in ~/.tracker/                      \n")
        stdo("                                                                                             \n")
        stdo("        --add=<bug-list>                                                                     \n")
        stdo("                         Add one or more bugs to the database for tracking.                  \n")
        stdo("                                                                                             \n")
        stdo("        --rm=<bug-list>                                                                      \n")
        stdo("                         Remove one or more bugs from the database.                          \n")
        stdo("                                                                                             \n")
        stdo("        --nv=<name-value-pairs>                                                              \n")
        stdo("                         Add a name/value pair to the database.                              \n")
        stdo("                                                                                             \n")
        stdo("        --report                                                                             \n")
        stdo("                         Generate an html report for the given database.                     \n")
        stdo("                                                                                             \n")
        stdo("        --tasks                                                                              \n")
        stdo("                         Which tasks in the bug are to be displayed in the report. This      \n")
        stdo("                         information is added to the database.                               \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --db=hot --update --report                                                        \n" % self.cfg['app_name'])
        stdo('        %s --db=hot --add="743907,731878" --report                                           \n' % self.cfg['app_name'])
        stdo('        %s --db=hot --add="743907" --tasks="linux (Ubuntu Natty)"                            \n' % self.cfg['app_name'])
        stdo('        %s --db=hot --rm="743907,731878"                                                     \n' % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        self.cfg['operations'] = []
        self.cfg['-bugs'] = []
        self.cfg['+bugs'] = []
        self.cfg['pairs'] = []
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=', 'update', 'staging', 'db=', 'add=', 'rm=', 'create', 'nv=', 'report', 'tasks=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--staging'):
                    self.cfg['staging'] = True

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--report'):
                    self.cfg['operations'].append('report')

                elif opt in ('--update'):
                    self.cfg['operations'].append('update')

                elif opt in ('--add'):
                    self.cfg['operations'].append('add')
                    for bug in val.replace(' ', '').split(','):
                        self.cfg['+bugs'].append(bug)

                elif opt in ('--rm'):
                    self.cfg['operations'].append('rm')
                    for bug in val.replace(' ', '').split(','):
                        self.cfg['-bugs'].append(bug)

                elif opt in ('--nv'):
                    self.cfg['operations'].append('name+value')
                    for bug in val.split(','):
                        self.cfg['pairs'].append(bug)

                elif (opt == '--create'):
                    self.cfg['operations'].append('create')

                elif opt in ('--db'):
                    self.cfg['database'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

                elif opt in ('--tasks'):
                    self.cfg['operations'].append('add tasks')
                    for t in val.replace(' ', '').split(','):
                        self.cfg['tasks'].append(t)

        except GetoptError as e:
            print(e, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if 'database' not in self.cfg:
            raise CmdlineError('The --db command line parameter is required.\n')
        return

# BugTrackerReport
#
class BugTrackerReport():
    # __init__
    #
    def __init__(self, db):
        self.db = db
        self.importance_color = {
                "Unknown"       : "#000000",
                "Critical"      : "#ff4500", # "#cc0033",
                "High"          : "#ffff22", # "#ff00cc",
                "Medium"        : "#33ff11", # "#009900",
                "Low"           : "#66ffff", # "#cc9900",
                "Wishlist"      : "#ffffff", # "#0066cc",
                "Undecided"     : "#000000"  # "#999999"
            }
        self.status_color     = {
                "New"           : "#ffffff", #"#ff00cc",
                "Incomplete"    : "#ffff22",
                "Opinion"       : "#000000",
                "Invalid"       : "#000000",
                "Won't Fix"     : "#000000",
                "Expired"       : "#000000",
                "Confirmed"     : "#66ffff", #"#0066cc",
                "Triaged"       : "#33ff11", #"#ff9933",
                "In Progress"   : "#ff88ff",
                "Fix Committed" : "#000000", #"#006600",
                "Fix Released"  : "#000000", #"#009900",
                "Unknown"       : "#000000"
            }

        return

    # __str__
    #
    def __str__(self):
        retval  = self.__head()
        retval += self.__body()
        retval += self.__tail()
        return retval

    # __head
    #
    # The begining of the html file.
    #
    def __head(self):
        retval = '''<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
    <head>
        <meta http-equiv="refresh" content="60" />
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />'''

        retval += '\n'
        if 'title' in self.db:
            retval += '        <title>%s</title>\n' % self.db['title']

        retval += '''
        <link rel="stylesheet" href="css/themes/bjf/style.css" type="text/css" media="print, projection, screen" />
        <link rel="stylesheet" href="css/style.css" type="text/css" media="print, projection, screen" />
        <link href='http://fonts.googleapis.com/css?family=Cantarell&subset=latin'              rel='stylesheet' type='text/css'>
        <script type="text/javascript" src="js/jquery-latest.js"></script>
        <script type="text/javascript" src="js/jquery.tablesorter.js"></script>'''

        retval += '\n'
        retval += '        <script type="text/javascript">\n'
        retval += '            $(function() {\n'
        retval += '                $("#the_table").tablesorter({widgets: [\'zebra\']});\n'
        retval += '            });\n'
        retval += '        </script>\n'

        retval += '''
    </head>'''
        retval += '\n'

        return retval

    # __tail
    #
    def __tail(self):
        return '''

</html>
'''

    # __body
    #
    def __body(self):
        retval =  '''
    <body class="bugbody">
        <div class="outermost">'''
        retval += '\n'

        if 'title' in self.db:
            retval += '            <div class="title">\n'
            retval += '                %s\n' % self.db['title']
            retval += '            </div>\n'

        retval += '                <div class="section">\n'
        retval += '                    <table id="the_table" class="tablesorter" border="0" cellpadding="0" cellspacing="1" width="100%%">\n'
        retval += '                        <thead>\n'
        retval += '                            <tr>\n'
        retval += '                                <th width="40">Bug</th>\n'
        retval += '                                <th width="200">Task</th>\n'
        retval += '                                <th>Summary</th>\n'
        retval += '                                <th width="80">Importance</th>\n'
        retval += '                                <th width="80">Status</th>\n'
        retval += '                                <th width="120">Assignee</th>\n'
        retval += '                                <th width="40">&nbsp;C&nbsp;</th>\n'
        retval += '                                <th width="40">&nbsp;G&nbsp;</th>\n'
        retval += '                            </tr>\n'
        retval += '                        </thead>\n'

        retval += '                        <tbody>\n'
        for bug_id in self.db['bugs']:
            retval += self.__bug_details(bug_id)
        retval += '                        </tbody>\n'

        retval += '                    </table>\n'
        retval += '            </div>\n'
        retval += '            <div>\n'
        retval += '                <br />\n'
        retval += '                <hr />\n'
        retval += '                %s\n' % self.db['updated']
        retval += '                <br />\n'
        retval += '                <br />\n'
        retval += '            </div>\n'
        retval += '''

        </div> <!-- Outermost -->
    </body>'''
        retval += '\n'
        return retval

    # date_to_string
    #
    def date_to_string(self, date):
        return date.strftime("%A, %d. %B %Y %H:%M UTC")

    # string_to_date
    #
    def string_to_date(self, date):
        return datetime.strptime(date, '%A, %d. %B %Y %H:%M UTC')

    # __human_time
    #
    def __human_time(self, ago):
        if ago.days > 1:
            when = '%d days' % (ago.days)
        elif ago.days == 1:
            when = '1 day, %h hours' % (ago.hours)
        elif ago.hours > 1:
            when = '%h hours' % (ago.hours)
        elif ago.hours == 1:
            when = '1 hour, %d mintues' % (ago.minutes)
        when = '%d:%02d:%02d' % (ago.days, ago.hours, ago.minutes)

    # __bug_details
    #
    def __bug_details(self, bug_id):
        bug_url = "http://launchpad.net/bugs/%s" % bug_id
        bug = self.db['bugs'][bug_id]

        now = datetime.utcnow()
        now.replace(tzinfo=None)
        ago = DeltaTime(self.string_to_date(bug['date last message']), now)
        when = '%d.%d.%d' % (ago.days, ago.hours, ago.minutes)
        when_style = ''
        if ago.days == 0:
            if ago.hours == 0:
                when_style = 'style="color: #ff0000"'
            else:
                when_style = 'style="color: #ffff00"'

        retval = ''

        if 'tasks tracked' in self.db['bugs'][bug_id]:
            for t in self.db['bugs'][bug_id]['tasks']:
                if t['name'] in self.db['bugs'][bug_id]['tasks tracked']:
                    retval += '                                <tr>\n'
                    retval += '                                    <td ><a href="%s">%s</a></td>\n' % (bug_url, bug_id)                                         # Bug
                    retval += '                                    <td >%s</td>\n' % t['name'].replace(' (Ubuntu)', '').replace('Ubuntu ', '')                  # Task Name
                    retval += '                                    <td>%s</td>\n' % bug['title']                                                                # Summary
                    retval += '                                    <td style="color: %s">%s</td>\n' % (self.importance_color[t['importance']], t['importance']) # Importance
                    retval += '                                    <td style="color: %s">%s</td>\n' % (self.status_color[t['status']], t['status'])             # Status
                    retval += '                                    <td >%s</td>\n' % t['assignee']                                                              # Assignee
                    retval += '                                    <td %s>%s</td>\n' % (when_style, when)                                                       # Last comment
                    retval += '                                    <td >%d</td>\n' % bug['gravity']                                                             # Gravity
                    retval += '                                </tr>\n'
        else:
            for t in self.db['bugs'][bug_id]['tasks']:
                retval += '                                <tr>\n'
                retval += '                                    <td ><a href="%s">%s</a></td>\n' % (bug_url, bug_id)                                         # Bug
                retval += '                                    <td >%s</td>\n' % t['name'].replace(' (Ubuntu)', '').replace('Ubuntu ', '')                  # Task Name
                retval += '                                    <td>%s</td>\n' % bug['title']                                                                # Summary
                retval += '                                    <td style="color: %s">%s</td>\n' % (self.importance_color[t['importance']], t['importance']) # Importance
                retval += '                                    <td style="color: %s">%s</td>\n' % (self.status_color[t['status']], t['status'])             # Status
                retval += '                                    <td >%s</td>\n' % t['assignee']                                                              # Assignee
                retval += '                                    <td %s>%s</td>\n' % (when_style, when)                                                       # Last comment
                retval += '                                    <td >%d</td>\n' % bug['gravity']                                                             # Gravity
                retval += '                                </tr>\n'
        return retval


# BugTrackerError
#
class BugTrackerError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# BugTracker
#
class BugTracker(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}
        self.defaults['readonly'] = True
        self.cfg_dir = path.join(path.expanduser('~'), ".tracker")
        if not path.exists(self.cfg_dir):
            mkdir(self.cfg_dir)

        self.defaults['configuration_file'] = path.join(self.cfg_dir, "tracker.rc")

    # __initialize
    #
    # A separate initialize that we can control when it gets called (not
    # when the object is instantiated).
    #
    def __initialize(self):
        if 'staging' in self.cfg and self.cfg['staging']:
            self.defaults['launchpad_services_root'] = 'qastaging'
        self.verbose(" . Connecting to Launchpad\n")
        self.lp = LaunchpadService(self.defaults)

        # The service.distributions property is a collection of distributions. We
        # pretty much only care about one, 'ubuntu'.
        #
        self.distro = self.lp.distributions['ubuntu']

        if not pynotify.init("Basics"):
            print("*** Warning: Failed to initialize the pynotify library.")

        return

    # date_to_string
    #
    def date_to_string(self, date):
        return date.strftime("%A, %d. %B %Y %H:%M UTC")

    # string_to_date
    #
    def string_to_date(self, date):
        return datetime.strptime(date, '%A, %d. %B %Y %H:%M UTC')

    # notify
    #
    def notify(self, summary, body):
        n = pynotify.Notification(summary, body)
        if not n.show():
            print "Failed to send notification"
        return

    # notify_if_new_comment
    #
    def notify_if_new_comment(self, bug_id, bugs_db):
        try:
            bug = self.lp.get_bug(bug_id)
        except:
            # Could be we are running against the qastaging server and the bug doesn't exist there
            pass

        else:
            messages = bug.messages
            if 'number of messages' in bugs_db['bugs'][bug_id]:
                #if len(messages) > bugs_db['bugs'][bug_id]['number of messages']:
                prev = bugs_db['bugs'][bug_id]['number of messages']
                crnt = len(messages)
                if prev < crnt:
                    for i in range(prev, crnt):
                        title = "Bug: %s" % bug_id
                        subject = messages[i].content
                        self.notify(title, subject)

        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        using_search_since = False
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            now = datetime.utcnow()
            now.replace(tzinfo=None)

            self.__initialize()

            db_path = path.join(self.cfg_dir, self.cfg['database'])
            if path.exists(db_path):
                with open(db_path, 'r') as f:
                    bugs_db = json.load(f)
            else:
                bugs_db = {}
                bugs_db['bugs'] = {}

            bugs_db['updated'] = now.strftime("%A, %d. %B %Y %H:%M UTC")

            if 'create' in self.cfg['operations']:
                self.verbose('create database\n')

            if 'add' in self.cfg['operations']:
                self.verbose('adding bugs\n')
                for bug_id in self.cfg['+bugs']:
                    try:
                        bug = self.lp.get_bug(bug_id)
                        bi = Bugs.bug_info(bug, now)
                        if bi is not None:
                            if 'tasks' in self.cfg:
                                bi['tasks tracked'] = self.cfg['tasks']
                            bugs_db['bugs'][bug_id] = bi
                    except:
                        if 'staging' in self.cfg and self.cfg['staging']:
                            # It's possible the bug is not in the staging server's database
                            pass
                        else:
                            error("The specified bug (%s) does not exist in Launchpad.\n" % (bug_id))

            if 'rm' in self.cfg['operations']:
                self.verbose('removing bugs\n')
                for bug in self.cfg['-bugs']:
                    if bug in bugs_db['bugs']:
                        del bugs_db['bugs'][bug]

            if 'name+value' in self.cfg['operations']:
                self.verbose('name value pairs\n')
                for pair in self.cfg['pairs']:
                    (name, value) = pair.split('=')
                    self.verbose('name: "%s"; value: "%s"\n' % (name, value))
                    bugs_db[name] = value

            if 'update' in self.cfg['operations']:
                for bug_id in bugs_db['bugs']:
                    self.notify_if_new_comment(bug_id, bugs_db)
                    try:
                        bug = self.lp.get_bug(bug_id)

                        task_tracked = None
                        if 'tasks tracked' in bugs_db['bugs'][bug_id]:
                            task_tracked = bugs_db['bugs'][bug_id]['tasks tracked']

                        bi = Bugs.bug_info(bug, now)

                        if task_tracked is not None:
                            bi['tasks tracked'] = task_tracked

                        bugs_db['bugs'][bug_id] = bi
                    except:
                        if 'staging' in self.cfg and self.cfg['staging']:
                            # It's possible the bug is not in the staging server's database
                            pass
                        else:
                            error("The specified bug (%s) does not exist in Launchpad.\n" % (bug_id))
                            raise

            if'report' in self.cfg['operations']:
                report = BugTrackerReport(bugs_db)
                print(report)

            if bugs_db != None:
                with open(db_path, 'w') as f:
                    f.write(json.dumps(bugs_db, sort_keys=True, indent=4))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            self.verbose("Keyboard interrupt\n")
            pass

        # Handle application errors.
        #
        except BugTrackerError as e:
            error(e.msg)

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = BugTracker()
    app.main()

# vi:set ts=4 sw=4 expandtab:

