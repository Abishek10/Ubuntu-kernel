#!/usr/bin/env python
#

from sys                                import argv, exit
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, run_command
from ktl.std_app                        import StdApp
from tempfile                           import mktemp
from urllib                             import urlopen, urlretrieve
import re

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': print e
        self.usage(defaults)
        exit()

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>]                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Fetch all the .orig.tar.gz files from the pool to the current directory                  \n")
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        return


def contains(theString, theQueryValue):
  return theString.find(theQueryValue) > -1

# AppTemplate
#
class AppTemplate(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}
        self.baseURL = 'http://archive.ubuntu.com/ubuntu/pool/main/'
        #self.packages = ['linux', 'linux-ec2', 'linux-source-2.6.15']
        self.packages = ['linux', 'linux-ec2', 'linux-source-2.6.15', 'linux-fsl-imx51', 'linux-mvl-dove', 'linux-ti-omap']

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)
        reportfile = 'orig-tarball-report.txt'
        rf = open(reportfile, 'w+')
        for package in self.packages:
            print "\nFetching orig tarballs for package ", package
            url =  self.baseURL + package[0] + "/" + package + "/" 
            #tf = mktemp()
            f = urlopen(url)
            while 1:
                line = f.readline()
                if not line:
                    break
                if contains(line, 'orig'):
                    # have one, it's in a <td> element, so parse the href
                    regex = 'href *= *\"(.*?)\"'
                    match = re.search(regex, line, re.I)
                    fname =  match.group(1)
                    print >>rf, fname, '     ',
                    print "Fetching ", fname, "     ",
                    # now download it
                    urlretrieve(url + fname, fname)
                    # and get the md5sum
                    cmdline = "md5sum " + fname
                    status, output = run_command(cmdline)
                    if (status):
                        print "ERROR: Error running command <", cmdline, ">"
                    else:
                        sum = output[0].split()[0]
                        print >>rf, sum
                        print sum
        rf.close()
        print '\n\n List of tarballs and md5sums is in ', reportfile

        return

if __name__ == '__main__':
    app = AppTemplate()
    app.main()

# vi:set ts=4 sw=4 expandtab:

